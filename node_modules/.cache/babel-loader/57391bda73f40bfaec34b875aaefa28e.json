{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2013 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // package com.google.zxing.pdf417.decoder;\n// import com.google.zxing.pdf417.PDF417Common;\n\nvar PDF417Common_1 = require(\"../PDF417Common\");\n\nvar Formatter_1 = require(\"../../util/Formatter\");\n/**\n * @author Guenther Grau\n */\n\n\nvar DetectionResult =\n/** @class */\nfunction () {\n  function DetectionResult(barcodeMetadata, boundingBox) {\n    /*final*/\n    this.ADJUST_ROW_NUMBER_SKIP = 2;\n    this.barcodeMetadata = barcodeMetadata;\n    this.barcodeColumnCount = barcodeMetadata.getColumnCount();\n    this.boundingBox = boundingBox; // this.detectionResultColumns = new DetectionResultColumn[this.barcodeColumnCount + 2];\n\n    this.detectionResultColumns = new Array(this.barcodeColumnCount + 2);\n  }\n\n  DetectionResult.prototype.getDetectionResultColumns = function () {\n    this.adjustIndicatorColumnRowNumbers(this.detectionResultColumns[0]);\n    this.adjustIndicatorColumnRowNumbers(this.detectionResultColumns[this.barcodeColumnCount + 1]);\n    var unadjustedCodewordCount = PDF417Common_1.default.MAX_CODEWORDS_IN_BARCODE;\n    var previousUnadjustedCount;\n\n    do {\n      previousUnadjustedCount = unadjustedCodewordCount;\n      unadjustedCodewordCount = this.adjustRowNumbersAndGetCount();\n    } while (unadjustedCodewordCount > 0 && unadjustedCodewordCount < previousUnadjustedCount);\n\n    return this.detectionResultColumns;\n  };\n\n  DetectionResult.prototype.adjustIndicatorColumnRowNumbers = function (detectionResultColumn) {\n    if (detectionResultColumn != null) {\n      detectionResultColumn.adjustCompleteIndicatorColumnRowNumbers(this.barcodeMetadata);\n    }\n  }; // TODO ensure that no detected codewords with unknown row number are left\n  // we should be able to estimate the row height and use it as a hint for the row number\n  // we should also fill the rows top to bottom and bottom to top\n\n  /**\n   * @return number of codewords which don't have a valid row number. Note that the count is not accurate as codewords\n   * will be counted several times. It just serves as an indicator to see when we can stop adjusting row numbers\n   */\n\n\n  DetectionResult.prototype.adjustRowNumbersAndGetCount = function () {\n    var unadjustedCount = this.adjustRowNumbersByRow();\n\n    if (unadjustedCount === 0) {\n      return 0;\n    }\n\n    for (var barcodeColumn\n    /*int*/\n    = 1; barcodeColumn < this.barcodeColumnCount + 1; barcodeColumn++) {\n      var codewords = this.detectionResultColumns[barcodeColumn].getCodewords();\n\n      for (var codewordsRow\n      /*int*/\n      = 0; codewordsRow < codewords.length; codewordsRow++) {\n        if (codewords[codewordsRow] == null) {\n          continue;\n        }\n\n        if (!codewords[codewordsRow].hasValidRowNumber()) {\n          this.adjustRowNumbers(barcodeColumn, codewordsRow, codewords);\n        }\n      }\n    }\n\n    return unadjustedCount;\n  };\n\n  DetectionResult.prototype.adjustRowNumbersByRow = function () {\n    this.adjustRowNumbersFromBothRI(); // TODO we should only do full row adjustments if row numbers of left and right row indicator column match.\n    // Maybe it's even better to calculated the height (rows: d) and divide it by the number of barcode\n    // rows. This, together with the LRI and RRI row numbers should allow us to get a good estimate where a row\n    // number starts and ends.\n\n    var unadjustedCount = this.adjustRowNumbersFromLRI();\n    return unadjustedCount + this.adjustRowNumbersFromRRI();\n  };\n\n  DetectionResult.prototype.adjustRowNumbersFromBothRI = function () {\n    if (this.detectionResultColumns[0] == null || this.detectionResultColumns[this.barcodeColumnCount + 1] == null) {\n      return;\n    }\n\n    var LRIcodewords = this.detectionResultColumns[0].getCodewords();\n    var RRIcodewords = this.detectionResultColumns[this.barcodeColumnCount + 1].getCodewords();\n\n    for (var codewordsRow\n    /*int*/\n    = 0; codewordsRow < LRIcodewords.length; codewordsRow++) {\n      if (LRIcodewords[codewordsRow] != null && RRIcodewords[codewordsRow] != null && LRIcodewords[codewordsRow].getRowNumber() === RRIcodewords[codewordsRow].getRowNumber()) {\n        for (var barcodeColumn\n        /*int*/\n        = 1; barcodeColumn <= this.barcodeColumnCount; barcodeColumn++) {\n          var codeword = this.detectionResultColumns[barcodeColumn].getCodewords()[codewordsRow];\n\n          if (codeword == null) {\n            continue;\n          }\n\n          codeword.setRowNumber(LRIcodewords[codewordsRow].getRowNumber());\n\n          if (!codeword.hasValidRowNumber()) {\n            this.detectionResultColumns[barcodeColumn].getCodewords()[codewordsRow] = null;\n          }\n        }\n      }\n    }\n  };\n\n  DetectionResult.prototype.adjustRowNumbersFromRRI = function () {\n    if (this.detectionResultColumns[this.barcodeColumnCount + 1] == null) {\n      return 0;\n    }\n\n    var unadjustedCount = 0;\n    var codewords = this.detectionResultColumns[this.barcodeColumnCount + 1].getCodewords();\n\n    for (var codewordsRow\n    /*int*/\n    = 0; codewordsRow < codewords.length; codewordsRow++) {\n      if (codewords[codewordsRow] == null) {\n        continue;\n      }\n\n      var rowIndicatorRowNumber = codewords[codewordsRow].getRowNumber();\n      var invalidRowCounts = 0;\n\n      for (var barcodeColumn\n      /*int*/\n      = this.barcodeColumnCount + 1; barcodeColumn > 0 && invalidRowCounts < this.ADJUST_ROW_NUMBER_SKIP; barcodeColumn--) {\n        var codeword = this.detectionResultColumns[barcodeColumn].getCodewords()[codewordsRow];\n\n        if (codeword != null) {\n          invalidRowCounts = DetectionResult.adjustRowNumberIfValid(rowIndicatorRowNumber, invalidRowCounts, codeword);\n\n          if (!codeword.hasValidRowNumber()) {\n            unadjustedCount++;\n          }\n        }\n      }\n    }\n\n    return unadjustedCount;\n  };\n\n  DetectionResult.prototype.adjustRowNumbersFromLRI = function () {\n    if (this.detectionResultColumns[0] == null) {\n      return 0;\n    }\n\n    var unadjustedCount = 0;\n    var codewords = this.detectionResultColumns[0].getCodewords();\n\n    for (var codewordsRow\n    /*int*/\n    = 0; codewordsRow < codewords.length; codewordsRow++) {\n      if (codewords[codewordsRow] == null) {\n        continue;\n      }\n\n      var rowIndicatorRowNumber = codewords[codewordsRow].getRowNumber();\n      var invalidRowCounts = 0;\n\n      for (var barcodeColumn\n      /*int*/\n      = 1; barcodeColumn < this.barcodeColumnCount + 1 && invalidRowCounts < this.ADJUST_ROW_NUMBER_SKIP; barcodeColumn++) {\n        var codeword = this.detectionResultColumns[barcodeColumn].getCodewords()[codewordsRow];\n\n        if (codeword != null) {\n          invalidRowCounts = DetectionResult.adjustRowNumberIfValid(rowIndicatorRowNumber, invalidRowCounts, codeword);\n\n          if (!codeword.hasValidRowNumber()) {\n            unadjustedCount++;\n          }\n        }\n      }\n    }\n\n    return unadjustedCount;\n  };\n\n  DetectionResult.adjustRowNumberIfValid = function (rowIndicatorRowNumber, invalidRowCounts, codeword) {\n    if (codeword == null) {\n      return invalidRowCounts;\n    }\n\n    if (!codeword.hasValidRowNumber()) {\n      if (codeword.isValidRowNumber(rowIndicatorRowNumber)) {\n        codeword.setRowNumber(rowIndicatorRowNumber);\n        invalidRowCounts = 0;\n      } else {\n        ++invalidRowCounts;\n      }\n    }\n\n    return invalidRowCounts;\n  };\n\n  DetectionResult.prototype.adjustRowNumbers = function (barcodeColumn, codewordsRow, codewords) {\n    var e_1, _a;\n\n    var codeword = codewords[codewordsRow];\n    var previousColumnCodewords = this.detectionResultColumns[barcodeColumn - 1].getCodewords();\n    var nextColumnCodewords = previousColumnCodewords;\n\n    if (this.detectionResultColumns[barcodeColumn + 1] != null) {\n      nextColumnCodewords = this.detectionResultColumns[barcodeColumn + 1].getCodewords();\n    } // let otherCodewords: Codeword[] = new Codeword[14];\n\n\n    var otherCodewords = new Array(14);\n    otherCodewords[2] = previousColumnCodewords[codewordsRow];\n    otherCodewords[3] = nextColumnCodewords[codewordsRow];\n\n    if (codewordsRow > 0) {\n      otherCodewords[0] = codewords[codewordsRow - 1];\n      otherCodewords[4] = previousColumnCodewords[codewordsRow - 1];\n      otherCodewords[5] = nextColumnCodewords[codewordsRow - 1];\n    }\n\n    if (codewordsRow > 1) {\n      otherCodewords[8] = codewords[codewordsRow - 2];\n      otherCodewords[10] = previousColumnCodewords[codewordsRow - 2];\n      otherCodewords[11] = nextColumnCodewords[codewordsRow - 2];\n    }\n\n    if (codewordsRow < codewords.length - 1) {\n      otherCodewords[1] = codewords[codewordsRow + 1];\n      otherCodewords[6] = previousColumnCodewords[codewordsRow + 1];\n      otherCodewords[7] = nextColumnCodewords[codewordsRow + 1];\n    }\n\n    if (codewordsRow < codewords.length - 2) {\n      otherCodewords[9] = codewords[codewordsRow + 2];\n      otherCodewords[12] = previousColumnCodewords[codewordsRow + 2];\n      otherCodewords[13] = nextColumnCodewords[codewordsRow + 2];\n    }\n\n    try {\n      for (var otherCodewords_1 = __values(otherCodewords), otherCodewords_1_1 = otherCodewords_1.next(); !otherCodewords_1_1.done; otherCodewords_1_1 = otherCodewords_1.next()) {\n        var otherCodeword = otherCodewords_1_1.value;\n\n        if (DetectionResult.adjustRowNumber(codeword, otherCodeword)) {\n          return;\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (otherCodewords_1_1 && !otherCodewords_1_1.done && (_a = otherCodewords_1.return)) _a.call(otherCodewords_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n  /**\n   * @return true, if row number was adjusted, false otherwise\n   */\n\n\n  DetectionResult.adjustRowNumber = function (codeword, otherCodeword) {\n    if (otherCodeword == null) {\n      return false;\n    }\n\n    if (otherCodeword.hasValidRowNumber() && otherCodeword.getBucket() === codeword.getBucket()) {\n      codeword.setRowNumber(otherCodeword.getRowNumber());\n      return true;\n    }\n\n    return false;\n  };\n\n  DetectionResult.prototype.getBarcodeColumnCount = function () {\n    return this.barcodeColumnCount;\n  };\n\n  DetectionResult.prototype.getBarcodeRowCount = function () {\n    return this.barcodeMetadata.getRowCount();\n  };\n\n  DetectionResult.prototype.getBarcodeECLevel = function () {\n    return this.barcodeMetadata.getErrorCorrectionLevel();\n  };\n\n  DetectionResult.prototype.setBoundingBox = function (boundingBox) {\n    this.boundingBox = boundingBox;\n  };\n\n  DetectionResult.prototype.getBoundingBox = function () {\n    return this.boundingBox;\n  };\n\n  DetectionResult.prototype.setDetectionResultColumn = function (barcodeColumn, detectionResultColumn) {\n    this.detectionResultColumns[barcodeColumn] = detectionResultColumn;\n  };\n\n  DetectionResult.prototype.getDetectionResultColumn = function (barcodeColumn) {\n    return this.detectionResultColumns[barcodeColumn];\n  }; // @Override\n\n\n  DetectionResult.prototype.toString = function () {\n    var rowIndicatorColumn = this.detectionResultColumns[0];\n\n    if (rowIndicatorColumn == null) {\n      rowIndicatorColumn = this.detectionResultColumns[this.barcodeColumnCount + 1];\n    } // try (\n\n\n    var formatter = new Formatter_1.default(); // ) {\n\n    for (var codewordsRow\n    /*int*/\n    = 0; codewordsRow < rowIndicatorColumn.getCodewords().length; codewordsRow++) {\n      formatter.format('CW %3d:', codewordsRow);\n\n      for (var barcodeColumn\n      /*int*/\n      = 0; barcodeColumn < this.barcodeColumnCount + 2; barcodeColumn++) {\n        if (this.detectionResultColumns[barcodeColumn] == null) {\n          formatter.format('    |   ');\n          continue;\n        }\n\n        var codeword = this.detectionResultColumns[barcodeColumn].getCodewords()[codewordsRow];\n\n        if (codeword == null) {\n          formatter.format('    |   ');\n          continue;\n        }\n\n        formatter.format(' %3d|%3d', codeword.getRowNumber(), codeword.getValue());\n      }\n\n      formatter.format('%n');\n    }\n\n    return formatter.toString(); // }\n  };\n\n  return DetectionResult;\n}();\n\nexports.default = DetectionResult;","map":{"version":3,"mappings":"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","names":["barcodeMetadata","boundingBox","barcodeColumnCount","getColumnCount","detectionResultColumns","Array","DetectionResult","adjustIndicatorColumnRowNumbers","unadjustedCodewordCount","PDF417Common_1","MAX_CODEWORDS_IN_BARCODE","previousUnadjustedCount","adjustRowNumbersAndGetCount","detectionResultColumn","adjustCompleteIndicatorColumnRowNumbers","unadjustedCount","adjustRowNumbersByRow","barcodeColumn","codewords","getCodewords","codewordsRow","length","hasValidRowNumber","adjustRowNumbers","adjustRowNumbersFromBothRI","adjustRowNumbersFromLRI","adjustRowNumbersFromRRI","LRIcodewords","RRIcodewords","getRowNumber","codeword","setRowNumber","rowIndicatorRowNumber","invalidRowCounts","ADJUST_ROW_NUMBER_SKIP","adjustRowNumberIfValid","isValidRowNumber","previousColumnCodewords","nextColumnCodewords","otherCodewords","otherCodewords_1_1","otherCodeword","adjustRowNumber","getBucket","getRowCount","getErrorCorrectionLevel","rowIndicatorColumn","formatter","Formatter_1","format","getValue","toString"],"sources":["../../../../src/core/pdf417/decoder/DetectionResult.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}