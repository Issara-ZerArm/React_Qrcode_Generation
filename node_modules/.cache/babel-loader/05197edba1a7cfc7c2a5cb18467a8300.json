{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.qrcode.decoder {*/\n\nvar ArgumentException_1 = require(\"../../ArgumentException\");\n\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n\nvar ErrorCorrectionLevelValues;\n\n(function (ErrorCorrectionLevelValues) {\n  ErrorCorrectionLevelValues[ErrorCorrectionLevelValues[\"L\"] = 0] = \"L\";\n  ErrorCorrectionLevelValues[ErrorCorrectionLevelValues[\"M\"] = 1] = \"M\";\n  ErrorCorrectionLevelValues[ErrorCorrectionLevelValues[\"Q\"] = 2] = \"Q\";\n  ErrorCorrectionLevelValues[ErrorCorrectionLevelValues[\"H\"] = 3] = \"H\";\n})(ErrorCorrectionLevelValues = exports.ErrorCorrectionLevelValues || (exports.ErrorCorrectionLevelValues = {}));\n/**\n * <p>See ISO 18004:2006, 6.5.1. This enum encapsulates the four error correction levels\n * defined by the QR code standard.</p>\n *\n * @author Sean Owen\n */\n\n\nvar ErrorCorrectionLevel =\n/** @class */\nfunction () {\n  function ErrorCorrectionLevel(value, stringValue, bits\n  /*int*/\n  ) {\n    this.value = value;\n    this.stringValue = stringValue;\n    this.bits = bits;\n    ErrorCorrectionLevel.FOR_BITS.set(bits, this);\n    ErrorCorrectionLevel.FOR_VALUE.set(value, this);\n  }\n\n  ErrorCorrectionLevel.prototype.getValue = function () {\n    return this.value;\n  };\n\n  ErrorCorrectionLevel.prototype.getBits = function () {\n    return this.bits;\n  };\n\n  ErrorCorrectionLevel.fromString = function (s) {\n    switch (s) {\n      case 'L':\n        return ErrorCorrectionLevel.L;\n\n      case 'M':\n        return ErrorCorrectionLevel.M;\n\n      case 'Q':\n        return ErrorCorrectionLevel.Q;\n\n      case 'H':\n        return ErrorCorrectionLevel.H;\n\n      default:\n        throw new ArgumentException_1.default(s + 'not available');\n    }\n  };\n\n  ErrorCorrectionLevel.prototype.toString = function () {\n    return this.stringValue;\n  };\n\n  ErrorCorrectionLevel.prototype.equals = function (o) {\n    if (!(o instanceof ErrorCorrectionLevel)) {\n      return false;\n    }\n\n    var other = o;\n    return this.value === other.value;\n  };\n  /**\n   * @param bits int containing the two bits encoding a QR Code's error correction level\n   * @return ErrorCorrectionLevel representing the encoded error correction level\n   */\n\n\n  ErrorCorrectionLevel.forBits = function (bits\n  /*int*/\n  ) {\n    if (bits < 0 || bits >= ErrorCorrectionLevel.FOR_BITS.size) {\n      throw new IllegalArgumentException_1.default();\n    }\n\n    return ErrorCorrectionLevel.FOR_BITS.get(bits);\n  };\n\n  ErrorCorrectionLevel.FOR_BITS = new Map();\n  ErrorCorrectionLevel.FOR_VALUE = new Map();\n  /** L = ~7% correction */\n\n  ErrorCorrectionLevel.L = new ErrorCorrectionLevel(ErrorCorrectionLevelValues.L, 'L', 0x01);\n  /** M = ~15% correction */\n\n  ErrorCorrectionLevel.M = new ErrorCorrectionLevel(ErrorCorrectionLevelValues.M, 'M', 0x00);\n  /** Q = ~25% correction */\n\n  ErrorCorrectionLevel.Q = new ErrorCorrectionLevel(ErrorCorrectionLevelValues.Q, 'Q', 0x03);\n  /** H = ~30% correction */\n\n  ErrorCorrectionLevel.H = new ErrorCorrectionLevel(ErrorCorrectionLevelValues.H, 'H', 0x02);\n  return ErrorCorrectionLevel;\n}();\n\nexports.default = ErrorCorrectionLevel;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;AAgBA;;AAGA;;AACA;;AAEA,IAAYA,0BAAZ;;AAAA,WAAYA,0BAAZ,EAAsC;AAClCA;AACAA;AACAA;AACAA;AACH,CALD,EAAYA,0BAA0B,GAA1BC,4EAA0B,EAA1B,CAAZ;AAOA;;;;;;;;AAMA;AAAA;AAAA;AAcI,gCAA4BC,KAA5B,EAAuEC,WAAvE,EAAoGC;AAAa;AAAjH,IAAwH;AAA5F;AAA2C;AAA6B;AAChGC,wBAAoB,CAACC,QAArB,CAA8BC,GAA9B,CAAkCH,IAAlC,EAAwC,IAAxC;AACAC,wBAAoB,CAACG,SAArB,CAA+BD,GAA/B,CAAmCL,KAAnC,EAA0C,IAA1C;AACH;;AAEMG,4CAAP;AACI,WAAO,KAAKH,KAAZ;AACH,GAFM;;AAIAG,2CAAP;AACI,WAAO,KAAKD,IAAZ;AACH,GAFM;;AAIOC,oCAAd,UAAyBI,CAAzB,EAAkC;AAC9B,YAAQA,CAAR;AACI,WAAK,GAAL;AAAU,eAAOJ,oBAAoB,CAACK,CAA5B;;AACV,WAAK,GAAL;AAAU,eAAOL,oBAAoB,CAACM,CAA5B;;AACV,WAAK,GAAL;AAAU,eAAON,oBAAoB,CAACO,CAA5B;;AACV,WAAK,GAAL;AAAU,eAAOP,oBAAoB,CAACQ,CAA5B;;AACV;AAAS,cAAM,IAAIC,2BAAJ,CAAsBL,CAAC,GAAG,eAA1B,CAAN;AALb;AAOH,GARa;;AAUPJ,4CAAP;AACI,WAAO,KAAKF,WAAZ;AACH,GAFM;;AAIAE,0CAAP,UAAcU,CAAd,EAAoB;AAChB,QAAI,EAAEA,CAAC,YAAYV,oBAAf,CAAJ,EAA0C;AACtC,aAAO,KAAP;AACH;;AACD,QAAMW,KAAK,GAAyBD,CAApC;AACA,WAAO,KAAKb,KAAL,KAAec,KAAK,CAACd,KAA5B;AACH,GANM;AAOP;;;;;;AAIcG,iCAAd,UAAsBD;AAAa;AAAnC,IAA0C;AACtC,QAAIA,IAAI,GAAG,CAAP,IAAYA,IAAI,IAAIC,oBAAoB,CAACC,QAArB,CAA8BW,IAAtD,EAA4D;AACxD,YAAM,IAAIC,kCAAJ,EAAN;AACH;;AACD,WAAOb,oBAAoB,CAACC,QAArB,CAA8Ba,GAA9B,CAAkCf,IAAlC,CAAP;AACH,GALa;;AAlDCC,kCAAW,IAAIe,GAAJ,EAAX;AACAf,mCAAY,IAAIe,GAAJ,EAAZ;AAEf;;AACcf,2BAAI,IAAIA,oBAAJ,CAAyBL,0BAA0B,CAACU,CAApD,EAAuD,GAAvD,EAA4D,IAA5D,CAAJ;AACd;;AACcL,2BAAI,IAAIA,oBAAJ,CAAyBL,0BAA0B,CAACW,CAApD,EAAuD,GAAvD,EAA4D,IAA5D,CAAJ;AACd;;AACcN,2BAAI,IAAIA,oBAAJ,CAAyBL,0BAA0B,CAACY,CAApD,EAAuD,GAAvD,EAA4D,IAA5D,CAAJ;AACd;;AACcP,2BAAI,IAAIA,oBAAJ,CAAyBL,0BAA0B,CAACa,CAApD,EAAuD,GAAvD,EAA4D,IAA5D,CAAJ;AA+ClB;AA3DA;;kBAAqBR","names":["ErrorCorrectionLevelValues","exports","value","stringValue","bits","ErrorCorrectionLevel","FOR_BITS","set","FOR_VALUE","s","L","M","Q","H","ArgumentException_1","o","other","size","IllegalArgumentException_1","get","Map"],"sources":["../../../../src/core/qrcode/decoder/ErrorCorrectionLevel.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}