{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.common.reedsolomon {*/\n\nvar GenericGFPoly_1 = require(\"./GenericGFPoly\");\n\nvar AbstractGenericGF_1 = require(\"./AbstractGenericGF\");\n\nvar Integer_1 = require(\"../../util/Integer\");\n\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n\nvar ArithmeticException_1 = require(\"../../ArithmeticException\");\n/**\n * <p>This class contains utility methods for performing mathematical operations over\n * the Galois Fields. Operations use a given primitive polynomial in calculations.</p>\n *\n * <p>Throughout this package, elements of the GF are represented as an {@code int}\n * for convenience and speed (but at the cost of memory).\n * </p>\n *\n * @author Sean Owen\n * @author David Olivier\n */\n\n\nvar GenericGF =\n/** @class */\nfunction (_super) {\n  __extends(GenericGF, _super);\n  /**\n   * Create a representation of GF(size) using the given primitive polynomial.\n   *\n   * @param primitive irreducible polynomial whose coefficients are represented by\n   *  the bits of an int, where the least-significant bit represents the constant\n   *  coefficient\n   * @param size the size of the field\n   * @param b the factor b in the generator polynomial can be 0- or 1-based\n   *  (g(x) = (x+a^b)(x+a^(b+1))...(x+a^(b+2t-1))).\n   *  In most cases it should be 1, but for QR code it is 0.\n   */\n\n\n  function GenericGF(primitive\n  /*int*/\n  , size\n  /*int*/\n  , generatorBase\n  /*int*/\n  ) {\n    var _this = _super.call(this) || this;\n\n    _this.primitive = primitive;\n    _this.size = size;\n    _this.generatorBase = generatorBase;\n    var expTable = new Int32Array(size);\n    var x = 1;\n\n    for (var i = 0; i < size; i++) {\n      expTable[i] = x;\n      x *= 2; // we're assuming the generator alpha is 2\n\n      if (x >= size) {\n        x ^= primitive;\n        x &= size - 1;\n      }\n    }\n\n    _this.expTable = expTable;\n    var logTable = new Int32Array(size);\n\n    for (var i = 0; i < size - 1; i++) {\n      logTable[expTable[i]] = i;\n    }\n\n    _this.logTable = logTable; // logTable[0] == 0 but this should never be used\n\n    _this.zero = new GenericGFPoly_1.default(_this, Int32Array.from([0]));\n    _this.one = new GenericGFPoly_1.default(_this, Int32Array.from([1]));\n    return _this;\n  }\n\n  GenericGF.prototype.getZero = function () {\n    return this.zero;\n  };\n\n  GenericGF.prototype.getOne = function () {\n    return this.one;\n  };\n  /**\n   * @return the monomial representing coefficient * x^degree\n   */\n\n\n  GenericGF.prototype.buildMonomial = function (degree\n  /*int*/\n  , coefficient\n  /*int*/\n  ) {\n    if (degree < 0) {\n      throw new IllegalArgumentException_1.default();\n    }\n\n    if (coefficient === 0) {\n      return this.zero;\n    }\n\n    var coefficients = new Int32Array(degree + 1);\n    coefficients[0] = coefficient;\n    return new GenericGFPoly_1.default(this, coefficients);\n  };\n  /**\n   * @return multiplicative inverse of a\n   */\n\n\n  GenericGF.prototype.inverse = function (a\n  /*int*/\n  ) {\n    if (a === 0) {\n      throw new ArithmeticException_1.default();\n    }\n\n    return this.expTable[this.size - this.logTable[a] - 1];\n  };\n  /**\n   * @return product of a and b in GF(size)\n   */\n\n\n  GenericGF.prototype.multiply = function (a\n  /*int*/\n  , b\n  /*int*/\n  ) {\n    if (a === 0 || b === 0) {\n      return 0;\n    }\n\n    return this.expTable[(this.logTable[a] + this.logTable[b]) % (this.size - 1)];\n  };\n\n  GenericGF.prototype.getSize = function () {\n    return this.size;\n  };\n\n  GenericGF.prototype.getGeneratorBase = function () {\n    return this.generatorBase;\n  };\n  /*@Override*/\n\n\n  GenericGF.prototype.toString = function () {\n    return 'GF(0x' + Integer_1.default.toHexString(this.primitive) + ',' + this.size + ')';\n  };\n\n  GenericGF.prototype.equals = function (o) {\n    return o === this;\n  };\n\n  GenericGF.AZTEC_DATA_12 = new GenericGF(0x1069, 4096, 1); // x^12 + x^6 + x^5 + x^3 + 1\n\n  GenericGF.AZTEC_DATA_10 = new GenericGF(0x409, 1024, 1); // x^10 + x^3 + 1\n\n  GenericGF.AZTEC_DATA_6 = new GenericGF(0x43, 64, 1); // x^6 + x + 1\n\n  GenericGF.AZTEC_PARAM = new GenericGF(0x13, 16, 1); // x^4 + x + 1\n\n  GenericGF.QR_CODE_FIELD_256 = new GenericGF(0x011d, 256, 0); // x^8 + x^4 + x^3 + x^2 + 1\n\n  GenericGF.DATA_MATRIX_FIELD_256 = new GenericGF(0x012d, 256, 1); // x^8 + x^5 + x^3 + x^2 + 1\n\n  GenericGF.AZTEC_DATA_8 = GenericGF.DATA_MATRIX_FIELD_256;\n  GenericGF.MAXICODE_FIELD_64 = GenericGF.AZTEC_DATA_6;\n  return GenericGF;\n}(AbstractGenericGF_1.default);\n\nexports.default = GenericGF;","map":{"version":3,"mappings":"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","names":["__extends","primitive","size","generatorBase","_super","_this","expTable","Int32Array","x","i","logTable","zero","GenericGFPoly_1","from","one","GenericGF","degree","coefficient","IllegalArgumentException_1","coefficients","a","ArithmeticException_1","b","Integer_1","toHexString","o","DATA_MATRIX_FIELD_256","AZTEC_DATA_6","AbstractGenericGF_1"],"sources":["../../../../src/core/common/reedsolomon/GenericGF.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}