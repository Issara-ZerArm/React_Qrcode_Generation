{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.qrcode {*/\n\nvar BarcodeFormat_1 = require(\"../BarcodeFormat\");\n\nvar EncodeHintType_1 = require(\"../EncodeHintType\");\n\nvar BitMatrix_1 = require(\"../common/BitMatrix\");\n\nvar ErrorCorrectionLevel_1 = require(\"./decoder/ErrorCorrectionLevel\");\n\nvar Encoder_1 = require(\"./encoder/Encoder\");\n\nvar IllegalArgumentException_1 = require(\"../IllegalArgumentException\");\n\nvar IllegalStateException_1 = require(\"../IllegalStateException\");\n/*import java.util.Map;*/\n\n/**\n * This object renders a QR Code as a BitMatrix 2D array of greyscale values.\n *\n * @author dswitkin@google.com (Daniel Switkin)\n */\n\n\nvar QRCodeWriter =\n/** @class */\nfunction () {\n  function QRCodeWriter() {}\n  /*@Override*/\n  // public encode(contents: string, format: BarcodeFormat, width: number /*int*/, height: number /*int*/): BitMatrix\n  //     /*throws WriterException */ {\n  //   return encode(contents, format, width, height, null)\n  // }\n\n  /*@Override*/\n\n\n  QRCodeWriter.prototype.encode = function (contents, format, width\n  /*int*/\n  , height\n  /*int*/\n  , hints) {\n    if (contents.length === 0) {\n      throw new IllegalArgumentException_1.default('Found empty contents');\n    }\n\n    if (format !== BarcodeFormat_1.default.QR_CODE) {\n      throw new IllegalArgumentException_1.default('Can only encode QR_CODE, but got ' + format);\n    }\n\n    if (width < 0 || height < 0) {\n      throw new IllegalArgumentException_1.default(\"Requested dimensions are too small: \" + width + \"x\" + height);\n    }\n\n    var errorCorrectionLevel = ErrorCorrectionLevel_1.default.L;\n    var quietZone = QRCodeWriter.QUIET_ZONE_SIZE;\n\n    if (hints !== null) {\n      if (undefined !== hints.get(EncodeHintType_1.default.ERROR_CORRECTION)) {\n        errorCorrectionLevel = ErrorCorrectionLevel_1.default.fromString(hints.get(EncodeHintType_1.default.ERROR_CORRECTION).toString());\n      }\n\n      if (undefined !== hints.get(EncodeHintType_1.default.MARGIN)) {\n        quietZone = Number.parseInt(hints.get(EncodeHintType_1.default.MARGIN).toString(), 10);\n      }\n    }\n\n    var code = Encoder_1.default.encode(contents, errorCorrectionLevel, hints);\n    return QRCodeWriter.renderResult(code, width, height, quietZone);\n  }; // Note that the input matrix uses 0 == white, 1 == black, while the output matrix uses\n  // 0 == black, 255 == white (i.e. an 8 bit greyscale bitmap).\n\n\n  QRCodeWriter.renderResult = function (code, width\n  /*int*/\n  , height\n  /*int*/\n  , quietZone\n  /*int*/\n  ) {\n    var input = code.getMatrix();\n\n    if (input === null) {\n      throw new IllegalStateException_1.default();\n    }\n\n    var inputWidth = input.getWidth();\n    var inputHeight = input.getHeight();\n    var qrWidth = inputWidth + quietZone * 2;\n    var qrHeight = inputHeight + quietZone * 2;\n    var outputWidth = Math.max(width, qrWidth);\n    var outputHeight = Math.max(height, qrHeight);\n    var multiple = Math.min(Math.floor(outputWidth / qrWidth), Math.floor(outputHeight / qrHeight)); // Padding includes both the quiet zone and the extra white pixels to accommodate the requested\n    // dimensions. For example, if input is 25x25 the QR will be 33x33 including the quiet zone.\n    // If the requested size is 200x160, the multiple will be 4, for a QR of 132x132. These will\n    // handle all the padding from 100x100 (the actual QR) up to 200x160.\n\n    var leftPadding = Math.floor((outputWidth - inputWidth * multiple) / 2);\n    var topPadding = Math.floor((outputHeight - inputHeight * multiple) / 2);\n    var output = new BitMatrix_1.default(outputWidth, outputHeight);\n\n    for (var inputY = 0, outputY = topPadding; inputY < inputHeight; inputY++, outputY += multiple) {\n      // Write the contents of this row of the barcode\n      for (var inputX = 0, outputX = leftPadding; inputX < inputWidth; inputX++, outputX += multiple) {\n        if (input.get(inputX, inputY) === 1) {\n          output.setRegion(outputX, outputY, multiple, multiple);\n        }\n      }\n    }\n\n    return output;\n  };\n\n  QRCodeWriter.QUIET_ZONE_SIZE = 4;\n  return QRCodeWriter;\n}();\n\nexports.default = QRCodeWriter;","map":{"version":3,"mappings":"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","names":["QRCodeWriter","contents","format","width","height","hints","length","IllegalArgumentException_1","BarcodeFormat_1","QR_CODE","errorCorrectionLevel","ErrorCorrectionLevel_1","L","quietZone","QUIET_ZONE_SIZE","undefined","get","EncodeHintType_1","ERROR_CORRECTION","fromString","toString","MARGIN","Number","parseInt","code","Encoder_1","encode","renderResult","input","getMatrix","IllegalStateException_1","inputWidth","getWidth","inputHeight","getHeight","qrWidth","qrHeight","outputWidth","Math","max","outputHeight","multiple","min","floor","leftPadding","topPadding","output","BitMatrix_1","inputY","outputY","inputX","outputX","setRegion"],"sources":["../../../src/core/qrcode/QRCodeWriter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}