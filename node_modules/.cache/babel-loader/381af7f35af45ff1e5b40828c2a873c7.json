{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar System_1 = require(\"./System\");\n\nvar IllegalArgumentException_1 = require(\"../IllegalArgumentException\");\n\nvar ArrayIndexOutOfBoundsException_1 = require(\"../ArrayIndexOutOfBoundsException\");\n\nvar Arrays =\n/** @class */\nfunction () {\n  function Arrays() {}\n  /**\n   * Assigns the specified int value to each element of the specified array\n   * of ints.\n   *\n   * @param a the array to be filled\n   * @param val the value to be stored in all elements of the array\n   */\n\n\n  Arrays.fill = function (a, val) {\n    for (var i = 0, len = a.length; i < len; i++) {\n      a[i] = val;\n    }\n  };\n  /**\n   * Assigns the specified int value to each element of the specified\n   * range of the specified array of ints.  The range to be filled\n   * extends from index {@code fromIndex}, inclusive, to index\n   * {@code toIndex}, exclusive.  (If {@code fromIndex==toIndex}, the\n   * range to be filled is empty.)\n   *\n   * @param a the array to be filled\n   * @param fromIndex the index of the first element (inclusive) to be\n   *        filled with the specified value\n   * @param toIndex the index of the last element (exclusive) to be\n   *        filled with the specified value\n   * @param val the value to be stored in all elements of the array\n   * @throws IllegalArgumentException if {@code fromIndex > toIndex}\n   * @throws ArrayIndexOutOfBoundsException if {@code fromIndex < 0} or\n   *         {@code toIndex > a.length}\n   */\n\n\n  Arrays.fillWithin = function (a, fromIndex, toIndex, val) {\n    Arrays.rangeCheck(a.length, fromIndex, toIndex);\n\n    for (var i = fromIndex; i < toIndex; i++) {\n      a[i] = val;\n    }\n  };\n  /**\n   * Checks that {@code fromIndex} and {@code toIndex} are in\n   * the range and throws an exception if they aren't.\n   */\n\n\n  Arrays.rangeCheck = function (arrayLength, fromIndex, toIndex) {\n    if (fromIndex > toIndex) {\n      throw new IllegalArgumentException_1.default('fromIndex(' + fromIndex + ') > toIndex(' + toIndex + ')');\n    }\n\n    if (fromIndex < 0) {\n      throw new ArrayIndexOutOfBoundsException_1.default(fromIndex);\n    }\n\n    if (toIndex > arrayLength) {\n      throw new ArrayIndexOutOfBoundsException_1.default(toIndex);\n    }\n  };\n\n  Arrays.asList = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return args;\n  };\n\n  Arrays.create = function (rows, cols, value) {\n    var arr = Array.from({\n      length: rows\n    });\n    return arr.map(function (x) {\n      return Array.from({\n        length: cols\n      }).fill(value);\n    });\n  };\n\n  Arrays.createInt32Array = function (rows, cols, value) {\n    var arr = Array.from({\n      length: rows\n    });\n    return arr.map(function (x) {\n      return Int32Array.from({\n        length: cols\n      }).fill(value);\n    });\n  };\n\n  Arrays.equals = function (first, second) {\n    if (!first) {\n      return false;\n    }\n\n    if (!second) {\n      return false;\n    }\n\n    if (!first.length) {\n      return false;\n    }\n\n    if (!second.length) {\n      return false;\n    }\n\n    if (first.length !== second.length) {\n      return false;\n    }\n\n    for (var i = 0, length_1 = first.length; i < length_1; i++) {\n      if (first[i] !== second[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  Arrays.hashCode = function (a) {\n    var e_1, _a;\n\n    if (a === null) {\n      return 0;\n    }\n\n    var result = 1;\n\n    try {\n      for (var a_1 = __values(a), a_1_1 = a_1.next(); !a_1_1.done; a_1_1 = a_1.next()) {\n        var element = a_1_1.value;\n        result = 31 * result + element;\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (a_1_1 && !a_1_1.done && (_a = a_1.return)) _a.call(a_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return result;\n  };\n\n  Arrays.fillUint8Array = function (a, value) {\n    for (var i = 0; i !== a.length; i++) {\n      a[i] = value;\n    }\n  };\n\n  Arrays.copyOf = function (original, newLength) {\n    return original.slice(0, newLength);\n  };\n\n  Arrays.copyOfUint8Array = function (original, newLength) {\n    if (original.length <= newLength) {\n      var newArray = new Uint8Array(newLength);\n      newArray.set(original);\n      return newArray;\n    }\n\n    return original.slice(0, newLength);\n  };\n\n  Arrays.copyOfRange = function (original, from, to) {\n    var newLength = to - from;\n    var copy = new Int32Array(newLength);\n    System_1.default.arraycopy(original, from, copy, 0, newLength);\n    return copy;\n  };\n  /*\n  * Returns the index of of the element in a sorted array or (-n-1) where n is the insertion point\n  * for the new element.\n  * Parameters:\n  *     ar - A sorted array\n  *     el - An element to search for\n  *     comparator - A comparator function. The function takes two arguments: (a, b) and returns:\n  *        a negative number  if a is less than b;\n  *        0 if a is equal to b;\n  *        a positive number of a is greater than b.\n  * The array may contain duplicate elements. If there are more than one equal elements in the array,\n  * the returned value can be the index of any one of the equal elements.\n  *\n  * http://jsfiddle.net/aryzhov/pkfst550/\n  */\n\n\n  Arrays.binarySearch = function (ar, el, comparator) {\n    if (undefined === comparator) {\n      comparator = Arrays.numberComparator;\n    }\n\n    var m = 0;\n    var n = ar.length - 1;\n\n    while (m <= n) {\n      var k = n + m >> 1;\n      var cmp = comparator(el, ar[k]);\n\n      if (cmp > 0) {\n        m = k + 1;\n      } else if (cmp < 0) {\n        n = k - 1;\n      } else {\n        return k;\n      }\n    }\n\n    return -m - 1;\n  };\n\n  Arrays.numberComparator = function (a, b) {\n    return a - b;\n  };\n\n  return Arrays;\n}();\n\nexports.default = Arrays;","map":{"version":3,"mappings":"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","names":["Arrays","a","val","i","len","length","fromIndex","toIndex","rangeCheck","arrayLength","IllegalArgumentException_1","ArrayIndexOutOfBoundsException_1","args","rows","cols","value","arr","Array","from","map","fill","first","second","length_1","result","a_1_1","element","original","newLength","slice","newArray","Uint8Array","set","to","copy","Int32Array","System_1","arraycopy","ar","el","comparator","undefined","numberComparator","m","n","k","cmp","b"],"sources":["../../../src/core/util/Arrays.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}