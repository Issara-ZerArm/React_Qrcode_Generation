{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2010 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar DecoderResult_1 = require(\"../../common/DecoderResult\");\n\nvar GenericGF_1 = require(\"../../common/reedsolomon/GenericGF\");\n\nvar ReedSolomonDecoder_1 = require(\"../../common/reedsolomon/ReedSolomonDecoder\");\n\nvar IllegalStateException_1 = require(\"../../IllegalStateException\");\n\nvar FormatException_1 = require(\"../../FormatException\");\n\nvar __1 = require(\"../../..\");\n\nvar Integer_1 = require(\"../../util/Integer\"); // import java.util.Arrays;\n\n\nvar Table;\n\n(function (Table) {\n  Table[Table[\"UPPER\"] = 0] = \"UPPER\";\n  Table[Table[\"LOWER\"] = 1] = \"LOWER\";\n  Table[Table[\"MIXED\"] = 2] = \"MIXED\";\n  Table[Table[\"DIGIT\"] = 3] = \"DIGIT\";\n  Table[Table[\"PUNCT\"] = 4] = \"PUNCT\";\n  Table[Table[\"BINARY\"] = 5] = \"BINARY\";\n})(Table || (Table = {}));\n/**\n * <p>The main class which implements Aztec Code decoding -- as opposed to locating and extracting\n * the Aztec Code from an image.</p>\n *\n * @author David Olivier\n */\n\n\nvar Decoder =\n/** @class */\nfunction () {\n  function Decoder() {}\n\n  Decoder.prototype.decode = function (detectorResult) {\n    this.ddata = detectorResult;\n    var matrix = detectorResult.getBits();\n    var rawbits = this.extractBits(matrix);\n    var correctedBits = this.correctBits(rawbits);\n    var rawBytes = Decoder.convertBoolArrayToByteArray(correctedBits);\n    var result = Decoder.getEncodedData(correctedBits);\n    var decoderResult = new DecoderResult_1.default(rawBytes, result, null, null);\n    decoderResult.setNumBits(correctedBits.length);\n    return decoderResult;\n  }; // This method is used for testing the high-level encoder\n\n\n  Decoder.highLevelDecode = function (correctedBits) {\n    return this.getEncodedData(correctedBits);\n  };\n  /**\n   * Gets the string encoded in the aztec code bits\n   *\n   * @return the decoded string\n   */\n\n\n  Decoder.getEncodedData = function (correctedBits) {\n    var endIndex = correctedBits.length;\n    var latchTable = Table.UPPER; // table most recently latched to\n\n    var shiftTable = Table.UPPER; // table to use for the next read\n\n    var result = '';\n    var index = 0;\n\n    while (index < endIndex) {\n      if (shiftTable === Table.BINARY) {\n        if (endIndex - index < 5) {\n          break;\n        }\n\n        var length_1 = Decoder.readCode(correctedBits, index, 5);\n        index += 5;\n\n        if (length_1 === 0) {\n          if (endIndex - index < 11) {\n            break;\n          }\n\n          length_1 = Decoder.readCode(correctedBits, index, 11) + 31;\n          index += 11;\n        }\n\n        for (var charCount = 0; charCount < length_1; charCount++) {\n          if (endIndex - index < 8) {\n            index = endIndex; // Force outer loop to exit\n\n            break;\n          }\n\n          var code = Decoder.readCode(correctedBits, index, 8);\n          result +=\n          /*(char)*/\n          __1.StringUtils.castAsNonUtf8Char(code);\n          index += 8;\n        } // Go back to whatever mode we had been in\n\n\n        shiftTable = latchTable;\n      } else {\n        var size = shiftTable === Table.DIGIT ? 4 : 5;\n\n        if (endIndex - index < size) {\n          break;\n        }\n\n        var code = Decoder.readCode(correctedBits, index, size);\n        index += size;\n        var str = Decoder.getCharacter(shiftTable, code);\n\n        if (str.startsWith('CTRL_')) {\n          // Table changes\n          // ISO/IEC 24778:2008 prescribes ending a shift sequence in the mode from which it was invoked.\n          // That's including when that mode is a shift.\n          // Our test case dlusbs.png for issue #642 exercises that.\n          latchTable = shiftTable; // Latch the current mode, so as to return to Upper after U/S B/S\n\n          shiftTable = Decoder.getTable(str.charAt(5));\n\n          if (str.charAt(6) === 'L') {\n            latchTable = shiftTable;\n          }\n        } else {\n          result += str; // Go back to whatever mode we had been in\n\n          shiftTable = latchTable;\n        }\n      }\n    }\n\n    return result;\n  };\n  /**\n   * gets the table corresponding to the char passed\n   */\n\n\n  Decoder.getTable = function (t) {\n    switch (t) {\n      case 'L':\n        return Table.LOWER;\n\n      case 'P':\n        return Table.PUNCT;\n\n      case 'M':\n        return Table.MIXED;\n\n      case 'D':\n        return Table.DIGIT;\n\n      case 'B':\n        return Table.BINARY;\n\n      case 'U':\n      default:\n        return Table.UPPER;\n    }\n  };\n  /**\n   * Gets the character (or string) corresponding to the passed code in the given table\n   *\n   * @param table the table used\n   * @param code the code of the character\n   */\n\n\n  Decoder.getCharacter = function (table, code) {\n    switch (table) {\n      case Table.UPPER:\n        return Decoder.UPPER_TABLE[code];\n\n      case Table.LOWER:\n        return Decoder.LOWER_TABLE[code];\n\n      case Table.MIXED:\n        return Decoder.MIXED_TABLE[code];\n\n      case Table.PUNCT:\n        return Decoder.PUNCT_TABLE[code];\n\n      case Table.DIGIT:\n        return Decoder.DIGIT_TABLE[code];\n\n      default:\n        // Should not reach here.\n        throw new IllegalStateException_1.default('Bad table');\n    }\n  };\n  /**\n   * <p>Performs RS error correction on an array of bits.</p>\n   *\n   * @return the corrected array\n   * @throws FormatException if the input contains too many errors\n   */\n\n\n  Decoder.prototype.correctBits = function (rawbits) {\n    var gf;\n    var codewordSize;\n\n    if (this.ddata.getNbLayers() <= 2) {\n      codewordSize = 6;\n      gf = GenericGF_1.default.AZTEC_DATA_6;\n    } else if (this.ddata.getNbLayers() <= 8) {\n      codewordSize = 8;\n      gf = GenericGF_1.default.AZTEC_DATA_8;\n    } else if (this.ddata.getNbLayers() <= 22) {\n      codewordSize = 10;\n      gf = GenericGF_1.default.AZTEC_DATA_10;\n    } else {\n      codewordSize = 12;\n      gf = GenericGF_1.default.AZTEC_DATA_12;\n    }\n\n    var numDataCodewords = this.ddata.getNbDatablocks();\n    var numCodewords = rawbits.length / codewordSize;\n\n    if (numCodewords < numDataCodewords) {\n      throw new FormatException_1.default();\n    }\n\n    var offset = rawbits.length % codewordSize;\n    var dataWords = new Int32Array(numCodewords);\n\n    for (var i = 0; i < numCodewords; i++, offset += codewordSize) {\n      dataWords[i] = Decoder.readCode(rawbits, offset, codewordSize);\n    }\n\n    try {\n      var rsDecoder = new ReedSolomonDecoder_1.default(gf);\n      rsDecoder.decode(dataWords, numCodewords - numDataCodewords);\n    } catch (ex) {\n      throw new FormatException_1.default(ex);\n    } // Now perform the unstuffing operation.\n    // First, count how many bits are going to be thrown out as stuffing\n\n\n    var mask = (1 << codewordSize) - 1;\n    var stuffedBits = 0;\n\n    for (var i = 0; i < numDataCodewords; i++) {\n      var dataWord = dataWords[i];\n\n      if (dataWord === 0 || dataWord === mask) {\n        throw new FormatException_1.default();\n      } else if (dataWord === 1 || dataWord === mask - 1) {\n        stuffedBits++;\n      }\n    } // Now, actually unpack the bits and remove the stuffing\n\n\n    var correctedBits = new Array(numDataCodewords * codewordSize - stuffedBits);\n    var index = 0;\n\n    for (var i = 0; i < numDataCodewords; i++) {\n      var dataWord = dataWords[i];\n\n      if (dataWord === 1 || dataWord === mask - 1) {\n        // next codewordSize-1 bits are all zeros or all ones\n        correctedBits.fill(dataWord > 1, index, index + codewordSize - 1); // Arrays.fill(correctedBits, index, index + codewordSize - 1, dataWord > 1);\n\n        index += codewordSize - 1;\n      } else {\n        for (var bit = codewordSize - 1; bit >= 0; --bit) {\n          correctedBits[index++] = (dataWord & 1 << bit) !== 0;\n        }\n      }\n    }\n\n    return correctedBits;\n  };\n  /**\n   * Gets the array of bits from an Aztec Code matrix\n   *\n   * @return the array of bits\n   */\n\n\n  Decoder.prototype.extractBits = function (matrix) {\n    var compact = this.ddata.isCompact();\n    var layers = this.ddata.getNbLayers();\n    var baseMatrixSize = (compact ? 11 : 14) + layers * 4; // not including alignment lines\n\n    var alignmentMap = new Int32Array(baseMatrixSize);\n    var rawbits = new Array(this.totalBitsInLayer(layers, compact));\n\n    if (compact) {\n      for (var i = 0; i < alignmentMap.length; i++) {\n        alignmentMap[i] = i;\n      }\n    } else {\n      var matrixSize = baseMatrixSize + 1 + 2 * Integer_1.default.truncDivision(Integer_1.default.truncDivision(baseMatrixSize, 2) - 1, 15);\n      var origCenter = baseMatrixSize / 2;\n      var center = Integer_1.default.truncDivision(matrixSize, 2);\n\n      for (var i = 0; i < origCenter; i++) {\n        var newOffset = i + Integer_1.default.truncDivision(i, 15);\n        alignmentMap[origCenter - i - 1] = center - newOffset - 1;\n        alignmentMap[origCenter + i] = center + newOffset + 1;\n      }\n    }\n\n    for (var i = 0, rowOffset = 0; i < layers; i++) {\n      var rowSize = (layers - i) * 4 + (compact ? 9 : 12); // The top-left most point of this layer is <low, low> (not including alignment lines)\n\n      var low = i * 2; // The bottom-right most point of this layer is <high, high> (not including alignment lines)\n\n      var high = baseMatrixSize - 1 - low; // We pull bits from the two 2 x rowSize columns and two rowSize x 2 rows\n\n      for (var j = 0; j < rowSize; j++) {\n        var columnOffset = j * 2;\n\n        for (var k = 0; k < 2; k++) {\n          // left column\n          rawbits[rowOffset + columnOffset + k] = matrix.get(alignmentMap[low + k], alignmentMap[low + j]); // bottom row\n\n          rawbits[rowOffset + 2 * rowSize + columnOffset + k] = matrix.get(alignmentMap[low + j], alignmentMap[high - k]); // right column\n\n          rawbits[rowOffset + 4 * rowSize + columnOffset + k] = matrix.get(alignmentMap[high - k], alignmentMap[high - j]); // top row\n\n          rawbits[rowOffset + 6 * rowSize + columnOffset + k] = matrix.get(alignmentMap[high - j], alignmentMap[low + k]);\n        }\n      }\n\n      rowOffset += rowSize * 8;\n    }\n\n    return rawbits;\n  };\n  /**\n   * Reads a code of given length and at given index in an array of bits\n   */\n\n\n  Decoder.readCode = function (rawbits, startIndex, length) {\n    var res = 0;\n\n    for (var i = startIndex; i < startIndex + length; i++) {\n      res <<= 1;\n\n      if (rawbits[i]) {\n        res |= 0x01;\n      }\n    }\n\n    return res;\n  };\n  /**\n   * Reads a code of length 8 in an array of bits, padding with zeros\n   */\n\n\n  Decoder.readByte = function (rawbits, startIndex) {\n    var n = rawbits.length - startIndex;\n\n    if (n >= 8) {\n      return Decoder.readCode(rawbits, startIndex, 8);\n    }\n\n    return Decoder.readCode(rawbits, startIndex, n) << 8 - n;\n  };\n  /**\n   * Packs a bit array into bytes, most significant bit first\n   */\n\n\n  Decoder.convertBoolArrayToByteArray = function (boolArr) {\n    var byteArr = new Uint8Array((boolArr.length + 7) / 8);\n\n    for (var i = 0; i < byteArr.length; i++) {\n      byteArr[i] = Decoder.readByte(boolArr, 8 * i);\n    }\n\n    return byteArr;\n  };\n\n  Decoder.prototype.totalBitsInLayer = function (layers, compact) {\n    return ((compact ? 88 : 112) + 16 * layers) * layers;\n  };\n\n  Decoder.UPPER_TABLE = ['CTRL_PS', ' ', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'CTRL_LL', 'CTRL_ML', 'CTRL_DL', 'CTRL_BS'];\n  Decoder.LOWER_TABLE = ['CTRL_PS', ' ', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'CTRL_US', 'CTRL_ML', 'CTRL_DL', 'CTRL_BS'];\n  Decoder.MIXED_TABLE = [// Module parse failed: Octal literal in strict mode (50:29)\n  // so number string were scaped\n  'CTRL_PS', ' ', '\\\\1', '\\\\2', '\\\\3', '\\\\4', '\\\\5', '\\\\6', '\\\\7', '\\b', '\\t', '\\n', '\\\\13', '\\f', '\\r', '\\\\33', '\\\\34', '\\\\35', '\\\\36', '\\\\37', '@', '\\\\', '^', '_', '`', '|', '~', '\\\\177', 'CTRL_LL', 'CTRL_UL', 'CTRL_PL', 'CTRL_BS'];\n  Decoder.PUNCT_TABLE = ['', '\\r', '\\r\\n', '. ', ', ', ': ', '!', '\"', '#', '$', '%', '&', '\\'', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '[', ']', '{', '}', 'CTRL_UL'];\n  Decoder.DIGIT_TABLE = ['CTRL_PS', ' ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ',', '.', 'CTRL_UL', 'CTRL_US'];\n  return Decoder;\n}();\n\nexports.default = Decoder;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;AAmBA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA,8C,CAGA;;;AAEA,IAAKA,KAAL;;AAAA,WAAKA,KAAL,EAAU;AACNA;AACAA;AACAA;AACAA;AACAA;AACAA;AACH,CAPD,EAAKA,KAAK,KAALA,KAAK,MAAV;AASA;;;;;;;;AAMA;AAAA;AAAA;AAAA,sBAqUC;;AAtSUC,6BAAP,UAAcC,cAAd,EAAiD;AAC7C,SAAKC,KAAL,GAAaD,cAAb;AACA,QAAIE,MAAM,GAAGF,cAAc,CAACG,OAAf,EAAb;AACA,QAAIC,OAAO,GAAG,KAAKC,WAAL,CAAiBH,MAAjB,CAAd;AACA,QAAII,aAAa,GAAG,KAAKC,WAAL,CAAiBH,OAAjB,CAApB;AACA,QAAII,QAAQ,GAAGT,OAAO,CAACU,2BAAR,CAAoCH,aAApC,CAAf;AACA,QAAII,MAAM,GAAGX,OAAO,CAACY,cAAR,CAAuBL,aAAvB,CAAb;AACA,QAAIM,aAAa,GAAG,IAAIC,uBAAJ,CAAkBL,QAAlB,EAA4BE,MAA5B,EAAoC,IAApC,EAA0C,IAA1C,CAApB;AACAE,iBAAa,CAACE,UAAd,CAAyBR,aAAa,CAACS,MAAvC;AACA,WAAOH,aAAP;AACH,GAVM,CA/BX,CA2CI;;;AACcb,4BAAd,UAA8BO,aAA9B,EAAsD;AAClD,WAAO,KAAKK,cAAL,CAAoBL,aAApB,CAAP;AACH,GAFa;AAId;;;;;;;AAKeP,2BAAf,UAA8BO,aAA9B,EAAsD;AAClD,QAAIU,QAAQ,GAAWV,aAAa,CAACS,MAArC;AACA,QAAIE,UAAU,GAAGnB,KAAK,CAACoB,KAAvB,CAFkD,CAEpB;;AAC9B,QAAIC,UAAU,GAAGrB,KAAK,CAACoB,KAAvB,CAHkD,CAGpB;;AAC9B,QAAIR,MAAM,GAAW,EAArB;AACA,QAAIU,KAAK,GAAG,CAAZ;;AACA,WAAOA,KAAK,GAAGJ,QAAf,EAAyB;AACrB,UAAIG,UAAU,KAAKrB,KAAK,CAACuB,MAAzB,EAAiC;AAC7B,YAAIL,QAAQ,GAAGI,KAAX,GAAmB,CAAvB,EAA0B;AACtB;AACH;;AACD,YAAIE,QAAM,GAAGvB,OAAO,CAACwB,QAAR,CAAiBjB,aAAjB,EAAgCc,KAAhC,EAAuC,CAAvC,CAAb;AACAA,aAAK,IAAI,CAAT;;AACA,YAAIE,QAAM,KAAK,CAAf,EAAkB;AACd,cAAIN,QAAQ,GAAGI,KAAX,GAAmB,EAAvB,EAA2B;AACvB;AACH;;AACDE,kBAAM,GAAGvB,OAAO,CAACwB,QAAR,CAAiBjB,aAAjB,EAAgCc,KAAhC,EAAuC,EAAvC,IAA6C,EAAtD;AACAA,eAAK,IAAI,EAAT;AACH;;AACD,aAAK,IAAII,SAAS,GAAG,CAArB,EAAwBA,SAAS,GAAGF,QAApC,EAA4CE,SAAS,EAArD,EAAyD;AACrD,cAAIR,QAAQ,GAAGI,KAAX,GAAmB,CAAvB,EAA0B;AACtBA,iBAAK,GAAGJ,QAAR,CADsB,CACH;;AACnB;AACH;;AACD,cAAMS,IAAI,GAAQ1B,OAAO,CAACwB,QAAR,CAAiBjB,aAAjB,EAAgCc,KAAhC,EAAuC,CAAvC,CAAlB;AACAV,gBAAM;AAAI;AAAWgB,0BAAYC,iBAAZ,CAA8BF,IAA9B,CAArB;AACAL,eAAK,IAAI,CAAT;AACH,SArB4B,CAsB7B;;;AACAD,kBAAU,GAAGF,UAAb;AACH,OAxBD,MAwBO;AACH,YAAIW,IAAI,GAAGT,UAAU,KAAKrB,KAAK,CAAC+B,KAArB,GAA6B,CAA7B,GAAiC,CAA5C;;AACA,YAAIb,QAAQ,GAAGI,KAAX,GAAmBQ,IAAvB,EAA6B;AACzB;AACH;;AACD,YAAIH,IAAI,GAAG1B,OAAO,CAACwB,QAAR,CAAiBjB,aAAjB,EAAgCc,KAAhC,EAAuCQ,IAAvC,CAAX;AACAR,aAAK,IAAIQ,IAAT;AACA,YAAIE,GAAG,GAAG/B,OAAO,CAACgC,YAAR,CAAqBZ,UAArB,EAAiCM,IAAjC,CAAV;;AACA,YAAIK,GAAG,CAACE,UAAJ,CAAe,OAAf,CAAJ,EAA6B;AACzB;AACA;AACA;AACA;AACAf,oBAAU,GAAGE,UAAb,CALyB,CAKC;;AAC1BA,oBAAU,GAAGpB,OAAO,CAACkC,QAAR,CAAiBH,GAAG,CAACI,MAAJ,CAAW,CAAX,CAAjB,CAAb;;AACA,cAAIJ,GAAG,CAACI,MAAJ,CAAW,CAAX,MAAkB,GAAtB,EAA2B;AACvBjB,sBAAU,GAAGE,UAAb;AACH;AACJ,SAVD,MAUO;AACHT,gBAAM,IAAIoB,GAAV,CADG,CAEH;;AACAX,oBAAU,GAAGF,UAAb;AACH;AACJ;AACJ;;AACD,WAAOP,MAAP;AACH,GAzDc;AA2Df;;;;;AAGeX,qBAAf,UAAwBoC,CAAxB,EAAiC;AAC7B,YAAQA,CAAR;AACI,WAAK,GAAL;AACI,eAAOrC,KAAK,CAACsC,KAAb;;AACJ,WAAK,GAAL;AACI,eAAOtC,KAAK,CAACuC,KAAb;;AACJ,WAAK,GAAL;AACI,eAAOvC,KAAK,CAACwC,KAAb;;AACJ,WAAK,GAAL;AACI,eAAOxC,KAAK,CAAC+B,KAAb;;AACJ,WAAK,GAAL;AACI,eAAO/B,KAAK,CAACuB,MAAb;;AACJ,WAAK,GAAL;AACA;AACI,eAAOvB,KAAK,CAACoB,KAAb;AAbR;AAeH,GAhBc;AAkBf;;;;;;;;AAMenB,yBAAf,UAA4BwC,KAA5B,EAA0Cd,IAA1C,EAAsD;AAClD,YAAQc,KAAR;AACI,WAAKzC,KAAK,CAACoB,KAAX;AACI,eAAOnB,OAAO,CAACyC,WAAR,CAAoBf,IAApB,CAAP;;AACJ,WAAK3B,KAAK,CAACsC,KAAX;AACI,eAAOrC,OAAO,CAAC0C,WAAR,CAAoBhB,IAApB,CAAP;;AACJ,WAAK3B,KAAK,CAACwC,KAAX;AACI,eAAOvC,OAAO,CAAC2C,WAAR,CAAoBjB,IAApB,CAAP;;AACJ,WAAK3B,KAAK,CAACuC,KAAX;AACI,eAAOtC,OAAO,CAAC4C,WAAR,CAAoBlB,IAApB,CAAP;;AACJ,WAAK3B,KAAK,CAAC+B,KAAX;AACI,eAAO9B,OAAO,CAAC6C,WAAR,CAAoBnB,IAApB,CAAP;;AACJ;AACI;AACA,cAAM,IAAIoB,+BAAJ,CAA0B,WAA1B,CAAN;AAbR;AAeH,GAhBc;AAkBf;;;;;;;;AAMQ9C,kCAAR,UAAoBK,OAApB,EAAsC;AAClC,QAAI0C,EAAJ;AACA,QAAIC,YAAJ;;AAEA,QAAI,KAAK9C,KAAL,CAAW+C,WAAX,MAA4B,CAAhC,EAAmC;AAC/BD,kBAAY,GAAG,CAAf;AACAD,QAAE,GAAGG,oBAAUC,YAAf;AACH,KAHD,MAGO,IAAI,KAAKjD,KAAL,CAAW+C,WAAX,MAA4B,CAAhC,EAAmC;AACtCD,kBAAY,GAAG,CAAf;AACAD,QAAE,GAAGG,oBAAUE,YAAf;AACH,KAHM,MAGA,IAAI,KAAKlD,KAAL,CAAW+C,WAAX,MAA4B,EAAhC,EAAoC;AACvCD,kBAAY,GAAG,EAAf;AACAD,QAAE,GAAGG,oBAAUG,aAAf;AACH,KAHM,MAGA;AACHL,kBAAY,GAAG,EAAf;AACAD,QAAE,GAAGG,oBAAUI,aAAf;AACH;;AAED,QAAIC,gBAAgB,GAAG,KAAKrD,KAAL,CAAWsD,eAAX,EAAvB;AACA,QAAIC,YAAY,GAAGpD,OAAO,CAACW,MAAR,GAAiBgC,YAApC;;AACA,QAAIS,YAAY,GAAGF,gBAAnB,EAAqC;AACjC,YAAM,IAAIG,yBAAJ,EAAN;AACH;;AACD,QAAIC,MAAM,GAAGtD,OAAO,CAACW,MAAR,GAAiBgC,YAA9B;AAEA,QAAIY,SAAS,GAAe,IAAIC,UAAJ,CAAeJ,YAAf,CAA5B;;AACA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,YAApB,EAAkCK,CAAC,IAAKH,MAAM,IAAIX,YAAlD,EAAgE;AAC5DY,eAAS,CAACE,CAAD,CAAT,GAAe9D,OAAO,CAACwB,QAAR,CAAiBnB,OAAjB,EAA0BsD,MAA1B,EAAkCX,YAAlC,CAAf;AACH;;AAED,QAAI;AACA,UAAIe,SAAS,GAAG,IAAIC,4BAAJ,CAAuBjB,EAAvB,CAAhB;AACAgB,eAAS,CAACE,MAAV,CAAiBL,SAAjB,EAA4BH,YAAY,GAAGF,gBAA3C;AACH,KAHD,CAGE,OAAOW,EAAP,EAAW;AACT,YAAM,IAAIR,yBAAJ,CAAoBQ,EAApB,CAAN;AACH,KAnCiC,CAqClC;AACA;;;AACA,QAAIC,IAAI,GAAG,CAAC,KAAKnB,YAAN,IAAsB,CAAjC;AACA,QAAIoB,WAAW,GAAG,CAAlB;;AACA,SAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,gBAApB,EAAsCO,CAAC,EAAvC,EAA2C;AACvC,UAAIO,QAAQ,GAAGT,SAAS,CAACE,CAAD,CAAxB;;AACA,UAAIO,QAAQ,KAAK,CAAb,IAAkBA,QAAQ,KAAKF,IAAnC,EAAyC;AACrC,cAAM,IAAIT,yBAAJ,EAAN;AACH,OAFD,MAEO,IAAIW,QAAQ,KAAK,CAAb,IAAkBA,QAAQ,KAAKF,IAAI,GAAG,CAA1C,EAA6C;AAChDC,mBAAW;AACd;AACJ,KAhDiC,CAiDlC;;;AACA,QAAI7D,aAAa,GAAc,IAAI+D,KAAJ,CAAUf,gBAAgB,GAAGP,YAAnB,GAAkCoB,WAA5C,CAA/B;AACA,QAAI/C,KAAK,GAAG,CAAZ;;AACA,SAAK,IAAIyC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,gBAApB,EAAsCO,CAAC,EAAvC,EAA2C;AACvC,UAAIO,QAAQ,GAAGT,SAAS,CAACE,CAAD,CAAxB;;AACA,UAAIO,QAAQ,KAAK,CAAb,IAAkBA,QAAQ,KAAKF,IAAI,GAAG,CAA1C,EAA6C;AACzC;AACA5D,qBAAa,CAACgE,IAAd,CAAmBF,QAAQ,GAAG,CAA9B,EAAiChD,KAAjC,EAAwCA,KAAK,GAAG2B,YAAR,GAAuB,CAA/D,EAFyC,CAGzC;;AACA3B,aAAK,IAAI2B,YAAY,GAAG,CAAxB;AACH,OALD,MAKO;AACH,aAAK,IAAIwB,GAAG,GAAGxB,YAAY,GAAG,CAA9B,EAAiCwB,GAAG,IAAI,CAAxC,EAA2C,EAAEA,GAA7C,EAAkD;AAC9CjE,uBAAa,CAACc,KAAK,EAAN,CAAb,GAAyB,CAACgD,QAAQ,GAAI,KAAKG,GAAlB,MAA4B,CAArD;AACH;AACJ;AACJ;;AACD,WAAOjE,aAAP;AACH,GAlEO;AAoER;;;;;;;AAKQP,kCAAR,UAAoBG,MAApB,EAAqC;AACjC,QAAIsE,OAAO,GAAG,KAAKvE,KAAL,CAAWwE,SAAX,EAAd;AACA,QAAIC,MAAM,GAAG,KAAKzE,KAAL,CAAW+C,WAAX,EAAb;AACA,QAAI2B,cAAc,GAAG,CAACH,OAAO,GAAG,EAAH,GAAQ,EAAhB,IAAsBE,MAAM,GAAG,CAApD,CAHiC,CAGsB;;AACvD,QAAIE,YAAY,GAAG,IAAIhB,UAAJ,CAAee,cAAf,CAAnB;AACA,QAAIvE,OAAO,GAAc,IAAIiE,KAAJ,CAAU,KAAKQ,gBAAL,CAAsBH,MAAtB,EAA8BF,OAA9B,CAAV,CAAzB;;AAEA,QAAIA,OAAJ,EAAa;AACT,WAAK,IAAIX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGe,YAAY,CAAC7D,MAAjC,EAAyC8C,CAAC,EAA1C,EAA8C;AAC1Ce,oBAAY,CAACf,CAAD,CAAZ,GAAkBA,CAAlB;AACH;AACJ,KAJD,MAIO;AACH,UAAIiB,UAAU,GAAGH,cAAc,GAAG,CAAjB,GAAqB,IAAII,kBAAQC,aAAR,CAAuBD,kBAAQC,aAAR,CAAsBL,cAAtB,EAAsC,CAAtC,IAA2C,CAAlE,EAAsE,EAAtE,CAA1C;AACA,UAAIM,UAAU,GAAGN,cAAc,GAAG,CAAlC;AACA,UAAIO,MAAM,GAAGH,kBAAQC,aAAR,CAAsBF,UAAtB,EAAkC,CAAlC,CAAb;;AACA,WAAK,IAAIjB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoB,UAApB,EAAgCpB,CAAC,EAAjC,EAAqC;AACjC,YAAIsB,SAAS,GAAGtB,CAAC,GAAGkB,kBAAQC,aAAR,CAAsBnB,CAAtB,EAAyB,EAAzB,CAApB;AACAe,oBAAY,CAACK,UAAU,GAAGpB,CAAb,GAAiB,CAAlB,CAAZ,GAAmCqB,MAAM,GAAGC,SAAT,GAAqB,CAAxD;AACAP,oBAAY,CAACK,UAAU,GAAGpB,CAAd,CAAZ,GAA+BqB,MAAM,GAAGC,SAAT,GAAqB,CAApD;AACH;AACJ;;AACD,SAAK,IAAItB,CAAC,GAAG,CAAR,EAAWuB,SAAS,GAAG,CAA5B,EAA+BvB,CAAC,GAAGa,MAAnC,EAA2Cb,CAAC,EAA5C,EAAgD;AAC5C,UAAIwB,OAAO,GAAG,CAACX,MAAM,GAAGb,CAAV,IAAe,CAAf,IAAoBW,OAAO,GAAG,CAAH,GAAO,EAAlC,CAAd,CAD4C,CAE5C;;AACA,UAAIc,GAAG,GAAGzB,CAAC,GAAG,CAAd,CAH4C,CAI5C;;AACA,UAAI0B,IAAI,GAAGZ,cAAc,GAAG,CAAjB,GAAqBW,GAAhC,CAL4C,CAM5C;;AACA,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,OAApB,EAA6BG,CAAC,EAA9B,EAAkC;AAC9B,YAAIC,YAAY,GAAGD,CAAC,GAAG,CAAvB;;AACA,aAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB;AACAtF,iBAAO,CAACgF,SAAS,GAAGK,YAAZ,GAA2BC,CAA5B,CAAP,GACIxF,MAAM,CAACyF,GAAP,CAAWf,YAAY,CAACU,GAAG,GAAGI,CAAP,CAAvB,EAAkCd,YAAY,CAACU,GAAG,GAAGE,CAAP,CAA9C,CADJ,CAFwB,CAIxB;;AACApF,iBAAO,CAACgF,SAAS,GAAG,IAAIC,OAAhB,GAA0BI,YAA1B,GAAyCC,CAA1C,CAAP,GACIxF,MAAM,CAACyF,GAAP,CAAWf,YAAY,CAACU,GAAG,GAAGE,CAAP,CAAvB,EAAkCZ,YAAY,CAACW,IAAI,GAAGG,CAAR,CAA9C,CADJ,CALwB,CAOxB;;AACAtF,iBAAO,CAACgF,SAAS,GAAG,IAAIC,OAAhB,GAA0BI,YAA1B,GAAyCC,CAA1C,CAAP,GACIxF,MAAM,CAACyF,GAAP,CAAWf,YAAY,CAACW,IAAI,GAAGG,CAAR,CAAvB,EAAmCd,YAAY,CAACW,IAAI,GAAGC,CAAR,CAA/C,CADJ,CARwB,CAUxB;;AACApF,iBAAO,CAACgF,SAAS,GAAG,IAAIC,OAAhB,GAA0BI,YAA1B,GAAyCC,CAA1C,CAAP,GACIxF,MAAM,CAACyF,GAAP,CAAWf,YAAY,CAACW,IAAI,GAAGC,CAAR,CAAvB,EAAmCZ,YAAY,CAACU,GAAG,GAAGI,CAAP,CAA/C,CADJ;AAEH;AACJ;;AACDN,eAAS,IAAIC,OAAO,GAAG,CAAvB;AACH;;AACD,WAAOjF,OAAP;AACH,GAhDO;AAkDR;;;;;AAGeL,qBAAf,UAAwBK,OAAxB,EAA4CwF,UAA5C,EAAgE7E,MAAhE,EAA8E;AAC1E,QAAI8E,GAAG,GAAG,CAAV;;AACA,SAAK,IAAIhC,CAAC,GAAG+B,UAAb,EAAyB/B,CAAC,GAAG+B,UAAU,GAAG7E,MAA1C,EAAkD8C,CAAC,EAAnD,EAAuD;AACnDgC,SAAG,KAAK,CAAR;;AACA,UAAIzF,OAAO,CAACyD,CAAD,CAAX,EAAgB;AACZgC,WAAG,IAAI,IAAP;AACH;AACJ;;AACD,WAAOA,GAAP;AACH,GATc;AAWf;;;;;AAGe9F,qBAAf,UAAwBK,OAAxB,EAA4CwF,UAA5C,EAA8D;AAC1D,QAAIE,CAAC,GAAG1F,OAAO,CAACW,MAAR,GAAiB6E,UAAzB;;AACA,QAAIE,CAAC,IAAI,CAAT,EAAY;AACR,aAAO/F,OAAO,CAACwB,QAAR,CAAiBnB,OAAjB,EAA0BwF,UAA1B,EAAsC,CAAtC,CAAP;AACH;;AACD,WAAO7F,OAAO,CAACwB,QAAR,CAAiBnB,OAAjB,EAA0BwF,UAA1B,EAAsCE,CAAtC,KAA6C,IAAIA,CAAxD;AACH,GANc;AAQf;;;;;AAGc/F,wCAAd,UAA0CgG,OAA1C,EAA4D;AACxD,QAAIC,OAAO,GAAG,IAAIC,UAAJ,CAAe,CAACF,OAAO,CAAChF,MAAR,GAAiB,CAAlB,IAAuB,CAAtC,CAAd;;AACA,SAAK,IAAI8C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmC,OAAO,CAACjF,MAA5B,EAAoC8C,CAAC,EAArC,EAAyC;AACrCmC,aAAO,CAACnC,CAAD,CAAP,GAAa9D,OAAO,CAACmG,QAAR,CAAiBH,OAAjB,EAA0B,IAAIlC,CAA9B,CAAb;AACH;;AACD,WAAOmC,OAAP;AACH,GANa;;AAQNjG,uCAAR,UAAyB2E,MAAzB,EAAyCF,OAAzC,EAAyD;AACrD,WAAO,CAAC,CAACA,OAAO,GAAG,EAAH,GAAQ,GAAhB,IAAuB,KAAKE,MAA7B,IAAuCA,MAA9C;AACH,GAFO;;AAhUO3E,wBAAwB,CACnC,SADmC,EACxB,GADwB,EACnB,GADmB,EACd,GADc,EACT,GADS,EACJ,GADI,EACC,GADD,EACM,GADN,EACW,GADX,EACgB,GADhB,EACqB,GADrB,EAC0B,GAD1B,EAC+B,GAD/B,EACoC,GADpC,EACyC,GADzC,EAC8C,GAD9C,EACmD,GADnD,EACwD,GADxD,EAEnC,GAFmC,EAE9B,GAF8B,EAEzB,GAFyB,EAEpB,GAFoB,EAEf,GAFe,EAEV,GAFU,EAEL,GAFK,EAEA,GAFA,EAEK,GAFL,EAEU,GAFV,EAEe,SAFf,EAE0B,SAF1B,EAEqC,SAFrC,EAEgD,SAFhD,CAAxB;AAKAA,wBAAwB,CACnC,SADmC,EACxB,GADwB,EACnB,GADmB,EACd,GADc,EACT,GADS,EACJ,GADI,EACC,GADD,EACM,GADN,EACW,GADX,EACgB,GADhB,EACqB,GADrB,EAC0B,GAD1B,EAC+B,GAD/B,EACoC,GADpC,EACyC,GADzC,EAC8C,GAD9C,EACmD,GADnD,EACwD,GADxD,EAEnC,GAFmC,EAE9B,GAF8B,EAEzB,GAFyB,EAEpB,GAFoB,EAEf,GAFe,EAEV,GAFU,EAEL,GAFK,EAEA,GAFA,EAEK,GAFL,EAEU,GAFV,EAEe,SAFf,EAE0B,SAF1B,EAEqC,SAFrC,EAEgD,SAFhD,CAAxB;AAKAA,wBAAwB,CACnC;AACA;AACA,WAHmC,EAGxB,GAHwB,EAGnB,KAHmB,EAGZ,KAHY,EAGL,KAHK,EAGE,KAHF,EAGS,KAHT,EAGgB,KAHhB,EAGuB,KAHvB,EAG8B,IAH9B,EAGoC,IAHpC,EAG0C,IAH1C,EAInC,MAJmC,EAI3B,IAJ2B,EAIrB,IAJqB,EAIf,MAJe,EAIP,MAJO,EAIC,MAJD,EAIS,MAJT,EAIiB,MAJjB,EAIyB,GAJzB,EAI8B,IAJ9B,EAIoC,GAJpC,EAIyC,GAJzC,EAKnC,GALmC,EAK9B,GAL8B,EAKzB,GALyB,EAKpB,OALoB,EAKX,SALW,EAKA,SALA,EAKW,SALX,EAKsB,SALtB,CAAxB;AAQAA,wBAAwB,CACnC,EADmC,EAC/B,IAD+B,EACzB,MADyB,EACjB,IADiB,EACX,IADW,EACL,IADK,EACC,GADD,EACM,GADN,EACW,GADX,EACgB,GADhB,EACqB,GADrB,EAC0B,GAD1B,EAC+B,IAD/B,EACqC,GADrC,EAC0C,GAD1C,EAEnC,GAFmC,EAE9B,GAF8B,EAEzB,GAFyB,EAEpB,GAFoB,EAEf,GAFe,EAEV,GAFU,EAEL,GAFK,EAEA,GAFA,EAEK,GAFL,EAEU,GAFV,EAEe,GAFf,EAEoB,GAFpB,EAEyB,GAFzB,EAE8B,GAF9B,EAEmC,GAFnC,EAEwC,GAFxC,EAE6C,SAF7C,CAAxB;AAKAA,wBAAwB,CACnC,SADmC,EACxB,GADwB,EACnB,GADmB,EACd,GADc,EACT,GADS,EACJ,GADI,EACC,GADD,EACM,GADN,EACW,GADX,EACgB,GADhB,EACqB,GADrB,EAC0B,GAD1B,EAC+B,GAD/B,EACoC,GADpC,EACyC,SADzC,EACoD,SADpD,CAAxB;AA4SnB;AArUA;;kBAAqBA","names":["Table","Decoder","detectorResult","ddata","matrix","getBits","rawbits","extractBits","correctedBits","correctBits","rawBytes","convertBoolArrayToByteArray","result","getEncodedData","decoderResult","DecoderResult_1","setNumBits","length","endIndex","latchTable","UPPER","shiftTable","index","BINARY","length_1","readCode","charCount","code","__1","castAsNonUtf8Char","size","DIGIT","str","getCharacter","startsWith","getTable","charAt","t","LOWER","PUNCT","MIXED","table","UPPER_TABLE","LOWER_TABLE","MIXED_TABLE","PUNCT_TABLE","DIGIT_TABLE","IllegalStateException_1","gf","codewordSize","getNbLayers","GenericGF_1","AZTEC_DATA_6","AZTEC_DATA_8","AZTEC_DATA_10","AZTEC_DATA_12","numDataCodewords","getNbDatablocks","numCodewords","FormatException_1","offset","dataWords","Int32Array","i","rsDecoder","ReedSolomonDecoder_1","decode","ex","mask","stuffedBits","dataWord","Array","fill","bit","compact","isCompact","layers","baseMatrixSize","alignmentMap","totalBitsInLayer","matrixSize","Integer_1","truncDivision","origCenter","center","newOffset","rowOffset","rowSize","low","high","j","columnOffset","k","get","startIndex","res","n","boolArr","byteArr","Uint8Array","readByte"],"sources":["../../../../src/core/aztec/decoder/Decoder.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}