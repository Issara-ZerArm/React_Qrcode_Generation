{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2009 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing {*/\n\nrequire(\"./InvertedLuminanceSource\"); // required because of circular dependencies between LuminanceSource and InvertedLuminanceSource\n\n\nvar InvertedLuminanceSource_1 = require(\"./InvertedLuminanceSource\");\n\nvar LuminanceSource_1 = require(\"./LuminanceSource\");\n\nvar System_1 = require(\"./util/System\");\n\nvar IllegalArgumentException_1 = require(\"./IllegalArgumentException\");\n/**\n * This class is used to help decode images from files which arrive as RGB data from\n * an ARGB pixel array. It does not support rotation.\n *\n * @author dswitkin@google.com (Daniel Switkin)\n * @author Betaminos\n */\n\n\nvar RGBLuminanceSource =\n/** @class */\nfunction (_super) {\n  __extends(RGBLuminanceSource, _super);\n\n  function RGBLuminanceSource(luminances, width\n  /*int*/\n  , height\n  /*int*/\n  , dataWidth\n  /*int*/\n  , dataHeight\n  /*int*/\n  , left\n  /*int*/\n  , top\n  /*int*/\n  ) {\n    var _this = _super.call(this, width, height) || this;\n\n    _this.dataWidth = dataWidth;\n    _this.dataHeight = dataHeight;\n    _this.left = left;\n    _this.top = top;\n\n    if (luminances.BYTES_PER_ELEMENT === 4) {\n      // Int32Array\n      var size = width * height;\n      var luminancesUint8Array = new Uint8ClampedArray(size);\n\n      for (var offset = 0; offset < size; offset++) {\n        var pixel = luminances[offset];\n        var r = pixel >> 16 & 0xff; // red\n\n        var g2 = pixel >> 7 & 0x1fe; // 2 * green\n\n        var b = pixel & 0xff; // blue\n        // Calculate green-favouring average cheaply\n\n        luminancesUint8Array[offset] =\n        /*(byte) */\n        (r + g2 + b) / 4 & 0xFF;\n      }\n\n      _this.luminances = luminancesUint8Array;\n    } else {\n      _this.luminances = luminances;\n    }\n\n    if (undefined === dataWidth) {\n      _this.dataWidth = width;\n    }\n\n    if (undefined === dataHeight) {\n      _this.dataHeight = height;\n    }\n\n    if (undefined === left) {\n      _this.left = 0;\n    }\n\n    if (undefined === top) {\n      _this.top = 0;\n    }\n\n    if (_this.left + width > _this.dataWidth || _this.top + height > _this.dataHeight) {\n      throw new IllegalArgumentException_1.default('Crop rectangle does not fit within image data.');\n    }\n\n    return _this;\n  }\n  /*@Override*/\n\n\n  RGBLuminanceSource.prototype.getRow = function (y\n  /*int*/\n  , row) {\n    if (y < 0 || y >= this.getHeight()) {\n      throw new IllegalArgumentException_1.default('Requested row is outside the image: ' + y);\n    }\n\n    var width = this.getWidth();\n\n    if (row === null || row === undefined || row.length < width) {\n      row = new Uint8ClampedArray(width);\n    }\n\n    var offset = (y + this.top) * this.dataWidth + this.left;\n    System_1.default.arraycopy(this.luminances, offset, row, 0, width);\n    return row;\n  };\n  /*@Override*/\n\n\n  RGBLuminanceSource.prototype.getMatrix = function () {\n    var width = this.getWidth();\n    var height = this.getHeight(); // If the caller asks for the entire underlying image, save the copy and give them the\n    // original data. The docs specifically warn that result.length must be ignored.\n\n    if (width === this.dataWidth && height === this.dataHeight) {\n      return this.luminances;\n    }\n\n    var area = width * height;\n    var matrix = new Uint8ClampedArray(area);\n    var inputOffset = this.top * this.dataWidth + this.left; // If the width matches the full width of the underlying data, perform a single copy.\n\n    if (width === this.dataWidth) {\n      System_1.default.arraycopy(this.luminances, inputOffset, matrix, 0, area);\n      return matrix;\n    } // Otherwise copy one cropped row at a time.\n\n\n    for (var y = 0; y < height; y++) {\n      var outputOffset = y * width;\n      System_1.default.arraycopy(this.luminances, inputOffset, matrix, outputOffset, width);\n      inputOffset += this.dataWidth;\n    }\n\n    return matrix;\n  };\n  /*@Override*/\n\n\n  RGBLuminanceSource.prototype.isCropSupported = function () {\n    return true;\n  };\n  /*@Override*/\n\n\n  RGBLuminanceSource.prototype.crop = function (left\n  /*int*/\n  , top\n  /*int*/\n  , width\n  /*int*/\n  , height\n  /*int*/\n  ) {\n    return new RGBLuminanceSource(this.luminances, width, height, this.dataWidth, this.dataHeight, this.left + left, this.top + top);\n  };\n\n  RGBLuminanceSource.prototype.invert = function () {\n    return new InvertedLuminanceSource_1.default(this);\n  };\n\n  return RGBLuminanceSource;\n}(LuminanceSource_1.default);\n\nexports.default = RGBLuminanceSource;","map":{"version":3,"mappings":"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","names":["require","__extends","luminances","width","height","dataWidth","dataHeight","left","top","_super","_this","BYTES_PER_ELEMENT","size","luminancesUint8Array","Uint8ClampedArray","offset","pixel","r","g2","b","undefined","IllegalArgumentException_1","RGBLuminanceSource","y","row","getHeight","getWidth","length","System_1","arraycopy","area","matrix","inputOffset","outputOffset","InvertedLuminanceSource_1","LuminanceSource_1"],"sources":["../../src/core/RGBLuminanceSource.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}