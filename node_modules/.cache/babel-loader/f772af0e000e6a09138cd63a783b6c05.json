{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Java Formatter class polyfill that works in the JS way.\n */\n\nvar Formatter =\n/** @class */\nfunction () {\n  function Formatter() {\n    this.buffer = '';\n  }\n  /**\n   *\n   * @see https://stackoverflow.com/a/13439711/4367683\n   *\n   * @param str\n   * @param arr\n   */\n\n\n  Formatter.form = function (str, arr) {\n    var i = -1;\n\n    function callback(exp, p0, p1, p2, p3, p4) {\n      if (exp === '%%') return '%';\n      if (arr[++i] === undefined) return undefined;\n      exp = p2 ? parseInt(p2.substr(1)) : undefined;\n      var base = p3 ? parseInt(p3.substr(1)) : undefined;\n      var val;\n\n      switch (p4) {\n        case 's':\n          val = arr[i];\n          break;\n\n        case 'c':\n          val = arr[i][0];\n          break;\n\n        case 'f':\n          val = parseFloat(arr[i]).toFixed(exp);\n          break;\n\n        case 'p':\n          val = parseFloat(arr[i]).toPrecision(exp);\n          break;\n\n        case 'e':\n          val = parseFloat(arr[i]).toExponential(exp);\n          break;\n\n        case 'x':\n          val = parseInt(arr[i]).toString(base ? base : 16);\n          break;\n\n        case 'd':\n          val = parseFloat(parseInt(arr[i], base ? base : 10).toPrecision(exp)).toFixed(0);\n          break;\n      }\n\n      val = typeof val === 'object' ? JSON.stringify(val) : (+val).toString(base);\n      var size = parseInt(p1);\n      /* padding size */\n\n      var ch = p1 && p1[0] + '' === '0' ? '0' : ' ';\n      /* isnull? */\n\n      while (val.length < size) val = p0 !== undefined ? val + ch : ch + val;\n      /* isminus? */\n\n\n      return val;\n    }\n\n    var regex = /%(-)?(0?[0-9]+)?([.][0-9]+)?([#][0-9]+)?([scfpexd%])/g;\n    return str.replace(regex, callback);\n  };\n  /**\n   *\n   * @param append The new string to append.\n   * @param args Argumets values to be formated.\n   */\n\n\n  Formatter.prototype.format = function (append) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    this.buffer += Formatter.form(append, args);\n  };\n  /**\n   * Returns the Formatter string value.\n   */\n\n\n  Formatter.prototype.toString = function () {\n    return this.buffer;\n  };\n\n  return Formatter;\n}();\n\nexports.default = Formatter;","map":{"version":3,"mappings":"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","names":["buffer","Formatter","str","arr","i","callback","exp","p0","p1","p2","p3","p4","undefined","parseInt","substr","base","val","parseFloat","toFixed","toPrecision","toExponential","toString","JSON","stringify","size","ch","length","regex","replace","append","args","form"],"sources":["../../../src/core/util/Formatter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}