{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar BitMatrix_1 = require(\"../../common/BitMatrix\");\n\nvar GenericGF_1 = require(\"../../common/reedsolomon/GenericGF\");\n\nvar ReedSolomonDecoder_1 = require(\"../../common/reedsolomon/ReedSolomonDecoder\");\n\nvar BitMatrixParser_1 = require(\"./BitMatrixParser\");\n\nvar QRCodeDecoderMetaData_1 = require(\"./QRCodeDecoderMetaData\");\n\nvar DataBlock_1 = require(\"./DataBlock\");\n\nvar DecodedBitStreamParser_1 = require(\"./DecodedBitStreamParser\");\n\nvar ChecksumException_1 = require(\"../../ChecksumException\");\n/*import java.util.Map;*/\n\n/**\n * <p>The main class which implements QR Code decoding -- as opposed to locating and extracting\n * the QR Code from an image.</p>\n *\n * @author Sean Owen\n */\n\n\nvar Decoder =\n/** @class */\nfunction () {\n  function Decoder() {\n    this.rsDecoder = new ReedSolomonDecoder_1.default(GenericGF_1.default.QR_CODE_FIELD_256);\n  } // public decode(image: boolean[][]): DecoderResult /*throws ChecksumException, FormatException*/ {\n  //   return decode(image, null)\n  // }\n\n  /**\n   * <p>Convenience method that can decode a QR Code represented as a 2D array of booleans.\n   * \"true\" is taken to mean a black module.</p>\n   *\n   * @param image booleans representing white/black QR Code modules\n   * @param hints decoding hints that should be used to influence decoding\n   * @return text and bytes encoded within the QR Code\n   * @throws FormatException if the QR Code cannot be decoded\n   * @throws ChecksumException if error correction fails\n   */\n\n\n  Decoder.prototype.decodeBooleanArray = function (image, hints) {\n    return this.decodeBitMatrix(BitMatrix_1.default.parseFromBooleanArray(image), hints);\n  }; // public decodeBitMatrix(bits: BitMatrix): DecoderResult /*throws ChecksumException, FormatException*/ {\n  //   return decode(bits, null)\n  // }\n\n  /**\n   * <p>Decodes a QR Code represented as a {@link BitMatrix}. A 1 or \"true\" is taken to mean a black module.</p>\n   *\n   * @param bits booleans representing white/black QR Code modules\n   * @param hints decoding hints that should be used to influence decoding\n   * @return text and bytes encoded within the QR Code\n   * @throws FormatException if the QR Code cannot be decoded\n   * @throws ChecksumException if error correction fails\n   */\n\n\n  Decoder.prototype.decodeBitMatrix = function (bits, hints) {\n    // Construct a parser and read version, error-correction level\n    var parser = new BitMatrixParser_1.default(bits);\n    var ex = null;\n\n    try {\n      return this.decodeBitMatrixParser(parser, hints);\n    } catch (e\n    /*: FormatException, ChecksumException*/\n    ) {\n      ex = e;\n    }\n\n    try {\n      // Revert the bit matrix\n      parser.remask(); // Will be attempting a mirrored reading of the version and format info.\n\n      parser.setMirror(true); // Preemptively read the version.\n\n      parser.readVersion(); // Preemptively read the format information.\n\n      parser.readFormatInformation();\n      /*\n       * Since we're here, this means we have successfully detected some kind\n       * of version and format information when mirrored. This is a good sign,\n       * that the QR code may be mirrored, and we should try once more with a\n       * mirrored content.\n       */\n      // Prepare for a mirrored reading.\n\n      parser.mirror();\n      var result = this.decodeBitMatrixParser(parser, hints); // Success! Notify the caller that the code was mirrored.\n\n      result.setOther(new QRCodeDecoderMetaData_1.default(true));\n      return result;\n    } catch (e\n    /*FormatException | ChecksumException*/\n    ) {\n      // Throw the exception from the original reading\n      if (ex !== null) {\n        throw ex;\n      }\n\n      throw e;\n    }\n  };\n\n  Decoder.prototype.decodeBitMatrixParser = function (parser, hints) {\n    var e_1, _a, e_2, _b;\n\n    var version = parser.readVersion();\n    var ecLevel = parser.readFormatInformation().getErrorCorrectionLevel(); // Read codewords\n\n    var codewords = parser.readCodewords(); // Separate into data blocks\n\n    var dataBlocks = DataBlock_1.default.getDataBlocks(codewords, version, ecLevel); // Count total number of data bytes\n\n    var totalBytes = 0;\n\n    try {\n      for (var dataBlocks_1 = __values(dataBlocks), dataBlocks_1_1 = dataBlocks_1.next(); !dataBlocks_1_1.done; dataBlocks_1_1 = dataBlocks_1.next()) {\n        var dataBlock = dataBlocks_1_1.value;\n        totalBytes += dataBlock.getNumDataCodewords();\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (dataBlocks_1_1 && !dataBlocks_1_1.done && (_a = dataBlocks_1.return)) _a.call(dataBlocks_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    var resultBytes = new Uint8Array(totalBytes);\n    var resultOffset = 0;\n\n    try {\n      // Error-correct and copy data blocks together into a stream of bytes\n      for (var dataBlocks_2 = __values(dataBlocks), dataBlocks_2_1 = dataBlocks_2.next(); !dataBlocks_2_1.done; dataBlocks_2_1 = dataBlocks_2.next()) {\n        var dataBlock = dataBlocks_2_1.value;\n        var codewordBytes = dataBlock.getCodewords();\n        var numDataCodewords = dataBlock.getNumDataCodewords();\n        this.correctErrors(codewordBytes, numDataCodewords);\n\n        for (var i = 0; i < numDataCodewords; i++) {\n          resultBytes[resultOffset++] = codewordBytes[i];\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (dataBlocks_2_1 && !dataBlocks_2_1.done && (_b = dataBlocks_2.return)) _b.call(dataBlocks_2);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    } // Decode the contents of that stream of bytes\n\n\n    return DecodedBitStreamParser_1.default.decode(resultBytes, version, ecLevel, hints);\n  };\n  /**\n   * <p>Given data and error-correction codewords received, possibly corrupted by errors, attempts to\n   * correct the errors in-place using Reed-Solomon error correction.</p>\n   *\n   * @param codewordBytes data and error correction codewords\n   * @param numDataCodewords number of codewords that are data bytes\n   * @throws ChecksumException if error correction fails\n   */\n\n\n  Decoder.prototype.correctErrors = function (codewordBytes, numDataCodewords\n  /*int*/\n  ) {\n    var numCodewords = codewordBytes.length; // First read into an array of ints\n\n    var codewordsInts = new Int32Array(codewordBytes); // TYPESCRIPTPORT: not realy necessary to transform to ints? could redesign everything to work with unsigned bytes?\n    // const codewordsInts = new Int32Array(numCodewords)\n    // for (let i = 0; i < numCodewords; i++) {\n    //   codewordsInts[i] = codewordBytes[i] & 0xFF\n    // }\n\n    try {\n      this.rsDecoder.decode(codewordsInts, codewordBytes.length - numDataCodewords);\n    } catch (ignored\n    /*: ReedSolomonException*/\n    ) {\n      throw new ChecksumException_1.default();\n    } // Copy back into array of bytes -- only need to worry about the bytes that were data\n    // We don't care about errors in the error-correction codewords\n\n\n    for (var i = 0; i < numDataCodewords; i++) {\n      codewordBytes[i] =\n      /*(byte) */\n      codewordsInts[i];\n    }\n  };\n\n  return Decoder;\n}();\n\nexports.default = Decoder;","map":{"version":3,"mappings":"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","names":["rsDecoder","ReedSolomonDecoder_1","GenericGF_1","QR_CODE_FIELD_256","Decoder","image","hints","decodeBitMatrix","BitMatrix_1","parseFromBooleanArray","bits","parser","BitMatrixParser_1","ex","decodeBitMatrixParser","e","remask","setMirror","readVersion","readFormatInformation","mirror","result","setOther","QRCodeDecoderMetaData_1","version","ecLevel","getErrorCorrectionLevel","codewords","readCodewords","dataBlocks","DataBlock_1","getDataBlocks","totalBytes","dataBlocks_1_1","dataBlock","getNumDataCodewords","resultBytes","Uint8Array","resultOffset","dataBlocks_2_1","codewordBytes","getCodewords","numDataCodewords","correctErrors","i","DecodedBitStreamParser_1","decode","numCodewords","length","codewordsInts","Int32Array","ignored","ChecksumException_1"],"sources":["../../../../src/core/qrcode/decoder/Decoder.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}