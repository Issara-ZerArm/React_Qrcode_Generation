{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2013 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // import com.google.zxing.pdf417.PDF417Common;\n\nvar PDF417Common_1 = require(\"../PDF417Common\");\n\nvar BarcodeMetadata_1 = require(\"./BarcodeMetadata\");\n\nvar DetectionResultColumn_1 = require(\"./DetectionResultColumn\");\n\nvar BarcodeValue_1 = require(\"./BarcodeValue\");\n/**\n * @author Guenther Grau\n */\n\n\nvar DetectionResultRowIndicatorColumn =\n/** @class */\nfunction (_super) {\n  __extends(DetectionResultRowIndicatorColumn, _super);\n\n  function DetectionResultRowIndicatorColumn(boundingBox, isLeft) {\n    var _this = _super.call(this, boundingBox) || this;\n\n    _this._isLeft = isLeft;\n    return _this;\n  }\n\n  DetectionResultRowIndicatorColumn.prototype.setRowNumbers = function () {\n    var e_1, _a;\n\n    try {\n      for (var _b = __values(this.getCodewords()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var codeword = _c.value\n        /*Codeword*/\n        ;\n\n        if (codeword != null) {\n          codeword.setRowNumberAsRowIndicatorColumn();\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  }; // TODO implement properly\n  // TODO maybe we should add missing codewords to store the correct row number to make\n  // finding row numbers for other columns easier\n  // use row height count to make detection of invalid row numbers more reliable\n\n\n  DetectionResultRowIndicatorColumn.prototype.adjustCompleteIndicatorColumnRowNumbers = function (barcodeMetadata) {\n    var codewords = this.getCodewords();\n    this.setRowNumbers();\n    this.removeIncorrectCodewords(codewords, barcodeMetadata);\n    var boundingBox = this.getBoundingBox();\n    var top = this._isLeft ? boundingBox.getTopLeft() : boundingBox.getTopRight();\n    var bottom = this._isLeft ? boundingBox.getBottomLeft() : boundingBox.getBottomRight();\n    var firstRow = this.imageRowToCodewordIndex(Math.trunc(top.getY()));\n    var lastRow = this.imageRowToCodewordIndex(Math.trunc(bottom.getY())); // We need to be careful using the average row height. Barcode could be skewed so that we have smaller and\n    // taller rows\n    // float averageRowHeight = (lastRow - firstRow) / /*(float)*/ barcodeMetadata.getRowCount();\n\n    var barcodeRow = -1;\n    var maxRowHeight = 1;\n    var currentRowHeight = 0;\n\n    for (var codewordsRow\n    /*int*/\n    = firstRow; codewordsRow < lastRow; codewordsRow++) {\n      if (codewords[codewordsRow] == null) {\n        continue;\n      }\n\n      var codeword = codewords[codewordsRow]; //      float expectedRowNumber = (codewordsRow - firstRow) / averageRowHeight;\n      //      if (Math.abs(codeword.getRowNumber() - expectedRowNumber) > 2) {\n      //        SimpleLog.log(LEVEL.WARNING,\n      //            \"Removing codeword, rowNumberSkew too high, codeword[\" + codewordsRow + \"]: Expected Row: \" +\n      //                expectedRowNumber + \", RealRow: \" + codeword.getRowNumber() + \", value: \" + codeword.getValue());\n      //        codewords[codewordsRow] = null;\n      //      }\n\n      var rowDifference = codeword.getRowNumber() - barcodeRow; // TODO improve handling with case where first row indicator doesn't start with 0\n\n      if (rowDifference === 0) {\n        currentRowHeight++;\n      } else if (rowDifference === 1) {\n        maxRowHeight = Math.max(maxRowHeight, currentRowHeight);\n        currentRowHeight = 1;\n        barcodeRow = codeword.getRowNumber();\n      } else if (rowDifference < 0 || codeword.getRowNumber() >= barcodeMetadata.getRowCount() || rowDifference > codewordsRow) {\n        codewords[codewordsRow] = null;\n      } else {\n        var checkedRows = void 0;\n\n        if (maxRowHeight > 2) {\n          checkedRows = (maxRowHeight - 2) * rowDifference;\n        } else {\n          checkedRows = rowDifference;\n        }\n\n        var closePreviousCodewordFound = checkedRows >= codewordsRow;\n\n        for (var i\n        /*int*/\n        = 1; i <= checkedRows && !closePreviousCodewordFound; i++) {\n          // there must be (height * rowDifference) number of codewords missing. For now we assume height = 1.\n          // This should hopefully get rid of most problems already.\n          closePreviousCodewordFound = codewords[codewordsRow - i] != null;\n        }\n\n        if (closePreviousCodewordFound) {\n          codewords[codewordsRow] = null;\n        } else {\n          barcodeRow = codeword.getRowNumber();\n          currentRowHeight = 1;\n        }\n      }\n    } // return (int) (averageRowHeight + 0.5);\n\n  };\n\n  DetectionResultRowIndicatorColumn.prototype.getRowHeights = function () {\n    var e_2, _a;\n\n    var barcodeMetadata = this.getBarcodeMetadata();\n\n    if (barcodeMetadata == null) {\n      return null;\n    }\n\n    this.adjustIncompleteIndicatorColumnRowNumbers(barcodeMetadata);\n    var result = new Int32Array(barcodeMetadata.getRowCount());\n\n    try {\n      for (var _b = __values(this.getCodewords()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var codeword = _c.value\n        /*Codeword*/\n        ;\n\n        if (codeword != null) {\n          var rowNumber = codeword.getRowNumber();\n\n          if (rowNumber >= result.length) {\n            // We have more rows than the barcode metadata allows for, ignore them.\n            continue;\n          }\n\n          result[rowNumber]++;\n        } // else throw exception?\n\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    return result;\n  }; // TODO maybe we should add missing codewords to store the correct row number to make\n  // finding row numbers for other columns easier\n  // use row height count to make detection of invalid row numbers more reliable\n\n\n  DetectionResultRowIndicatorColumn.prototype.adjustIncompleteIndicatorColumnRowNumbers = function (barcodeMetadata) {\n    var boundingBox = this.getBoundingBox();\n    var top = this._isLeft ? boundingBox.getTopLeft() : boundingBox.getTopRight();\n    var bottom = this._isLeft ? boundingBox.getBottomLeft() : boundingBox.getBottomRight();\n    var firstRow = this.imageRowToCodewordIndex(Math.trunc(top.getY()));\n    var lastRow = this.imageRowToCodewordIndex(Math.trunc(bottom.getY())); // float averageRowHeight = (lastRow - firstRow) / /*(float)*/ barcodeMetadata.getRowCount();\n\n    var codewords = this.getCodewords();\n    var barcodeRow = -1;\n    var maxRowHeight = 1;\n    var currentRowHeight = 0;\n\n    for (var codewordsRow\n    /*int*/\n    = firstRow; codewordsRow < lastRow; codewordsRow++) {\n      if (codewords[codewordsRow] == null) {\n        continue;\n      }\n\n      var codeword = codewords[codewordsRow];\n      codeword.setRowNumberAsRowIndicatorColumn();\n      var rowDifference = codeword.getRowNumber() - barcodeRow; // TODO improve handling with case where first row indicator doesn't start with 0\n\n      if (rowDifference === 0) {\n        currentRowHeight++;\n      } else if (rowDifference === 1) {\n        maxRowHeight = Math.max(maxRowHeight, currentRowHeight);\n        currentRowHeight = 1;\n        barcodeRow = codeword.getRowNumber();\n      } else if (codeword.getRowNumber() >= barcodeMetadata.getRowCount()) {\n        codewords[codewordsRow] = null;\n      } else {\n        barcodeRow = codeword.getRowNumber();\n        currentRowHeight = 1;\n      }\n    } // return (int) (averageRowHeight + 0.5);\n\n  };\n\n  DetectionResultRowIndicatorColumn.prototype.getBarcodeMetadata = function () {\n    var e_3, _a;\n\n    var codewords = this.getCodewords();\n    var barcodeColumnCount = new BarcodeValue_1.default();\n    var barcodeRowCountUpperPart = new BarcodeValue_1.default();\n    var barcodeRowCountLowerPart = new BarcodeValue_1.default();\n    var barcodeECLevel = new BarcodeValue_1.default();\n\n    try {\n      for (var codewords_1 = __values(codewords), codewords_1_1 = codewords_1.next(); !codewords_1_1.done; codewords_1_1 = codewords_1.next()) {\n        var codeword = codewords_1_1.value\n        /*Codeword*/\n        ;\n\n        if (codeword == null) {\n          continue;\n        }\n\n        codeword.setRowNumberAsRowIndicatorColumn();\n        var rowIndicatorValue = codeword.getValue() % 30;\n        var codewordRowNumber = codeword.getRowNumber();\n\n        if (!this._isLeft) {\n          codewordRowNumber += 2;\n        }\n\n        switch (codewordRowNumber % 3) {\n          case 0:\n            barcodeRowCountUpperPart.setValue(rowIndicatorValue * 3 + 1);\n            break;\n\n          case 1:\n            barcodeECLevel.setValue(rowIndicatorValue / 3);\n            barcodeRowCountLowerPart.setValue(rowIndicatorValue % 3);\n            break;\n\n          case 2:\n            barcodeColumnCount.setValue(rowIndicatorValue + 1);\n            break;\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (codewords_1_1 && !codewords_1_1.done && (_a = codewords_1.return)) _a.call(codewords_1);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    } // Maybe we should check if we have ambiguous values?\n\n\n    if (barcodeColumnCount.getValue().length === 0 || barcodeRowCountUpperPart.getValue().length === 0 || barcodeRowCountLowerPart.getValue().length === 0 || barcodeECLevel.getValue().length === 0 || barcodeColumnCount.getValue()[0] < 1 || barcodeRowCountUpperPart.getValue()[0] + barcodeRowCountLowerPart.getValue()[0] < PDF417Common_1.default.MIN_ROWS_IN_BARCODE || barcodeRowCountUpperPart.getValue()[0] + barcodeRowCountLowerPart.getValue()[0] > PDF417Common_1.default.MAX_ROWS_IN_BARCODE) {\n      return null;\n    }\n\n    var barcodeMetadata = new BarcodeMetadata_1.default(barcodeColumnCount.getValue()[0], barcodeRowCountUpperPart.getValue()[0], barcodeRowCountLowerPart.getValue()[0], barcodeECLevel.getValue()[0]);\n    this.removeIncorrectCodewords(codewords, barcodeMetadata);\n    return barcodeMetadata;\n  };\n\n  DetectionResultRowIndicatorColumn.prototype.removeIncorrectCodewords = function (codewords, barcodeMetadata) {\n    // Remove codewords which do not match the metadata\n    // TODO Maybe we should keep the incorrect codewords for the start and end positions?\n    for (var codewordRow\n    /*int*/\n    = 0; codewordRow < codewords.length; codewordRow++) {\n      var codeword = codewords[codewordRow];\n\n      if (codewords[codewordRow] == null) {\n        continue;\n      }\n\n      var rowIndicatorValue = codeword.getValue() % 30;\n      var codewordRowNumber = codeword.getRowNumber();\n\n      if (codewordRowNumber > barcodeMetadata.getRowCount()) {\n        codewords[codewordRow] = null;\n        continue;\n      }\n\n      if (!this._isLeft) {\n        codewordRowNumber += 2;\n      }\n\n      switch (codewordRowNumber % 3) {\n        case 0:\n          if (rowIndicatorValue * 3 + 1 !== barcodeMetadata.getRowCountUpperPart()) {\n            codewords[codewordRow] = null;\n          }\n\n          break;\n\n        case 1:\n          if (Math.trunc(rowIndicatorValue / 3) !== barcodeMetadata.getErrorCorrectionLevel() || rowIndicatorValue % 3 !== barcodeMetadata.getRowCountLowerPart()) {\n            codewords[codewordRow] = null;\n          }\n\n          break;\n\n        case 2:\n          if (rowIndicatorValue + 1 !== barcodeMetadata.getColumnCount()) {\n            codewords[codewordRow] = null;\n          }\n\n          break;\n      }\n    }\n  };\n\n  DetectionResultRowIndicatorColumn.prototype.isLeft = function () {\n    return this._isLeft;\n  }; // @Override\n\n\n  DetectionResultRowIndicatorColumn.prototype.toString = function () {\n    return 'IsLeft: ' + this._isLeft + '\\n' + _super.prototype.toString.call(this);\n  };\n\n  return DetectionResultRowIndicatorColumn;\n}(DetectionResultColumn_1.default);\n\nexports.default = DetectionResultRowIndicatorColumn;","map":{"version":3,"mappings":"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","names":["__extends","boundingBox","isLeft","_super","_this","_isLeft","DetectionResultRowIndicatorColumn","getCodewords","_c","codeword","setRowNumberAsRowIndicatorColumn","barcodeMetadata","codewords","setRowNumbers","removeIncorrectCodewords","getBoundingBox","top","getTopLeft","getTopRight","bottom","getBottomLeft","getBottomRight","firstRow","imageRowToCodewordIndex","Math","trunc","getY","lastRow","barcodeRow","maxRowHeight","currentRowHeight","codewordsRow","rowDifference","getRowNumber","max","getRowCount","checkedRows","closePreviousCodewordFound","i","getBarcodeMetadata","adjustIncompleteIndicatorColumnRowNumbers","result","Int32Array","rowNumber","length","barcodeColumnCount","BarcodeValue_1","barcodeRowCountUpperPart","barcodeRowCountLowerPart","barcodeECLevel","codewords_1_1","rowIndicatorValue","getValue","codewordRowNumber","setValue","PDF417Common_1","MIN_ROWS_IN_BARCODE","MAX_ROWS_IN_BARCODE","BarcodeMetadata_1","codewordRow","getRowCountUpperPart","getErrorCorrectionLevel","getRowCountLowerPart","getColumnCount","toString","call","DetectionResultColumn_1"],"sources":["../../../../src/core/pdf417/decoder/DetectionResultRowIndicatorColumn.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}