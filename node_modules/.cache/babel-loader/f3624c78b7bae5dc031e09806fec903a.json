{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2013 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // package com.google.zxing.pdf417.decoder;\n// import com.google.zxing.pdf417.PDF417Common;\n\nvar PDF417Common_1 = require(\"../PDF417Common\"); // import java.util.ArrayList;\n// import java.util.Collection;\n// import java.util.HashMap;\n// import java.util.Map;\n// import java.util.Map.Entry;\n\n/**\n * @author Guenther Grau\n */\n\n\nvar BarcodeValue =\n/** @class */\nfunction () {\n  function BarcodeValue() {\n    this.values = new Map();\n  }\n  /**\n   * Add an occurrence of a value\n   */\n\n\n  BarcodeValue.prototype.setValue = function (value) {\n    value = Math.trunc(value);\n    var confidence = this.values.get(value);\n\n    if (confidence == null) {\n      confidence = 0;\n    }\n\n    confidence++;\n    this.values.set(value, confidence);\n  };\n  /**\n   * Determines the maximum occurrence of a set value and returns all values which were set with this occurrence.\n   * @return an array of int, containing the values with the highest occurrence, or null, if no value was set\n   */\n\n\n  BarcodeValue.prototype.getValue = function () {\n    var e_1, _a;\n\n    var maxConfidence = -1;\n    var result = new Array();\n\n    var _loop_1 = function _loop_1(key, value) {\n      var entry = {\n        getKey: function getKey() {\n          return key;\n        },\n        getValue: function getValue() {\n          return value;\n        }\n      };\n\n      if (entry.getValue() > maxConfidence) {\n        maxConfidence = entry.getValue();\n        result = [];\n        result.push(entry.getKey());\n      } else if (entry.getValue() === maxConfidence) {\n        result.push(entry.getKey());\n      }\n    };\n\n    try {\n      for (var _b = __values(this.values.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var _d = __read(_c.value, 2),\n            key = _d[0],\n            value = _d[1];\n\n        _loop_1(key, value);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return PDF417Common_1.default.toIntArray(result);\n  };\n\n  BarcodeValue.prototype.getConfidence = function (value) {\n    return this.values.get(value);\n  };\n\n  return BarcodeValue;\n}();\n\nexports.default = BarcodeValue;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAgBA;AAEA;;AACA,gD,CAIA;AACA;AACA;AACA;AACA;;AAEA;;;;;AAGA;AAAA;AAAA;AAAA;AACoB,kBAAS,IAAIA,GAAJ,EAAT;AA4CnB;AA1CC;;;;;AAGCC,8CAASC,KAAT,EAAmB;AAClBA,SAAK,GAAGC,IAAI,CAACC,KAAL,CAAWF,KAAX,CAAR;AACA,QAAIG,UAAU,GAAQ,KAAKC,MAAL,CAAYC,GAAZ,CAAgBL,KAAhB,CAAtB;;AACA,QAAIG,UAAU,IAAI,IAAlB,EAAwB;AACtBA,gBAAU,GAAG,CAAb;AACD;;AACDA,cAAU;AACV,SAAKC,MAAL,CAAYE,GAAZ,CAAgBN,KAAhB,EAAuBG,UAAvB;AACD,GARA;AAUD;;;;;;AAICJ;;;AACC,QAAIQ,aAAa,GAAQ,CAAC,CAA1B;AACA,QAAIC,MAAM,GAAoB,IAAIC,KAAJ,EAA9B;;mCACYC,KAAKV,OAAK;AAEpB,UAAMW,KAAK,GAAG;AACZC,cAAM,EAAE;AAAM;AAAG,SADL;AAEZC,gBAAQ,EAAE;AAAM;AAAK;AAFT,OAAd;;AAKA,UAAIF,KAAK,CAACE,QAAN,KAAmBN,aAAvB,EAAsC;AACpCA,qBAAa,GAAGI,KAAK,CAACE,QAAN,EAAhB;AACAL,cAAM,GAAG,EAAT;AACAA,cAAM,CAACM,IAAP,CAAYH,KAAK,CAACC,MAAN,EAAZ;AACD,OAJD,MAIO,IAAID,KAAK,CAACE,QAAN,OAAqBN,aAAzB,EAAwC;AAC7CC,cAAM,CAACM,IAAP,CAAYH,KAAK,CAACC,MAAN,EAAZ;AACD;;;;AAbH,WAA2B,uBAAKR,MAAL,CAAYW,OAAZ,KAAqBC,cAAhD,EAAgD,QAAhD,EAAgDA,cAAhD,EAAgD;AAArC;AAAA,YAACN,WAAD;AAAA,YAAMV,aAAN;;gBAACU,KAAKV;AAchB;;;;;;;;;;;;;AACD,WAAOiB,uBAAaC,UAAb,CAAwBV,MAAxB,CAAP;AACD,GAnBA;;AAqBAT,mDAAcC,KAAd,EAAwB;AACvB,WAAO,KAAKI,MAAL,CAAYC,GAAZ,CAAgBL,KAAhB,CAAP;AACD,GAFA;;AAIH;AAAC,CA7CD","names":["Map","BarcodeValue","value","Math","trunc","confidence","values","get","set","maxConfidence","result","Array","key","entry","getKey","getValue","push","entries","_c","PDF417Common_1","toIntArray"],"sources":["../../../../src/core/pdf417/decoder/BarcodeValue.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}