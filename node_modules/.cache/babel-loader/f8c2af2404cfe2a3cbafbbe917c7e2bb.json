{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.qrcode.encoder {*/\n\nvar BitArray_1 = require(\"../../common/BitArray\");\n\nvar Integer_1 = require(\"../../util/Integer\");\n\nvar QRCode_1 = require(\"./QRCode\");\n\nvar MaskUtil_1 = require(\"./MaskUtil\");\n\nvar WriterException_1 = require(\"../../WriterException\");\n\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n/**\n * @author satorux@google.com (Satoru Takabayashi) - creator\n * @author dswitkin@google.com (Daniel Switkin) - ported from C++\n */\n\n\nvar MatrixUtil =\n/** @class */\nfunction () {\n  function MatrixUtil() {// do nothing\n  } // Set all cells to -1 (TYPESCRIPTPORT: 255).  -1 (TYPESCRIPTPORT: 255) means that the cell is empty (not set yet).\n  //\n  // JAVAPORT: We shouldn't need to do this at all. The code should be rewritten to begin encoding\n  // with the ByteMatrix initialized all to zero.\n\n\n  MatrixUtil.clearMatrix = function (matrix) {\n    // TYPESCRIPTPORT: we use UintArray se changed here from -1 to 255\n    matrix.clear(\n    /*(byte) */\n\n    /*-1*/\n    255);\n  }; // Build 2D matrix of QR Code from \"dataBits\" with \"ecLevel\", \"version\" and \"getMaskPattern\". On\n  // success, store the result in \"matrix\" and return true.\n\n\n  MatrixUtil.buildMatrix = function (dataBits, ecLevel, version, maskPattern\n  /*int*/\n  , matrix) {\n    MatrixUtil.clearMatrix(matrix);\n    MatrixUtil.embedBasicPatterns(version, matrix); // Type information appear with any version.\n\n    MatrixUtil.embedTypeInfo(ecLevel, maskPattern, matrix); // Version info appear if version >= 7.\n\n    MatrixUtil.maybeEmbedVersionInfo(version, matrix); // Data should be embedded at end.\n\n    MatrixUtil.embedDataBits(dataBits, maskPattern, matrix);\n  }; // Embed basic patterns. On success, modify the matrix and return true.\n  // The basic patterns are:\n  // - Position detection patterns\n  // - Timing patterns\n  // - Dark dot at the left bottom corner\n  // - Position adjustment patterns, if need be\n\n\n  MatrixUtil.embedBasicPatterns = function (version, matrix) {\n    // Let's get started with embedding big squares at corners.\n    MatrixUtil.embedPositionDetectionPatternsAndSeparators(matrix); // Then, embed the dark dot at the left bottom corner.\n\n    MatrixUtil.embedDarkDotAtLeftBottomCorner(matrix); // Position adjustment patterns appear if version >= 2.\n\n    MatrixUtil.maybeEmbedPositionAdjustmentPatterns(version, matrix); // Timing patterns should be embedded after position adj. patterns.\n\n    MatrixUtil.embedTimingPatterns(matrix);\n  }; // Embed type information. On success, modify the matrix.\n\n\n  MatrixUtil.embedTypeInfo = function (ecLevel, maskPattern\n  /*int*/\n  , matrix) {\n    var typeInfoBits = new BitArray_1.default();\n    MatrixUtil.makeTypeInfoBits(ecLevel, maskPattern, typeInfoBits);\n\n    for (var i = 0, size = typeInfoBits.getSize(); i < size; ++i) {\n      // Place bits in LSB to MSB order.  LSB (least significant bit) is the last value in\n      // \"typeInfoBits\".\n      var bit = typeInfoBits.get(typeInfoBits.getSize() - 1 - i); // Type info bits at the left top corner. See 8.9 of JISX0510:2004 (p.46).\n\n      var coordinates = MatrixUtil.TYPE_INFO_COORDINATES[i];\n      var x1 = coordinates[0];\n      var y1 = coordinates[1];\n      matrix.setBoolean(x1, y1, bit);\n\n      if (i < 8) {\n        // Right top corner.\n        var x2 = matrix.getWidth() - i - 1;\n        var y2 = 8;\n        matrix.setBoolean(x2, y2, bit);\n      } else {\n        // Left bottom corner.\n        var x2 = 8;\n        var y2 = matrix.getHeight() - 7 + (i - 8);\n        matrix.setBoolean(x2, y2, bit);\n      }\n    }\n  }; // Embed version information if need be. On success, modify the matrix and return true.\n  // See 8.10 of JISX0510:2004 (p.47) for how to embed version information.\n\n\n  MatrixUtil.maybeEmbedVersionInfo = function (version, matrix) {\n    if (version.getVersionNumber() < 7) {\n      // Version info is necessary if version >= 7.\n      return; // Don't need version info.\n    }\n\n    var versionInfoBits = new BitArray_1.default();\n    MatrixUtil.makeVersionInfoBits(version, versionInfoBits);\n    var bitIndex = 6 * 3 - 1; // It will decrease from 17 to 0.\n\n    for (var i = 0; i < 6; ++i) {\n      for (var j = 0; j < 3; ++j) {\n        // Place bits in LSB (least significant bit) to MSB order.\n        var bit = versionInfoBits.get(bitIndex);\n        bitIndex--; // Left bottom corner.\n\n        matrix.setBoolean(i, matrix.getHeight() - 11 + j, bit); // Right bottom corner.\n\n        matrix.setBoolean(matrix.getHeight() - 11 + j, i, bit);\n      }\n    }\n  }; // Embed \"dataBits\" using \"getMaskPattern\". On success, modify the matrix and return true.\n  // For debugging purposes, it skips masking process if \"getMaskPattern\" is -1(TYPESCRIPTPORT: 255).\n  // See 8.7 of JISX0510:2004 (p.38) for how to embed data bits.\n\n\n  MatrixUtil.embedDataBits = function (dataBits, maskPattern\n  /*int*/\n  , matrix) {\n    var bitIndex = 0;\n    var direction = -1; // Start from the right bottom cell.\n\n    var x = matrix.getWidth() - 1;\n    var y = matrix.getHeight() - 1;\n\n    while (x > 0) {\n      // Skip the vertical timing pattern.\n      if (x === 6) {\n        x -= 1;\n      }\n\n      while (y >= 0 && y < matrix.getHeight()) {\n        for (var i = 0; i < 2; ++i) {\n          var xx = x - i; // Skip the cell if it's not empty.\n\n          if (!MatrixUtil.isEmpty(matrix.get(xx, y))) {\n            continue;\n          }\n\n          var bit = void 0;\n\n          if (bitIndex < dataBits.getSize()) {\n            bit = dataBits.get(bitIndex);\n            ++bitIndex;\n          } else {\n            // Padding bit. If there is no bit left, we'll fill the left cells with 0, as described\n            // in 8.4.9 of JISX0510:2004 (p. 24).\n            bit = false;\n          } // Skip masking if mask_pattern is -1 (TYPESCRIPTPORT: 255).\n\n\n          if (maskPattern !== 255 && MaskUtil_1.default.getDataMaskBit(maskPattern, xx, y)) {\n            bit = !bit;\n          }\n\n          matrix.setBoolean(xx, y, bit);\n        }\n\n        y += direction;\n      }\n\n      direction = -direction; // Reverse the direction.\n\n      y += direction;\n      x -= 2; // Move to the left.\n    } // All bits should be consumed.\n\n\n    if (bitIndex !== dataBits.getSize()) {\n      throw new WriterException_1.default('Not all bits consumed: ' + bitIndex + '/' + dataBits.getSize());\n    }\n  }; // Return the position of the most significant bit set (one: to) in the \"value\". The most\n  // significant bit is position 32. If there is no bit set, return 0. Examples:\n  // - findMSBSet(0) => 0\n  // - findMSBSet(1) => 1\n  // - findMSBSet(255) => 8\n\n\n  MatrixUtil.findMSBSet = function (value\n  /*int*/\n  ) {\n    return 32 - Integer_1.default.numberOfLeadingZeros(value);\n  }; // Calculate BCH (Bose-Chaudhuri-Hocquenghem) code for \"value\" using polynomial \"poly\". The BCH\n  // code is used for encoding type information and version information.\n  // Example: Calculation of version information of 7.\n  // f(x) is created from 7.\n  //   - 7 = 000111 in 6 bits\n  //   - f(x) = x^2 + x^1 + x^0\n  // g(x) is given by the standard (p. 67)\n  //   - g(x) = x^12 + x^11 + x^10 + x^9 + x^8 + x^5 + x^2 + 1\n  // Multiply f(x) by x^(18 - 6)\n  //   - f'(x) = f(x) * x^(18 - 6)\n  //   - f'(x) = x^14 + x^13 + x^12\n  // Calculate the remainder of f'(x) / g(x)\n  //         x^2\n  //         __________________________________________________\n  //   g(x) )x^14 + x^13 + x^12\n  //         x^14 + x^13 + x^12 + x^11 + x^10 + x^7 + x^4 + x^2\n  //         --------------------------------------------------\n  //                              x^11 + x^10 + x^7 + x^4 + x^2\n  //\n  // The remainder is x^11 + x^10 + x^7 + x^4 + x^2\n  // Encode it in binary: 110010010100\n  // The return value is 0xc94 (1100 1001 0100)\n  //\n  // Since all coefficients in the polynomials are 1 or 0, we can do the calculation by bit\n  // operations. We don't care if coefficients are positive or negative.\n\n\n  MatrixUtil.calculateBCHCode = function (value\n  /*int*/\n  , poly\n  /*int*/\n  ) {\n    if (poly === 0) {\n      throw new IllegalArgumentException_1.default('0 polynomial');\n    } // If poly is \"1 1111 0010 0101\" (version info poly), msbSetInPoly is 13. We'll subtract 1\n    // from 13 to make it 12.\n\n\n    var msbSetInPoly = MatrixUtil.findMSBSet(poly);\n    value <<= msbSetInPoly - 1; // Do the division business using exclusive-or operations.\n\n    while (MatrixUtil.findMSBSet(value) >= msbSetInPoly) {\n      value ^= poly << MatrixUtil.findMSBSet(value) - msbSetInPoly;\n    } // Now the \"value\" is the remainder (i.e. the BCH code)\n\n\n    return value;\n  }; // Make bit vector of type information. On success, store the result in \"bits\" and return true.\n  // Encode error correction level and mask pattern. See 8.9 of\n  // JISX0510:2004 (p.45) for details.\n\n\n  MatrixUtil.makeTypeInfoBits = function (ecLevel, maskPattern\n  /*int*/\n  , bits) {\n    if (!QRCode_1.default.isValidMaskPattern(maskPattern)) {\n      throw new WriterException_1.default('Invalid mask pattern');\n    }\n\n    var typeInfo = ecLevel.getBits() << 3 | maskPattern;\n    bits.appendBits(typeInfo, 5);\n    var bchCode = MatrixUtil.calculateBCHCode(typeInfo, MatrixUtil.TYPE_INFO_POLY);\n    bits.appendBits(bchCode, 10);\n    var maskBits = new BitArray_1.default();\n    maskBits.appendBits(MatrixUtil.TYPE_INFO_MASK_PATTERN, 15);\n    bits.xor(maskBits);\n\n    if (bits.getSize() !== 15) {\n      // Just in case.\n      throw new WriterException_1.default('should not happen but we got: ' + bits.getSize());\n    }\n  }; // Make bit vector of version information. On success, store the result in \"bits\" and return true.\n  // See 8.10 of JISX0510:2004 (p.45) for details.\n\n\n  MatrixUtil.makeVersionInfoBits = function (version, bits) {\n    bits.appendBits(version.getVersionNumber(), 6);\n    var bchCode = MatrixUtil.calculateBCHCode(version.getVersionNumber(), MatrixUtil.VERSION_INFO_POLY);\n    bits.appendBits(bchCode, 12);\n\n    if (bits.getSize() !== 18) {\n      // Just in case.\n      throw new WriterException_1.default('should not happen but we got: ' + bits.getSize());\n    }\n  }; // Check if \"value\" is empty.\n\n\n  MatrixUtil.isEmpty = function (value\n  /*int*/\n  ) {\n    return value === 255; // -1\n  };\n\n  MatrixUtil.embedTimingPatterns = function (matrix) {\n    // -8 is for skipping position detection patterns (7: size), and two horizontal/vertical\n    // separation patterns (1: size). Thus, 8 = 7 + 1.\n    for (var i = 8; i < matrix.getWidth() - 8; ++i) {\n      var bit = (i + 1) % 2; // Horizontal line.\n\n      if (MatrixUtil.isEmpty(matrix.get(i, 6))) {\n        matrix.setNumber(i, 6, bit);\n      } // Vertical line.\n\n\n      if (MatrixUtil.isEmpty(matrix.get(6, i))) {\n        matrix.setNumber(6, i, bit);\n      }\n    }\n  }; // Embed the lonely dark dot at left bottom corner. JISX0510:2004 (p.46)\n\n\n  MatrixUtil.embedDarkDotAtLeftBottomCorner = function (matrix) {\n    if (matrix.get(8, matrix.getHeight() - 8) === 0) {\n      throw new WriterException_1.default();\n    }\n\n    matrix.setNumber(8, matrix.getHeight() - 8, 1);\n  };\n\n  MatrixUtil.embedHorizontalSeparationPattern = function (xStart\n  /*int*/\n  , yStart\n  /*int*/\n  , matrix) {\n    for (var x = 0; x < 8; ++x) {\n      if (!MatrixUtil.isEmpty(matrix.get(xStart + x, yStart))) {\n        throw new WriterException_1.default();\n      }\n\n      matrix.setNumber(xStart + x, yStart, 0);\n    }\n  };\n\n  MatrixUtil.embedVerticalSeparationPattern = function (xStart\n  /*int*/\n  , yStart\n  /*int*/\n  , matrix) {\n    for (var y = 0; y < 7; ++y) {\n      if (!MatrixUtil.isEmpty(matrix.get(xStart, yStart + y))) {\n        throw new WriterException_1.default();\n      }\n\n      matrix.setNumber(xStart, yStart + y, 0);\n    }\n  };\n\n  MatrixUtil.embedPositionAdjustmentPattern = function (xStart\n  /*int*/\n  , yStart\n  /*int*/\n  , matrix) {\n    for (var y = 0; y < 5; ++y) {\n      var patternY = MatrixUtil.POSITION_ADJUSTMENT_PATTERN[y];\n\n      for (var x = 0; x < 5; ++x) {\n        matrix.setNumber(xStart + x, yStart + y, patternY[x]);\n      }\n    }\n  };\n\n  MatrixUtil.embedPositionDetectionPattern = function (xStart\n  /*int*/\n  , yStart\n  /*int*/\n  , matrix) {\n    for (var y = 0; y < 7; ++y) {\n      var patternY = MatrixUtil.POSITION_DETECTION_PATTERN[y];\n\n      for (var x = 0; x < 7; ++x) {\n        matrix.setNumber(xStart + x, yStart + y, patternY[x]);\n      }\n    }\n  }; // Embed position detection patterns and surrounding vertical/horizontal separators.\n\n\n  MatrixUtil.embedPositionDetectionPatternsAndSeparators = function (matrix) {\n    // Embed three big squares at corners.\n    var pdpWidth = MatrixUtil.POSITION_DETECTION_PATTERN[0].length; // Left top corner.\n\n    MatrixUtil.embedPositionDetectionPattern(0, 0, matrix); // Right top corner.\n\n    MatrixUtil.embedPositionDetectionPattern(matrix.getWidth() - pdpWidth, 0, matrix); // Left bottom corner.\n\n    MatrixUtil.embedPositionDetectionPattern(0, matrix.getWidth() - pdpWidth, matrix); // Embed horizontal separation patterns around the squares.\n\n    var hspWidth = 8; // Left top corner.\n\n    MatrixUtil.embedHorizontalSeparationPattern(0, hspWidth - 1, matrix); // Right top corner.\n\n    MatrixUtil.embedHorizontalSeparationPattern(matrix.getWidth() - hspWidth, hspWidth - 1, matrix); // Left bottom corner.\n\n    MatrixUtil.embedHorizontalSeparationPattern(0, matrix.getWidth() - hspWidth, matrix); // Embed vertical separation patterns around the squares.\n\n    var vspSize = 7; // Left top corner.\n\n    MatrixUtil.embedVerticalSeparationPattern(vspSize, 0, matrix); // Right top corner.\n\n    MatrixUtil.embedVerticalSeparationPattern(matrix.getHeight() - vspSize - 1, 0, matrix); // Left bottom corner.\n\n    MatrixUtil.embedVerticalSeparationPattern(vspSize, matrix.getHeight() - vspSize, matrix);\n  }; // Embed position adjustment patterns if need be.\n\n\n  MatrixUtil.maybeEmbedPositionAdjustmentPatterns = function (version, matrix) {\n    if (version.getVersionNumber() < 2) {\n      // The patterns appear if version >= 2\n      return;\n    }\n\n    var index = version.getVersionNumber() - 1;\n    var coordinates = MatrixUtil.POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE[index];\n\n    for (var i = 0, length_1 = coordinates.length; i !== length_1; i++) {\n      var y = coordinates[i];\n\n      if (y >= 0) {\n        for (var j = 0; j !== length_1; j++) {\n          var x = coordinates[j];\n\n          if (x >= 0 && MatrixUtil.isEmpty(matrix.get(x, y))) {\n            // If the cell is unset, we embed the position adjustment pattern here.\n            // -2 is necessary since the x/y coordinates point to the center of the pattern, not the\n            // left top corner.\n            MatrixUtil.embedPositionAdjustmentPattern(x - 2, y - 2, matrix);\n          }\n        }\n      }\n    }\n  };\n\n  MatrixUtil.POSITION_DETECTION_PATTERN = Array.from([Int32Array.from([1, 1, 1, 1, 1, 1, 1]), Int32Array.from([1, 0, 0, 0, 0, 0, 1]), Int32Array.from([1, 0, 1, 1, 1, 0, 1]), Int32Array.from([1, 0, 1, 1, 1, 0, 1]), Int32Array.from([1, 0, 1, 1, 1, 0, 1]), Int32Array.from([1, 0, 0, 0, 0, 0, 1]), Int32Array.from([1, 1, 1, 1, 1, 1, 1])]);\n  MatrixUtil.POSITION_ADJUSTMENT_PATTERN = Array.from([Int32Array.from([1, 1, 1, 1, 1]), Int32Array.from([1, 0, 0, 0, 1]), Int32Array.from([1, 0, 1, 0, 1]), Int32Array.from([1, 0, 0, 0, 1]), Int32Array.from([1, 1, 1, 1, 1])]); // From Appendix E. Table 1, JIS0510X:2004 (71: p). The table was double-checked by komatsu.\n\n  MatrixUtil.POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE = Array.from([Int32Array.from([-1, -1, -1, -1, -1, -1, -1]), Int32Array.from([6, 18, -1, -1, -1, -1, -1]), Int32Array.from([6, 22, -1, -1, -1, -1, -1]), Int32Array.from([6, 26, -1, -1, -1, -1, -1]), Int32Array.from([6, 30, -1, -1, -1, -1, -1]), Int32Array.from([6, 34, -1, -1, -1, -1, -1]), Int32Array.from([6, 22, 38, -1, -1, -1, -1]), Int32Array.from([6, 24, 42, -1, -1, -1, -1]), Int32Array.from([6, 26, 46, -1, -1, -1, -1]), Int32Array.from([6, 28, 50, -1, -1, -1, -1]), Int32Array.from([6, 30, 54, -1, -1, -1, -1]), Int32Array.from([6, 32, 58, -1, -1, -1, -1]), Int32Array.from([6, 34, 62, -1, -1, -1, -1]), Int32Array.from([6, 26, 46, 66, -1, -1, -1]), Int32Array.from([6, 26, 48, 70, -1, -1, -1]), Int32Array.from([6, 26, 50, 74, -1, -1, -1]), Int32Array.from([6, 30, 54, 78, -1, -1, -1]), Int32Array.from([6, 30, 56, 82, -1, -1, -1]), Int32Array.from([6, 30, 58, 86, -1, -1, -1]), Int32Array.from([6, 34, 62, 90, -1, -1, -1]), Int32Array.from([6, 28, 50, 72, 94, -1, -1]), Int32Array.from([6, 26, 50, 74, 98, -1, -1]), Int32Array.from([6, 30, 54, 78, 102, -1, -1]), Int32Array.from([6, 28, 54, 80, 106, -1, -1]), Int32Array.from([6, 32, 58, 84, 110, -1, -1]), Int32Array.from([6, 30, 58, 86, 114, -1, -1]), Int32Array.from([6, 34, 62, 90, 118, -1, -1]), Int32Array.from([6, 26, 50, 74, 98, 122, -1]), Int32Array.from([6, 30, 54, 78, 102, 126, -1]), Int32Array.from([6, 26, 52, 78, 104, 130, -1]), Int32Array.from([6, 30, 56, 82, 108, 134, -1]), Int32Array.from([6, 34, 60, 86, 112, 138, -1]), Int32Array.from([6, 30, 58, 86, 114, 142, -1]), Int32Array.from([6, 34, 62, 90, 118, 146, -1]), Int32Array.from([6, 30, 54, 78, 102, 126, 150]), Int32Array.from([6, 24, 50, 76, 102, 128, 154]), Int32Array.from([6, 28, 54, 80, 106, 132, 158]), Int32Array.from([6, 32, 58, 84, 110, 136, 162]), Int32Array.from([6, 26, 54, 82, 110, 138, 166]), Int32Array.from([6, 30, 58, 86, 114, 142, 170])]); // Type info cells at the left top corner.\n\n  MatrixUtil.TYPE_INFO_COORDINATES = Array.from([Int32Array.from([8, 0]), Int32Array.from([8, 1]), Int32Array.from([8, 2]), Int32Array.from([8, 3]), Int32Array.from([8, 4]), Int32Array.from([8, 5]), Int32Array.from([8, 7]), Int32Array.from([8, 8]), Int32Array.from([7, 8]), Int32Array.from([5, 8]), Int32Array.from([4, 8]), Int32Array.from([3, 8]), Int32Array.from([2, 8]), Int32Array.from([1, 8]), Int32Array.from([0, 8])]); // From Appendix D in JISX0510:2004 (p. 67)\n\n  MatrixUtil.VERSION_INFO_POLY = 0x1f25; // 1 1111 0010 0101\n  // From Appendix C in JISX0510:2004 (p.65).\n\n  MatrixUtil.TYPE_INFO_POLY = 0x537;\n  MatrixUtil.TYPE_INFO_MASK_PATTERN = 0x5412;\n  return MatrixUtil;\n}();\n\nexports.default = MatrixUtil;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;AAgBA;;AAEA;;AAKA;;AACA;;AACA;;AACA;;AACA;AAEA;;;;;;AAIA;AAAA;AAAA;AAEI,yBACI;AACH,GAJL,CA8FI;AACA;AACA;AACA;;;AACcA,2BAAd,UAA0BC,MAA1B,EAA4C;AACxC;AACAA,UAAM,CAACC,KAAP;AAAa;;AAAW;AAAM,OAA9B;AACH,GAHa,CAlGlB,CAuGI;AACA;;;AACcF,2BAAd,UAA0BG,QAA1B,EACIC,OADJ,EAEIC,OAFJ,EAGIC;AAAoB;AAHxB,IAIIL,MAJJ,EAIsB;AAClBD,cAAU,CAACO,WAAX,CAAuBN,MAAvB;AACAD,cAAU,CAACQ,kBAAX,CAA8BH,OAA9B,EAAuCJ,MAAvC,EAFkB,CAGlB;;AACAD,cAAU,CAACS,aAAX,CAAyBL,OAAzB,EAAkCE,WAAlC,EAA+CL,MAA/C,EAJkB,CAKlB;;AACAD,cAAU,CAACU,qBAAX,CAAiCL,OAAjC,EAA0CJ,MAA1C,EANkB,CAOlB;;AACAD,cAAU,CAACW,aAAX,CAAyBR,QAAzB,EAAmCG,WAAnC,EAAgDL,MAAhD;AACH,GAba,CAzGlB,CAwHI;AACA;AACA;AACA;AACA;AACA;;;AACcD,kCAAd,UAAiCK,OAAjC,EAAmDJ,MAAnD,EAAqE;AACjE;AACAD,cAAU,CAACY,2CAAX,CAAuDX,MAAvD,EAFiE,CAGjE;;AACAD,cAAU,CAACa,8BAAX,CAA0CZ,MAA1C,EAJiE,CAMjE;;AACAD,cAAU,CAACc,oCAAX,CAAgDT,OAAhD,EAAyDJ,MAAzD,EAPiE,CAQjE;;AACAD,cAAU,CAACe,mBAAX,CAA+Bd,MAA/B;AACH,GAVa,CA9HlB,CA0II;;;AACcD,6BAAd,UAA4BI,OAA5B,EAA2DE;AAAoB;AAA/E,IAAwFL,MAAxF,EAA0G;AACtG,QAAMe,YAAY,GAAa,IAAIC,kBAAJ,EAA/B;AACAjB,cAAU,CAACkB,gBAAX,CAA4Bd,OAA5B,EAAqCE,WAArC,EAAkDU,YAAlD;;AAEA,SAAK,IAAIG,CAAC,GAAG,CAAR,EAAWC,IAAI,GAAGJ,YAAY,CAACK,OAAb,EAAvB,EAA+CF,CAAC,GAAGC,IAAnD,EAAyD,EAAED,CAA3D,EAA8D;AAC1D;AACA;AACA,UAAMG,GAAG,GAAYN,YAAY,CAACO,GAAb,CAAiBP,YAAY,CAACK,OAAb,KAAyB,CAAzB,GAA6BF,CAA9C,CAArB,CAH0D,CAK1D;;AACA,UAAMK,WAAW,GAAexB,UAAU,CAACyB,qBAAX,CAAiCN,CAAjC,CAAhC;AACA,UAAMO,EAAE,GAAGF,WAAW,CAAC,CAAD,CAAtB;AACA,UAAMG,EAAE,GAAGH,WAAW,CAAC,CAAD,CAAtB;AACAvB,YAAM,CAAC2B,UAAP,CAAkBF,EAAlB,EAAsBC,EAAtB,EAA0BL,GAA1B;;AAEA,UAAIH,CAAC,GAAG,CAAR,EAAW;AACP;AACA,YAAMU,EAAE,GAAG5B,MAAM,CAAC6B,QAAP,KAAoBX,CAApB,GAAwB,CAAnC;AACA,YAAMY,EAAE,GAAG,CAAX;AACA9B,cAAM,CAAC2B,UAAP,CAAkBC,EAAlB,EAAsBE,EAAtB,EAA0BT,GAA1B;AACH,OALD,MAKO;AACH;AACA,YAAMO,EAAE,GAAG,CAAX;AACA,YAAME,EAAE,GAAG9B,MAAM,CAAC+B,SAAP,KAAqB,CAArB,IAA0Bb,CAAC,GAAG,CAA9B,CAAX;AACAlB,cAAM,CAAC2B,UAAP,CAAkBC,EAAlB,EAAsBE,EAAtB,EAA0BT,GAA1B;AACH;AACJ;AACJ,GA3Ba,CA3IlB,CAwKI;AACA;;;AACctB,qCAAd,UAAoCK,OAApC,EAAsDJ,MAAtD,EAAwE;AACpE,QAAII,OAAO,CAAC4B,gBAAR,KAA6B,CAAjC,EAAoC;AAAG;AACnC,aADgC,CACvB;AACZ;;AACD,QAAMC,eAAe,GAAG,IAAIjB,kBAAJ,EAAxB;AACAjB,cAAU,CAACmC,mBAAX,CAA+B9B,OAA/B,EAAwC6B,eAAxC;AAEA,QAAIE,QAAQ,GAAG,IAAI,CAAJ,GAAQ,CAAvB,CAPoE,CAOzC;;AAC3B,SAAK,IAAIjB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuB,EAAEA,CAAzB,EAA4B;AACxB,WAAK,IAAIkB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuB,EAAEA,CAAzB,EAA4B;AACxB;AACA,YAAMf,GAAG,GAAYY,eAAe,CAACX,GAAhB,CAAoBa,QAApB,CAArB;AACAA,gBAAQ,GAHgB,CAIxB;;AACAnC,cAAM,CAAC2B,UAAP,CAAkBT,CAAlB,EAAqBlB,MAAM,CAAC+B,SAAP,KAAqB,EAArB,GAA0BK,CAA/C,EAAkDf,GAAlD,EALwB,CAMxB;;AACArB,cAAM,CAAC2B,UAAP,CAAkB3B,MAAM,CAAC+B,SAAP,KAAqB,EAArB,GAA0BK,CAA5C,EAA+ClB,CAA/C,EAAkDG,GAAlD;AACH;AACJ;AACJ,GAnBa,CA1KlB,CA+LI;AACA;AACA;;;AACctB,6BAAd,UAA4BG,QAA5B,EAAgDG;AAAoB;AAApE,IAA6EL,MAA7E,EAA+F;AAC3F,QAAImC,QAAQ,GAAG,CAAf;AACA,QAAIE,SAAS,GAAG,CAAC,CAAjB,CAF2F,CAG3F;;AACA,QAAIC,CAAC,GAAGtC,MAAM,CAAC6B,QAAP,KAAoB,CAA5B;AACA,QAAIU,CAAC,GAAGvC,MAAM,CAAC+B,SAAP,KAAqB,CAA7B;;AACA,WAAOO,CAAC,GAAG,CAAX,EAAc;AACV;AACA,UAAIA,CAAC,KAAK,CAAV,EAAa;AACTA,SAAC,IAAI,CAAL;AACH;;AACD,aAAOC,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGvC,MAAM,CAAC+B,SAAP,EAArB,EAAyC;AACrC,aAAK,IAAIb,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuB,EAAEA,CAAzB,EAA4B;AACxB,cAAMsB,EAAE,GAAGF,CAAC,GAAGpB,CAAf,CADwB,CAExB;;AACA,cAAI,CAACnB,UAAU,CAAC0C,OAAX,CAAmBzC,MAAM,CAACsB,GAAP,CAAWkB,EAAX,EAAeD,CAAf,CAAnB,CAAL,EAA4C;AACxC;AACH;;AACD,cAAIlB,GAAG,SAAP;;AACA,cAAIc,QAAQ,GAAGjC,QAAQ,CAACkB,OAAT,EAAf,EAAmC;AAC/BC,eAAG,GAAGnB,QAAQ,CAACoB,GAAT,CAAaa,QAAb,CAAN;AACA,cAAEA,QAAF;AACH,WAHD,MAGO;AACH;AACA;AACAd,eAAG,GAAG,KAAN;AACH,WAduB,CAgBxB;;;AACA,cAAIhB,WAAW,KAAK,GAAhB,IAAuBqC,mBAASC,cAAT,CAAwBtC,WAAxB,EAAqCmC,EAArC,EAAyCD,CAAzC,CAA3B,EAAwE;AACpElB,eAAG,GAAG,CAACA,GAAP;AACH;;AACDrB,gBAAM,CAAC2B,UAAP,CAAkBa,EAAlB,EAAsBD,CAAtB,EAAyBlB,GAAzB;AACH;;AACDkB,SAAC,IAAIF,SAAL;AACH;;AACDA,eAAS,GAAG,CAACA,SAAb,CA9BU,CA8Be;;AACzBE,OAAC,IAAIF,SAAL;AACAC,OAAC,IAAI,CAAL,CAhCU,CAgCD;AACZ,KAvC0F,CAwC3F;;;AACA,QAAIH,QAAQ,KAAKjC,QAAQ,CAACkB,OAAT,EAAjB,EAAqC;AACjC,YAAM,IAAIwB,yBAAJ,CAAoB,4BAA4BT,QAA5B,GAAuC,GAAvC,GAA6CjC,QAAQ,CAACkB,OAAT,EAAjE,CAAN;AACH;AACJ,GA5Ca,CAlMlB,CAgPI;AACA;AACA;AACA;AACA;;;AACcrB,0BAAd,UAAyB8C;AAAc;AAAvC,IAA8C;AAC1C,WAAO,KAAKC,kBAAQC,oBAAR,CAA6BF,KAA7B,CAAZ;AACH,GAFa,CArPlB,CAyPI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACc9C,gCAAd,UAA+B8C;AAAc;AAA7C,IAAsDG;AAAa;AAAnE,IAA0E;AACtE,QAAIA,IAAI,KAAK,CAAb,EAAgB;AACZ,YAAM,IAAIC,kCAAJ,CAA6B,cAA7B,CAAN;AACH,KAHqE,CAItE;AACA;;;AACA,QAAMC,YAAY,GAAGnD,UAAU,CAACoD,UAAX,CAAsBH,IAAtB,CAArB;AACAH,SAAK,KAAKK,YAAY,GAAG,CAAzB,CAPsE,CAQtE;;AACA,WAAOnD,UAAU,CAACoD,UAAX,CAAsBN,KAAtB,KAAgCK,YAAvC,EAAqD;AACjDL,WAAK,IAAIG,IAAI,IAAKjD,UAAU,CAACoD,UAAX,CAAsBN,KAAtB,IAA+BK,YAAjD;AACH,KAXqE,CAYtE;;;AACA,WAAOL,KAAP;AACH,GAda,CAlRlB,CAkSI;AACA;AACA;;;AACc9C,gCAAd,UAA+BI,OAA/B,EAA8DE;AAAoB;AAAlF,IAA2F+C,IAA3F,EAAyG;AACrG,QAAI,CAACC,iBAAOC,kBAAP,CAA0BjD,WAA1B,CAAL,EAA6C;AACzC,YAAM,IAAIuC,yBAAJ,CAAoB,sBAApB,CAAN;AACH;;AACD,QAAMW,QAAQ,GAAIpD,OAAO,CAACqD,OAAR,MAAqB,CAAtB,GAA2BnD,WAA5C;AACA+C,QAAI,CAACK,UAAL,CAAgBF,QAAhB,EAA0B,CAA1B;AAEA,QAAMG,OAAO,GAAG3D,UAAU,CAAC4D,gBAAX,CAA4BJ,QAA5B,EAAsCxD,UAAU,CAAC6D,cAAjD,CAAhB;AACAR,QAAI,CAACK,UAAL,CAAgBC,OAAhB,EAAyB,EAAzB;AAEA,QAAMG,QAAQ,GAAG,IAAI7C,kBAAJ,EAAjB;AACA6C,YAAQ,CAACJ,UAAT,CAAoB1D,UAAU,CAAC+D,sBAA/B,EAAuD,EAAvD;AACAV,QAAI,CAACW,GAAL,CAASF,QAAT;;AAEA,QAAIT,IAAI,CAAChC,OAAL,OAAmB,EAAvB,EAA2B;AAAG;AAC1B,YAAM,IAAIwB,yBAAJ,CAAoB,mCAAmCQ,IAAI,CAAChC,OAAL,EAAvD,CAAN;AACH;AACJ,GAjBa,CArSlB,CAwTI;AACA;;;AACcrB,mCAAd,UAAkCK,OAAlC,EAAoDgD,IAApD,EAAkE;AAC9DA,QAAI,CAACK,UAAL,CAAgBrD,OAAO,CAAC4B,gBAAR,EAAhB,EAA4C,CAA5C;AACA,QAAM0B,OAAO,GAAG3D,UAAU,CAAC4D,gBAAX,CAA4BvD,OAAO,CAAC4B,gBAAR,EAA5B,EAAwDjC,UAAU,CAACiE,iBAAnE,CAAhB;AACAZ,QAAI,CAACK,UAAL,CAAgBC,OAAhB,EAAyB,EAAzB;;AAEA,QAAIN,IAAI,CAAChC,OAAL,OAAmB,EAAvB,EAA2B;AAAG;AAC1B,YAAM,IAAIwB,yBAAJ,CAAoB,mCAAmCQ,IAAI,CAAChC,OAAL,EAAvD,CAAN;AACH;AACJ,GARa,CA1TlB,CAoUI;;;AACerB,uBAAf,UAAuB8C;AAAc;AAArC,IAA4C;AACxC,WAAOA,KAAK,KAAK,GAAjB,CADwC,CAClB;AACzB,GAFc;;AAIA9C,mCAAf,UAAmCC,MAAnC,EAAqD;AACjD;AACA;AACA,SAAK,IAAIkB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlB,MAAM,CAAC6B,QAAP,KAAoB,CAAxC,EAA2C,EAAEX,CAA7C,EAAgD;AAC5C,UAAMG,GAAG,GAAG,CAACH,CAAC,GAAG,CAAL,IAAU,CAAtB,CAD4C,CAE5C;;AACA,UAAInB,UAAU,CAAC0C,OAAX,CAAmBzC,MAAM,CAACsB,GAAP,CAAWJ,CAAX,EAAc,CAAd,CAAnB,CAAJ,EAA0C;AACtClB,cAAM,CAACiE,SAAP,CAAiB/C,CAAjB,EAAoB,CAApB,EAAuBG,GAAvB;AACH,OAL2C,CAM5C;;;AACA,UAAItB,UAAU,CAAC0C,OAAX,CAAmBzC,MAAM,CAACsB,GAAP,CAAW,CAAX,EAAcJ,CAAd,CAAnB,CAAJ,EAA0C;AACtClB,cAAM,CAACiE,SAAP,CAAiB,CAAjB,EAAoB/C,CAApB,EAAuBG,GAAvB;AACH;AACJ;AACJ,GAdc,CAzUnB,CAyVI;;;AACetB,8CAAf,UAA8CC,MAA9C,EAAgE;AAC5D,QAAIA,MAAM,CAACsB,GAAP,CAAW,CAAX,EAActB,MAAM,CAAC+B,SAAP,KAAqB,CAAnC,MAA0C,CAA9C,EAAiD;AAC7C,YAAM,IAAIa,yBAAJ,EAAN;AACH;;AACD5C,UAAM,CAACiE,SAAP,CAAiB,CAAjB,EAAoBjE,MAAM,CAAC+B,SAAP,KAAqB,CAAzC,EAA4C,CAA5C;AACH,GALc;;AAOAhC,gDAAf,UAAgDmE;AAAe;AAA/D,IACIC;AAAe;AADnB,IAEInE,MAFJ,EAEsB;AAClB,SAAK,IAAIsC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuB,EAAEA,CAAzB,EAA4B;AACxB,UAAI,CAACvC,UAAU,CAAC0C,OAAX,CAAmBzC,MAAM,CAACsB,GAAP,CAAW4C,MAAM,GAAG5B,CAApB,EAAuB6B,MAAvB,CAAnB,CAAL,EAAyD;AACrD,cAAM,IAAIvB,yBAAJ,EAAN;AACH;;AACD5C,YAAM,CAACiE,SAAP,CAAiBC,MAAM,GAAG5B,CAA1B,EAA6B6B,MAA7B,EAAqC,CAArC;AACH;AACJ,GATc;;AAWApE,8CAAf,UAA8CmE;AAAe;AAA7D,IACIC;AAAe;AADnB,IAEInE,MAFJ,EAEsB;AAClB,SAAK,IAAIuC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuB,EAAEA,CAAzB,EAA4B;AACxB,UAAI,CAACxC,UAAU,CAAC0C,OAAX,CAAmBzC,MAAM,CAACsB,GAAP,CAAW4C,MAAX,EAAmBC,MAAM,GAAG5B,CAA5B,CAAnB,CAAL,EAAyD;AACrD,cAAM,IAAIK,yBAAJ,EAAN;AACH;;AACD5C,YAAM,CAACiE,SAAP,CAAiBC,MAAjB,EAAyBC,MAAM,GAAG5B,CAAlC,EAAqC,CAArC;AACH;AACJ,GATc;;AAWAxC,8CAAf,UAA8CmE;AAAe;AAA7D,IAAsEC;AAAe;AAArF,IAA8FnE,MAA9F,EAAgH;AAC5G,SAAK,IAAIuC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuB,EAAEA,CAAzB,EAA4B;AACxB,UAAM6B,QAAQ,GAAerE,UAAU,CAACsE,2BAAX,CAAuC9B,CAAvC,CAA7B;;AACA,WAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuB,EAAEA,CAAzB,EAA4B;AACxBtC,cAAM,CAACiE,SAAP,CAAiBC,MAAM,GAAG5B,CAA1B,EAA6B6B,MAAM,GAAG5B,CAAtC,EAAyC6B,QAAQ,CAAC9B,CAAD,CAAjD;AACH;AACJ;AACJ,GAPc;;AASAvC,6CAAf,UAA6CmE;AAAe;AAA5D,IAAqEC;AAAe;AAApF,IAA6FnE,MAA7F,EAA+G;AAC3G,SAAK,IAAIuC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuB,EAAEA,CAAzB,EAA4B;AACxB,UAAM6B,QAAQ,GAAerE,UAAU,CAACuE,0BAAX,CAAsC/B,CAAtC,CAA7B;;AACA,WAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuB,EAAEA,CAAzB,EAA4B;AACxBtC,cAAM,CAACiE,SAAP,CAAiBC,MAAM,GAAG5B,CAA1B,EAA6B6B,MAAM,GAAG5B,CAAtC,EAAyC6B,QAAQ,CAAC9B,CAAD,CAAjD;AACH;AACJ;AACJ,GAPc,CAhYnB,CAyYI;;;AACevC,2DAAf,UAA2DC,MAA3D,EAA6E;AACzE;AACA,QAAMuE,QAAQ,GAAGxE,UAAU,CAACuE,0BAAX,CAAsC,CAAtC,EAAyCE,MAA1D,CAFyE,CAGzE;;AACAzE,cAAU,CAAC0E,6BAAX,CAAyC,CAAzC,EAA4C,CAA5C,EAA+CzE,MAA/C,EAJyE,CAKzE;;AACAD,cAAU,CAAC0E,6BAAX,CAAyCzE,MAAM,CAAC6B,QAAP,KAAoB0C,QAA7D,EAAuE,CAAvE,EAA0EvE,MAA1E,EANyE,CAOzE;;AACAD,cAAU,CAAC0E,6BAAX,CAAyC,CAAzC,EAA4CzE,MAAM,CAAC6B,QAAP,KAAoB0C,QAAhE,EAA0EvE,MAA1E,EARyE,CAUzE;;AACA,QAAM0E,QAAQ,GAAG,CAAjB,CAXyE,CAYzE;;AACA3E,cAAU,CAAC4E,gCAAX,CAA4C,CAA5C,EAA+CD,QAAQ,GAAG,CAA1D,EAA6D1E,MAA7D,EAbyE,CAczE;;AACAD,cAAU,CAAC4E,gCAAX,CAA4C3E,MAAM,CAAC6B,QAAP,KAAoB6C,QAAhE,EACIA,QAAQ,GAAG,CADf,EACkB1E,MADlB,EAfyE,CAiBzE;;AACAD,cAAU,CAAC4E,gCAAX,CAA4C,CAA5C,EAA+C3E,MAAM,CAAC6B,QAAP,KAAoB6C,QAAnE,EAA6E1E,MAA7E,EAlByE,CAoBzE;;AACA,QAAM4E,OAAO,GAAG,CAAhB,CArByE,CAsBzE;;AACA7E,cAAU,CAAC8E,8BAAX,CAA0CD,OAA1C,EAAmD,CAAnD,EAAsD5E,MAAtD,EAvByE,CAwBzE;;AACAD,cAAU,CAAC8E,8BAAX,CAA0C7E,MAAM,CAAC+B,SAAP,KAAqB6C,OAArB,GAA+B,CAAzE,EAA4E,CAA5E,EAA+E5E,MAA/E,EAzByE,CA0BzE;;AACAD,cAAU,CAAC8E,8BAAX,CAA0CD,OAA1C,EAAmD5E,MAAM,CAAC+B,SAAP,KAAqB6C,OAAxE,EACI5E,MADJ;AAEH,GA7Bc,CA1YnB,CAyaI;;;AACeD,oDAAf,UAAoDK,OAApD,EAAsEJ,MAAtE,EAAwF;AACpF,QAAII,OAAO,CAAC4B,gBAAR,KAA6B,CAAjC,EAAoC;AAAG;AACnC;AACH;;AACD,QAAM8C,KAAK,GAAG1E,OAAO,CAAC4B,gBAAR,KAA6B,CAA3C;AACA,QAAMT,WAAW,GAAexB,UAAU,CAACgF,4CAAX,CAAwDD,KAAxD,CAAhC;;AACA,SAAK,IAAI5D,CAAC,GAAG,CAAR,EAAW8D,QAAM,GAAGzD,WAAW,CAACiD,MAArC,EAA6CtD,CAAC,KAAK8D,QAAnD,EAA2D9D,CAAC,EAA5D,EAAgE;AAC5D,UAAMqB,CAAC,GAAGhB,WAAW,CAACL,CAAD,CAArB;;AACA,UAAIqB,CAAC,IAAI,CAAT,EAAY;AACR,aAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,KAAK4C,QAAtB,EAA8B5C,CAAC,EAA/B,EAAmC;AAC/B,cAAME,CAAC,GAAGf,WAAW,CAACa,CAAD,CAArB;;AACA,cAAIE,CAAC,IAAI,CAAL,IAAUvC,UAAU,CAAC0C,OAAX,CAAmBzC,MAAM,CAACsB,GAAP,CAAWgB,CAAX,EAAcC,CAAd,CAAnB,CAAd,EAAoD;AAChD;AACA;AACA;AACAxC,sBAAU,CAACkF,8BAAX,CAA0C3C,CAAC,GAAG,CAA9C,EAAiDC,CAAC,GAAG,CAArD,EAAwDvC,MAAxD;AACH;AACJ;AACJ;AACJ;AACJ,GApBc;;AApaAD,0CAAgDmF,KAAK,CAACC,IAAN,CAAW,CACtEC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAhB,CADsE,EAEtEC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAhB,CAFsE,EAGtEC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAhB,CAHsE,EAItEC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAhB,CAJsE,EAKtEC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAhB,CALsE,EAMtEC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAhB,CANsE,EAOtEC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAhB,CAPsE,CAAX,CAAhD;AAUApF,2CAAiDmF,KAAK,CAACC,IAAN,CAAW,CACvEC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAhB,CADuE,EAEvEC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAhB,CAFuE,EAGvEC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAhB,CAHuE,EAIvEC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAhB,CAJuE,EAKvEC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAhB,CALuE,CAAX,CAAjD,CAhBnB,CAwBI;;AACepF,4DAAkEmF,KAAK,CAACC,IAAN,CAAW,CACxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,EAAS,CAAC,CAAV,EAAa,CAAC,CAAd,EAAiB,CAAC,CAAlB,EAAqB,CAAC,CAAtB,EAAyB,CAAC,CAA1B,CAAhB,CADwF,EAExFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,CAAC,CAAT,EAAY,CAAC,CAAb,EAAgB,CAAC,CAAjB,EAAoB,CAAC,CAArB,EAAwB,CAAC,CAAzB,CAAhB,CAFwF,EAGxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,CAAC,CAAT,EAAY,CAAC,CAAb,EAAgB,CAAC,CAAjB,EAAoB,CAAC,CAArB,EAAwB,CAAC,CAAzB,CAAhB,CAHwF,EAIxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,CAAC,CAAT,EAAY,CAAC,CAAb,EAAgB,CAAC,CAAjB,EAAoB,CAAC,CAArB,EAAwB,CAAC,CAAzB,CAAhB,CAJwF,EAKxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,CAAC,CAAT,EAAY,CAAC,CAAb,EAAgB,CAAC,CAAjB,EAAoB,CAAC,CAArB,EAAwB,CAAC,CAAzB,CAAhB,CALwF,EAMxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,CAAC,CAAT,EAAY,CAAC,CAAb,EAAgB,CAAC,CAAjB,EAAoB,CAAC,CAArB,EAAwB,CAAC,CAAzB,CAAhB,CANwF,EAOxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,CAAC,CAAb,EAAgB,CAAC,CAAjB,EAAoB,CAAC,CAArB,EAAwB,CAAC,CAAzB,CAAhB,CAPwF,EAQxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,CAAC,CAAb,EAAgB,CAAC,CAAjB,EAAoB,CAAC,CAArB,EAAwB,CAAC,CAAzB,CAAhB,CARwF,EASxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,CAAC,CAAb,EAAgB,CAAC,CAAjB,EAAoB,CAAC,CAArB,EAAwB,CAAC,CAAzB,CAAhB,CATwF,EAUxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,CAAC,CAAb,EAAgB,CAAC,CAAjB,EAAoB,CAAC,CAArB,EAAwB,CAAC,CAAzB,CAAhB,CAVwF,EAWxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,CAAC,CAAb,EAAgB,CAAC,CAAjB,EAAoB,CAAC,CAArB,EAAwB,CAAC,CAAzB,CAAhB,CAXwF,EAYxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,CAAC,CAAb,EAAgB,CAAC,CAAjB,EAAoB,CAAC,CAArB,EAAwB,CAAC,CAAzB,CAAhB,CAZwF,EAaxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,CAAC,CAAb,EAAgB,CAAC,CAAjB,EAAoB,CAAC,CAArB,EAAwB,CAAC,CAAzB,CAAhB,CAbwF,EAcxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,CAAC,CAAjB,EAAoB,CAAC,CAArB,EAAwB,CAAC,CAAzB,CAAhB,CAdwF,EAexFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,CAAC,CAAjB,EAAoB,CAAC,CAArB,EAAwB,CAAC,CAAzB,CAAhB,CAfwF,EAgBxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,CAAC,CAAjB,EAAoB,CAAC,CAArB,EAAwB,CAAC,CAAzB,CAAhB,CAhBwF,EAiBxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,CAAC,CAAjB,EAAoB,CAAC,CAArB,EAAwB,CAAC,CAAzB,CAAhB,CAjBwF,EAkBxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,CAAC,CAAjB,EAAoB,CAAC,CAArB,EAAwB,CAAC,CAAzB,CAAhB,CAlBwF,EAmBxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,CAAC,CAAjB,EAAoB,CAAC,CAArB,EAAwB,CAAC,CAAzB,CAAhB,CAnBwF,EAoBxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,CAAC,CAAjB,EAAoB,CAAC,CAArB,EAAwB,CAAC,CAAzB,CAAhB,CApBwF,EAqBxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,EAAhB,EAAoB,CAAC,CAArB,EAAwB,CAAC,CAAzB,CAAhB,CArBwF,EAsBxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,EAAhB,EAAoB,CAAC,CAArB,EAAwB,CAAC,CAAzB,CAAhB,CAtBwF,EAuBxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,GAAhB,EAAqB,CAAC,CAAtB,EAAyB,CAAC,CAA1B,CAAhB,CAvBwF,EAwBxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,GAAhB,EAAqB,CAAC,CAAtB,EAAyB,CAAC,CAA1B,CAAhB,CAxBwF,EAyBxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,GAAhB,EAAqB,CAAC,CAAtB,EAAyB,CAAC,CAA1B,CAAhB,CAzBwF,EA0BxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,GAAhB,EAAqB,CAAC,CAAtB,EAAyB,CAAC,CAA1B,CAAhB,CA1BwF,EA2BxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,GAAhB,EAAqB,CAAC,CAAtB,EAAyB,CAAC,CAA1B,CAAhB,CA3BwF,EA4BxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,EAAhB,EAAoB,GAApB,EAAyB,CAAC,CAA1B,CAAhB,CA5BwF,EA6BxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,CAAC,CAA3B,CAAhB,CA7BwF,EA8BxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,CAAC,CAA3B,CAAhB,CA9BwF,EA+BxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,CAAC,CAA3B,CAAhB,CA/BwF,EAgCxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,CAAC,CAA3B,CAAhB,CAhCwF,EAiCxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,CAAC,CAA3B,CAAhB,CAjCwF,EAkCxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,CAAC,CAA3B,CAAhB,CAlCwF,EAmCxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,CAAhB,CAnCwF,EAoCxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,CAAhB,CApCwF,EAqCxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,CAAhB,CArCwF,EAsCxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,CAAhB,CAtCwF,EAuCxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,CAAhB,CAvCwF,EAwCxFC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,CAAhB,CAxCwF,CAAX,CAAlE,CAzBnB,CAoEI;;AACepF,qCAA2CmF,KAAK,CAACC,IAAN,CAAW,CACjEC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB,CADiE,EAEjEC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB,CAFiE,EAGjEC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB,CAHiE,EAIjEC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB,CAJiE,EAKjEC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB,CALiE,EAMjEC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB,CANiE,EAOjEC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB,CAPiE,EAQjEC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB,CARiE,EASjEC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB,CATiE,EAUjEC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB,CAViE,EAWjEC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB,CAXiE,EAYjEC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB,CAZiE,EAajEC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB,CAbiE,EAcjEC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB,CAdiE,EAejEC,UAAU,CAACD,IAAX,CAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB,CAfiE,CAAX,CAA3C,CArEnB,CAuFI;;AACepF,iCAAoB,MAApB,CAxFnB,CAwFgD;AAE5C;;AACeA,8BAAiB,KAAjB;AACAA,sCAAyB,MAAzB;AAoWnB;AAhcA;;kBAAqBA","names":["MatrixUtil","matrix","clear","dataBits","ecLevel","version","maskPattern","clearMatrix","embedBasicPatterns","embedTypeInfo","maybeEmbedVersionInfo","embedDataBits","embedPositionDetectionPatternsAndSeparators","embedDarkDotAtLeftBottomCorner","maybeEmbedPositionAdjustmentPatterns","embedTimingPatterns","typeInfoBits","BitArray_1","makeTypeInfoBits","i","size","getSize","bit","get","coordinates","TYPE_INFO_COORDINATES","x1","y1","setBoolean","x2","getWidth","y2","getHeight","getVersionNumber","versionInfoBits","makeVersionInfoBits","bitIndex","j","direction","x","y","xx","isEmpty","MaskUtil_1","getDataMaskBit","WriterException_1","value","Integer_1","numberOfLeadingZeros","poly","IllegalArgumentException_1","msbSetInPoly","findMSBSet","bits","QRCode_1","isValidMaskPattern","typeInfo","getBits","appendBits","bchCode","calculateBCHCode","TYPE_INFO_POLY","maskBits","TYPE_INFO_MASK_PATTERN","xor","VERSION_INFO_POLY","setNumber","xStart","yStart","patternY","POSITION_ADJUSTMENT_PATTERN","POSITION_DETECTION_PATTERN","pdpWidth","length","embedPositionDetectionPattern","hspWidth","embedHorizontalSeparationPattern","vspSize","embedVerticalSeparationPattern","index","POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE","length_1","embedPositionAdjustmentPattern","Array","from","Int32Array"],"sources":["../../../../src/core/qrcode/encoder/MatrixUtil.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}