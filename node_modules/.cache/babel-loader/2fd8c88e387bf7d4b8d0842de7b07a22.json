{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.qrcode.detector {*/\n\nvar ResultPoint_1 = require(\"../../ResultPoint\");\n/**\n * <p>Encapsulates a finder pattern, which are the three square patterns found in\n * the corners of QR Codes. It also encapsulates a count of similar finder patterns,\n * as a convenience to the finder's bookkeeping.</p>\n *\n * @author Sean Owen\n */\n\n\nvar FinderPattern =\n/** @class */\nfunction (_super) {\n  __extends(FinderPattern, _super); // FinderPattern(posX: number/*float*/, posY: number/*float*/, estimatedModuleSize: number/*float*/) {\n  //   this(posX, posY, estimatedModuleSize, 1)\n  // }\n\n\n  function FinderPattern(posX\n  /*float*/\n  , posY\n  /*float*/\n  , estimatedModuleSize\n  /*float*/\n  , count\n  /*int*/\n  ) {\n    var _this = _super.call(this, posX, posY) || this;\n\n    _this.estimatedModuleSize = estimatedModuleSize;\n    _this.count = count;\n\n    if (undefined === count) {\n      _this.count = 1;\n    }\n\n    return _this;\n  }\n\n  FinderPattern.prototype.getEstimatedModuleSize = function () {\n    return this.estimatedModuleSize;\n  };\n\n  FinderPattern.prototype.getCount = function () {\n    return this.count;\n  };\n  /*\n  void incrementCount() {\n    this.count++\n  }\n   */\n\n  /**\n   * <p>Determines if this finder pattern \"about equals\" a finder pattern at the stated\n   * position and size -- meaning, it is at nearly the same center with nearly the same size.</p>\n   */\n\n\n  FinderPattern.prototype.aboutEquals = function (moduleSize\n  /*float*/\n  , i\n  /*float*/\n  , j\n  /*float*/\n  ) {\n    if (Math.abs(i - this.getY()) <= moduleSize && Math.abs(j - this.getX()) <= moduleSize) {\n      var moduleSizeDiff = Math.abs(moduleSize - this.estimatedModuleSize);\n      return moduleSizeDiff <= 1.0 || moduleSizeDiff <= this.estimatedModuleSize;\n    }\n\n    return false;\n  };\n  /**\n   * Combines this object's current estimate of a finder pattern position and module size\n   * with a new estimate. It returns a new {@code FinderPattern} containing a weighted average\n   * based on count.\n   */\n\n\n  FinderPattern.prototype.combineEstimate = function (i\n  /*float*/\n  , j\n  /*float*/\n  , newModuleSize\n  /*float*/\n  ) {\n    var combinedCount = this.count + 1;\n    var combinedX = (this.count * this.getX() + j) / combinedCount;\n    var combinedY = (this.count * this.getY() + i) / combinedCount;\n    var combinedModuleSize = (this.count * this.estimatedModuleSize + newModuleSize) / combinedCount;\n    return new FinderPattern(combinedX, combinedY, combinedModuleSize, combinedCount);\n  };\n\n  return FinderPattern;\n}(ResultPoint_1.default);\n\nexports.default = FinderPattern;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA;;AAEA;AAEA;;;;;;;;;AAOA;AAAA;AAAA;AAA2CA,mCAA3C,CAEI;AACA;AACA;;;AAEA,yBAAmBC;AAAY;AAA/B,IAA0CC;AAAY;AAAtD,IAAyEC;AAA2B;AAApG,IAAuHC;AAAe;AAAtI,IAA6I;AAA7I,gBACIC,kBAAMJ,IAAN,EAAYC,IAAZ,KAAiB,IADrB;;AAAyEI;AAA8CA;;AAEnH,QAAIC,SAAS,KAAKH,KAAlB,EAAyB;AACrBE,WAAI,CAACF,KAAL,GAAa,CAAb;AACH;;;AACJ;;AAEMI,mDAAP;AACI,WAAO,KAAKL,mBAAZ;AACH,GAFM;;AAIAK,qCAAP;AACI,WAAO,KAAKJ,KAAZ;AACH,GAFM;AAIP;;;;;;AAMA;;;;;;AAIOI,wCAAP,UAAmBC;AAAkB;AAArC,IAAgDC;AAAS;AAAzD,IAAoEC;AAAS;AAA7E,IAAsF;AAClF,QAAIC,IAAI,CAACC,GAAL,CAASH,CAAC,GAAG,KAAKI,IAAL,EAAb,KAA6BL,UAA7B,IAA2CG,IAAI,CAACC,GAAL,CAASF,CAAC,GAAG,KAAKI,IAAL,EAAb,KAA6BN,UAA5E,EAAwF;AACpF,UAAMO,cAAc,GAAqBJ,IAAI,CAACC,GAAL,CAASJ,UAAU,GAAG,KAAKN,mBAA3B,CAAzC;AACA,aAAOa,cAAc,IAAI,GAAlB,IAAyBA,cAAc,IAAI,KAAKb,mBAAvD;AACH;;AACD,WAAO,KAAP;AACH,GANM;AAQP;;;;;;;AAKOK,4CAAP,UAAuBE;AAAS;AAAhC,IAA2CC;AAAS;AAApD,IAA+DM;AAAqB;AAApF,IAA6F;AACzF,QAAMC,aAAa,GAAG,KAAKd,KAAL,GAAa,CAAnC;AACA,QAAMe,SAAS,GAAqB,CAAC,KAAKf,KAAL,GAAa,KAAKW,IAAL,EAAb,GAA2BJ,CAA5B,IAAiCO,aAArE;AACA,QAAME,SAAS,GAAqB,CAAC,KAAKhB,KAAL,GAAa,KAAKU,IAAL,EAAb,GAA2BJ,CAA5B,IAAiCQ,aAArE;AACA,QAAMG,kBAAkB,GAAqB,CAAC,KAAKjB,KAAL,GAAa,KAAKD,mBAAlB,GAAwCc,aAAzC,IAA0DC,aAAvG;AACA,WAAO,IAAIV,aAAJ,CAAkBW,SAAlB,EAA6BC,SAA7B,EAAwCC,kBAAxC,EAA4DH,aAA5D,CAAP;AACH,GANM;;AAQX;AApDA,EAA2CI,qBAA3C","names":["__extends","posX","posY","estimatedModuleSize","count","_super","_this","undefined","FinderPattern","moduleSize","i","j","Math","abs","getY","getX","moduleSizeDiff","newModuleSize","combinedCount","combinedX","combinedY","combinedModuleSize","ResultPoint_1"],"sources":["../../../../src/core/qrcode/detector/FinderPattern.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}