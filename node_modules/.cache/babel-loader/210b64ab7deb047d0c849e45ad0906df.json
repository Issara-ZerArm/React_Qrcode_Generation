{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.qrcode.detector {*/\n\nvar DecodeHintType_1 = require(\"../../DecodeHintType\");\n\nvar ResultPoint_1 = require(\"../../ResultPoint\");\n\nvar FinderPattern_1 = require(\"./FinderPattern\");\n\nvar FinderPatternInfo_1 = require(\"./FinderPatternInfo\");\n\nvar NotFoundException_1 = require(\"../../NotFoundException\");\n/*import java.io.Serializable;*/\n\n/*import java.util.ArrayList;*/\n\n/*import java.util.Collections;*/\n\n/*import java.util.Comparator;*/\n\n/*import java.util.List;*/\n\n/*import java.util.Map;*/\n\n/**\n * <p>This class attempts to find finder patterns in a QR Code. Finder patterns are the square\n * markers at three corners of a QR Code.</p>\n *\n * <p>This class is thread-safe but not reentrant. Each thread must allocate its own object.\n *\n * @author Sean Owen\n */\n\n\nvar FinderPatternFinder =\n/** @class */\nfunction () {\n  /**\n   * <p>Creates a finder that will search the image for three finder patterns.</p>\n   *\n   * @param image image to search\n   */\n  // public constructor(image: BitMatrix) {\n  //   this(image, null)\n  // }\n  function FinderPatternFinder(image, resultPointCallback) {\n    this.image = image;\n    this.resultPointCallback = resultPointCallback;\n    this.possibleCenters = [];\n    this.crossCheckStateCount = new Int32Array(5);\n    this.resultPointCallback = resultPointCallback;\n  }\n\n  FinderPatternFinder.prototype.getImage = function () {\n    return this.image;\n  };\n\n  FinderPatternFinder.prototype.getPossibleCenters = function () {\n    return this.possibleCenters;\n  };\n\n  FinderPatternFinder.prototype.find = function (hints) {\n    var tryHarder = hints !== null && hints !== undefined && undefined !== hints.get(DecodeHintType_1.default.TRY_HARDER);\n    var pureBarcode = hints !== null && hints !== undefined && undefined !== hints.get(DecodeHintType_1.default.PURE_BARCODE);\n    var image = this.image;\n    var maxI = image.getHeight();\n    var maxJ = image.getWidth(); // We are looking for black/white/black/white/black modules in\n    // 1:1:3:1:1 ratio; this tracks the number of such modules seen so far\n    // Let's assume that the maximum version QR Code we support takes up 1/4 the height of the\n    // image, and then account for the center being 3 modules in size. This gives the smallest\n    // number of pixels the center could be, so skip this often. When trying harder, look for all\n    // QR versions regardless of how dense they are.\n\n    var iSkip = Math.floor(3 * maxI / (4 * FinderPatternFinder.MAX_MODULES));\n\n    if (iSkip < FinderPatternFinder.MIN_SKIP || tryHarder) {\n      iSkip = FinderPatternFinder.MIN_SKIP;\n    }\n\n    var done = false;\n    var stateCount = new Int32Array(5);\n\n    for (var i = iSkip - 1; i < maxI && !done; i += iSkip) {\n      // Get a row of black/white values\n      stateCount[0] = 0;\n      stateCount[1] = 0;\n      stateCount[2] = 0;\n      stateCount[3] = 0;\n      stateCount[4] = 0;\n      var currentState = 0;\n\n      for (var j = 0; j < maxJ; j++) {\n        if (image.get(j, i)) {\n          // Black pixel\n          if ((currentState & 1) === 1) {\n            // Counting white pixels\n            currentState++;\n          }\n\n          stateCount[currentState]++;\n        } else {\n          // White pixel\n          if ((currentState & 1) === 0) {\n            // Counting black pixels\n            if (currentState === 4) {\n              // A winner?\n              if (FinderPatternFinder.foundPatternCross(stateCount)) {\n                // Yes\n                var confirmed = this.handlePossibleCenter(stateCount, i, j, pureBarcode);\n\n                if (confirmed === true) {\n                  // Start examining every other line. Checking each line turned out to be too\n                  // expensive and didn't improve performance.\n                  iSkip = 2;\n\n                  if (this.hasSkipped === true) {\n                    done = this.haveMultiplyConfirmedCenters();\n                  } else {\n                    var rowSkip = this.findRowSkip();\n\n                    if (rowSkip > stateCount[2]) {\n                      // Skip rows between row of lower confirmed center\n                      // and top of presumed third confirmed center\n                      // but back up a bit to get a full chance of detecting\n                      // it, entire width of center of finder pattern\n                      // Skip by rowSkip, but back off by stateCount[2] (size of last center\n                      // of pattern we saw) to be conservative, and also back off by iSkip which\n                      // is about to be re-added\n                      i += rowSkip - stateCount[2] - iSkip;\n                      j = maxJ - 1;\n                    }\n                  }\n                } else {\n                  stateCount[0] = stateCount[2];\n                  stateCount[1] = stateCount[3];\n                  stateCount[2] = stateCount[4];\n                  stateCount[3] = 1;\n                  stateCount[4] = 0;\n                  currentState = 3;\n                  continue;\n                } // Clear state to start looking again\n\n\n                currentState = 0;\n                stateCount[0] = 0;\n                stateCount[1] = 0;\n                stateCount[2] = 0;\n                stateCount[3] = 0;\n                stateCount[4] = 0;\n              } else {\n                // No, shift counts back by two\n                stateCount[0] = stateCount[2];\n                stateCount[1] = stateCount[3];\n                stateCount[2] = stateCount[4];\n                stateCount[3] = 1;\n                stateCount[4] = 0;\n                currentState = 3;\n              }\n            } else {\n              stateCount[++currentState]++;\n            }\n          } else {\n            // Counting white pixels\n            stateCount[currentState]++;\n          }\n        }\n      }\n\n      if (FinderPatternFinder.foundPatternCross(stateCount)) {\n        var confirmed = this.handlePossibleCenter(stateCount, i, maxJ, pureBarcode);\n\n        if (confirmed === true) {\n          iSkip = stateCount[0];\n\n          if (this.hasSkipped) {\n            // Found a third one\n            done = this.haveMultiplyConfirmedCenters();\n          }\n        }\n      }\n    }\n\n    var patternInfo = this.selectBestPatterns();\n    ResultPoint_1.default.orderBestPatterns(patternInfo);\n    return new FinderPatternInfo_1.default(patternInfo);\n  };\n  /**\n   * Given a count of black/white/black/white/black pixels just seen and an end position,\n   * figures the location of the center of this run.\n   */\n\n\n  FinderPatternFinder.centerFromEnd = function (stateCount, end\n  /*int*/\n  ) {\n    return end - stateCount[4] - stateCount[3] - stateCount[2] / 2.0;\n  };\n  /**\n   * @param stateCount count of black/white/black/white/black pixels just read\n   * @return true iff the proportions of the counts is close enough to the 1/1/3/1/1 ratios\n   *         used by finder patterns to be considered a match\n   */\n\n\n  FinderPatternFinder.foundPatternCross = function (stateCount) {\n    var totalModuleSize = 0;\n\n    for (var i = 0; i < 5; i++) {\n      var count = stateCount[i];\n\n      if (count === 0) {\n        return false;\n      }\n\n      totalModuleSize += count;\n    }\n\n    if (totalModuleSize < 7) {\n      return false;\n    }\n\n    var moduleSize = totalModuleSize / 7.0;\n    var maxVariance = moduleSize / 2.0; // Allow less than 50% variance from 1-1-3-1-1 proportions\n\n    return Math.abs(moduleSize - stateCount[0]) < maxVariance && Math.abs(moduleSize - stateCount[1]) < maxVariance && Math.abs(3.0 * moduleSize - stateCount[2]) < 3 * maxVariance && Math.abs(moduleSize - stateCount[3]) < maxVariance && Math.abs(moduleSize - stateCount[4]) < maxVariance;\n  };\n\n  FinderPatternFinder.prototype.getCrossCheckStateCount = function () {\n    var crossCheckStateCount = this.crossCheckStateCount;\n    crossCheckStateCount[0] = 0;\n    crossCheckStateCount[1] = 0;\n    crossCheckStateCount[2] = 0;\n    crossCheckStateCount[3] = 0;\n    crossCheckStateCount[4] = 0;\n    return crossCheckStateCount;\n  };\n  /**\n   * After a vertical and horizontal scan finds a potential finder pattern, this method\n   * \"cross-cross-cross-checks\" by scanning down diagonally through the center of the possible\n   * finder pattern to see if the same proportion is detected.\n   *\n   * @param startI row where a finder pattern was detected\n   * @param centerJ center of the section that appears to cross a finder pattern\n   * @param maxCount maximum reasonable number of modules that should be\n   *  observed in any reading state, based on the results of the horizontal scan\n   * @param originalStateCountTotal The original state count total.\n   * @return true if proportions are withing expected limits\n   */\n\n\n  FinderPatternFinder.prototype.crossCheckDiagonal = function (startI\n  /*int*/\n  , centerJ\n  /*int*/\n  , maxCount\n  /*int*/\n  , originalStateCountTotal\n  /*int*/\n  ) {\n    var stateCount = this.getCrossCheckStateCount(); // Start counting up, left from center finding black center mass\n\n    var i = 0;\n    var image = this.image;\n\n    while (startI >= i && centerJ >= i && image.get(centerJ - i, startI - i)) {\n      stateCount[2]++;\n      i++;\n    }\n\n    if (startI < i || centerJ < i) {\n      return false;\n    } // Continue up, left finding white space\n\n\n    while (startI >= i && centerJ >= i && !image.get(centerJ - i, startI - i) && stateCount[1] <= maxCount) {\n      stateCount[1]++;\n      i++;\n    } // If already too many modules in this state or ran off the edge:\n\n\n    if (startI < i || centerJ < i || stateCount[1] > maxCount) {\n      return false;\n    } // Continue up, left finding black border\n\n\n    while (startI >= i && centerJ >= i && image.get(centerJ - i, startI - i) && stateCount[0] <= maxCount) {\n      stateCount[0]++;\n      i++;\n    }\n\n    if (stateCount[0] > maxCount) {\n      return false;\n    }\n\n    var maxI = image.getHeight();\n    var maxJ = image.getWidth(); // Now also count down, right from center\n\n    i = 1;\n\n    while (startI + i < maxI && centerJ + i < maxJ && image.get(centerJ + i, startI + i)) {\n      stateCount[2]++;\n      i++;\n    } // Ran off the edge?\n\n\n    if (startI + i >= maxI || centerJ + i >= maxJ) {\n      return false;\n    }\n\n    while (startI + i < maxI && centerJ + i < maxJ && !image.get(centerJ + i, startI + i) && stateCount[3] < maxCount) {\n      stateCount[3]++;\n      i++;\n    }\n\n    if (startI + i >= maxI || centerJ + i >= maxJ || stateCount[3] >= maxCount) {\n      return false;\n    }\n\n    while (startI + i < maxI && centerJ + i < maxJ && image.get(centerJ + i, startI + i) && stateCount[4] < maxCount) {\n      stateCount[4]++;\n      i++;\n    }\n\n    if (stateCount[4] >= maxCount) {\n      return false;\n    } // If we found a finder-pattern-like section, but its size is more than 100% different than\n    // the original, assume it's a false positive\n\n\n    var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];\n    return Math.abs(stateCountTotal - originalStateCountTotal) < 2 * originalStateCountTotal && FinderPatternFinder.foundPatternCross(stateCount);\n  };\n  /**\n   * <p>After a horizontal scan finds a potential finder pattern, this method\n   * \"cross-checks\" by scanning down vertically through the center of the possible\n   * finder pattern to see if the same proportion is detected.</p>\n   *\n   * @param startI row where a finder pattern was detected\n   * @param centerJ center of the section that appears to cross a finder pattern\n   * @param maxCount maximum reasonable number of modules that should be\n   * observed in any reading state, based on the results of the horizontal scan\n   * @return vertical center of finder pattern, or {@link Float#NaN} if not found\n   */\n\n\n  FinderPatternFinder.prototype.crossCheckVertical = function (startI\n  /*int*/\n  , centerJ\n  /*int*/\n  , maxCount\n  /*int*/\n  , originalStateCountTotal\n  /*int*/\n  ) {\n    var image = this.image;\n    var maxI = image.getHeight();\n    var stateCount = this.getCrossCheckStateCount(); // Start counting up from center\n\n    var i = startI;\n\n    while (i >= 0 && image.get(centerJ, i)) {\n      stateCount[2]++;\n      i--;\n    }\n\n    if (i < 0) {\n      return NaN;\n    }\n\n    while (i >= 0 && !image.get(centerJ, i) && stateCount[1] <= maxCount) {\n      stateCount[1]++;\n      i--;\n    } // If already too many modules in this state or ran off the edge:\n\n\n    if (i < 0 || stateCount[1] > maxCount) {\n      return NaN;\n    }\n\n    while (i >= 0 && image.get(centerJ, i) && stateCount[0] <= maxCount) {\n      stateCount[0]++;\n      i--;\n    }\n\n    if (stateCount[0] > maxCount) {\n      return NaN;\n    } // Now also count down from center\n\n\n    i = startI + 1;\n\n    while (i < maxI && image.get(centerJ, i)) {\n      stateCount[2]++;\n      i++;\n    }\n\n    if (i === maxI) {\n      return NaN;\n    }\n\n    while (i < maxI && !image.get(centerJ, i) && stateCount[3] < maxCount) {\n      stateCount[3]++;\n      i++;\n    }\n\n    if (i === maxI || stateCount[3] >= maxCount) {\n      return NaN;\n    }\n\n    while (i < maxI && image.get(centerJ, i) && stateCount[4] < maxCount) {\n      stateCount[4]++;\n      i++;\n    }\n\n    if (stateCount[4] >= maxCount) {\n      return NaN;\n    } // If we found a finder-pattern-like section, but its size is more than 40% different than\n    // the original, assume it's a false positive\n\n\n    var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];\n\n    if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {\n      return NaN;\n    }\n\n    return FinderPatternFinder.foundPatternCross(stateCount) ? FinderPatternFinder.centerFromEnd(stateCount, i) : NaN;\n  };\n  /**\n   * <p>Like {@link #crossCheckVertical(int, int, int, int)}, and in fact is basically identical,\n   * except it reads horizontally instead of vertically. This is used to cross-cross\n   * check a vertical cross check and locate the real center of the alignment pattern.</p>\n   */\n\n\n  FinderPatternFinder.prototype.crossCheckHorizontal = function (startJ\n  /*int*/\n  , centerI\n  /*int*/\n  , maxCount\n  /*int*/\n  , originalStateCountTotal\n  /*int*/\n  ) {\n    var image = this.image;\n    var maxJ = image.getWidth();\n    var stateCount = this.getCrossCheckStateCount();\n    var j = startJ;\n\n    while (j >= 0 && image.get(j, centerI)) {\n      stateCount[2]++;\n      j--;\n    }\n\n    if (j < 0) {\n      return NaN;\n    }\n\n    while (j >= 0 && !image.get(j, centerI) && stateCount[1] <= maxCount) {\n      stateCount[1]++;\n      j--;\n    }\n\n    if (j < 0 || stateCount[1] > maxCount) {\n      return NaN;\n    }\n\n    while (j >= 0 && image.get(j, centerI) && stateCount[0] <= maxCount) {\n      stateCount[0]++;\n      j--;\n    }\n\n    if (stateCount[0] > maxCount) {\n      return NaN;\n    }\n\n    j = startJ + 1;\n\n    while (j < maxJ && image.get(j, centerI)) {\n      stateCount[2]++;\n      j++;\n    }\n\n    if (j === maxJ) {\n      return NaN;\n    }\n\n    while (j < maxJ && !image.get(j, centerI) && stateCount[3] < maxCount) {\n      stateCount[3]++;\n      j++;\n    }\n\n    if (j === maxJ || stateCount[3] >= maxCount) {\n      return NaN;\n    }\n\n    while (j < maxJ && image.get(j, centerI) && stateCount[4] < maxCount) {\n      stateCount[4]++;\n      j++;\n    }\n\n    if (stateCount[4] >= maxCount) {\n      return NaN;\n    } // If we found a finder-pattern-like section, but its size is significantly different than\n    // the original, assume it's a false positive\n\n\n    var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];\n\n    if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= originalStateCountTotal) {\n      return NaN;\n    }\n\n    return FinderPatternFinder.foundPatternCross(stateCount) ? FinderPatternFinder.centerFromEnd(stateCount, j) : NaN;\n  };\n  /**\n   * <p>This is called when a horizontal scan finds a possible alignment pattern. It will\n   * cross check with a vertical scan, and if successful, will, ah, cross-cross-check\n   * with another horizontal scan. This is needed primarily to locate the real horizontal\n   * center of the pattern in cases of extreme skew.\n   * And then we cross-cross-cross check with another diagonal scan.</p>\n   *\n   * <p>If that succeeds the finder pattern location is added to a list that tracks\n   * the number of times each location has been nearly-matched as a finder pattern.\n   * Each additional find is more evidence that the location is in fact a finder\n   * pattern center\n   *\n   * @param stateCount reading state module counts from horizontal scan\n   * @param i row where finder pattern may be found\n   * @param j end of possible finder pattern in row\n   * @param pureBarcode true if in \"pure barcode\" mode\n   * @return true if a finder pattern candidate was found this time\n   */\n\n\n  FinderPatternFinder.prototype.handlePossibleCenter = function (stateCount, i\n  /*int*/\n  , j\n  /*int*/\n  , pureBarcode) {\n    var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];\n    var centerJ = FinderPatternFinder.centerFromEnd(stateCount, j);\n    var centerI = this.crossCheckVertical(i,\n    /*(int) */\n    Math.floor(centerJ), stateCount[2], stateCountTotal);\n\n    if (!isNaN(centerI)) {\n      // Re-cross check\n      centerJ = this.crossCheckHorizontal(\n      /*(int) */\n      Math.floor(centerJ),\n      /*(int) */\n      Math.floor(centerI), stateCount[2], stateCountTotal);\n\n      if (!isNaN(centerJ) && (!pureBarcode || this.crossCheckDiagonal(\n      /*(int) */\n      Math.floor(centerI),\n      /*(int) */\n      Math.floor(centerJ), stateCount[2], stateCountTotal))) {\n        var estimatedModuleSize = stateCountTotal / 7.0;\n        var found = false;\n        var possibleCenters = this.possibleCenters;\n\n        for (var index = 0, length_1 = possibleCenters.length; index < length_1; index++) {\n          var center = possibleCenters[index]; // Look for about the same center and module size:\n\n          if (center.aboutEquals(estimatedModuleSize, centerI, centerJ)) {\n            possibleCenters[index] = center.combineEstimate(centerI, centerJ, estimatedModuleSize);\n            found = true;\n            break;\n          }\n        }\n\n        if (!found) {\n          var point = new FinderPattern_1.default(centerJ, centerI, estimatedModuleSize);\n          possibleCenters.push(point);\n\n          if (this.resultPointCallback !== null && this.resultPointCallback !== undefined) {\n            this.resultPointCallback.foundPossibleResultPoint(point);\n          }\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * @return number of rows we could safely skip during scanning, based on the first\n   *         two finder patterns that have been located. In some cases their position will\n   *         allow us to infer that the third pattern must lie below a certain point farther\n   *         down in the image.\n   */\n\n\n  FinderPatternFinder.prototype.findRowSkip = function () {\n    var e_1, _a;\n\n    var max = this.possibleCenters.length;\n\n    if (max <= 1) {\n      return 0;\n    }\n\n    var firstConfirmedCenter = null;\n\n    try {\n      for (var _b = __values(this.possibleCenters), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var center = _c.value;\n\n        if (center.getCount() >= FinderPatternFinder.CENTER_QUORUM) {\n          if (firstConfirmedCenter == null) {\n            firstConfirmedCenter = center;\n          } else {\n            // We have two confirmed centers\n            // How far down can we skip before resuming looking for the next\n            // pattern? In the worst case, only the difference between the\n            // difference in the x / y coordinates of the two centers.\n            // This is the case where you find top left last.\n            this.hasSkipped = true;\n            return (\n              /*(int) */\n              Math.floor((Math.abs(firstConfirmedCenter.getX() - center.getX()) - Math.abs(firstConfirmedCenter.getY() - center.getY())) / 2)\n            );\n          }\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return 0;\n  };\n  /**\n   * @return true iff we have found at least 3 finder patterns that have been detected\n   *         at least {@link #CENTER_QUORUM} times each, and, the estimated module size of the\n   *         candidates is \"pretty similar\"\n   */\n\n\n  FinderPatternFinder.prototype.haveMultiplyConfirmedCenters = function () {\n    var e_2, _a, e_3, _b;\n\n    var confirmedCount = 0;\n    var totalModuleSize = 0.0;\n    var max = this.possibleCenters.length;\n\n    try {\n      for (var _c = __values(this.possibleCenters), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var pattern = _d.value;\n\n        if (pattern.getCount() >= FinderPatternFinder.CENTER_QUORUM) {\n          confirmedCount++;\n          totalModuleSize += pattern.getEstimatedModuleSize();\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    if (confirmedCount < 3) {\n      return false;\n    } // OK, we have at least 3 confirmed centers, but, it's possible that one is a \"false positive\"\n    // and that we need to keep looking. We detect this by asking if the estimated module sizes\n    // vary too much. We arbitrarily say that when the total deviation from average exceeds\n    // 5% of the total module size estimates, it's too much.\n\n\n    var average = totalModuleSize / max;\n    var totalDeviation = 0.0;\n\n    try {\n      for (var _e = __values(this.possibleCenters), _f = _e.next(); !_f.done; _f = _e.next()) {\n        var pattern = _f.value;\n        totalDeviation += Math.abs(pattern.getEstimatedModuleSize() - average);\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n\n    return totalDeviation <= 0.05 * totalModuleSize;\n  };\n  /**\n   * @return the 3 best {@link FinderPattern}s from our list of candidates. The \"best\" are\n   *         those that have been detected at least {@link #CENTER_QUORUM} times, and whose module\n   *         size differs from the average among those patterns the least\n   * @throws NotFoundException if 3 such finder patterns do not exist\n   */\n\n\n  FinderPatternFinder.prototype.selectBestPatterns = function () {\n    var e_4, _a, e_5, _b;\n\n    var startSize = this.possibleCenters.length;\n\n    if (startSize < 3) {\n      // Couldn't find enough finder patterns\n      throw new NotFoundException_1.default();\n    }\n\n    var possibleCenters = this.possibleCenters;\n    var average; // Filter outlier possibilities whose module size is too different\n\n    if (startSize > 3) {\n      // But we can only afford to do so if we have at least 4 possibilities to choose from\n      var totalModuleSize = 0.0;\n      var square = 0.0;\n\n      try {\n        for (var _c = __values(this.possibleCenters), _d = _c.next(); !_d.done; _d = _c.next()) {\n          var center = _d.value;\n          var size = center.getEstimatedModuleSize();\n          totalModuleSize += size;\n          square += size * size;\n        }\n      } catch (e_4_1) {\n        e_4 = {\n          error: e_4_1\n        };\n      } finally {\n        try {\n          if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n        } finally {\n          if (e_4) throw e_4.error;\n        }\n      }\n\n      average = totalModuleSize / startSize;\n      var stdDev = Math.sqrt(square / startSize - average * average);\n      possibleCenters.sort(\n      /**\n       * <p>Orders by furthest from average</p>\n       */\n      // FurthestFromAverageComparator implements Comparator<FinderPattern>\n      function (center1, center2) {\n        var dA = Math.abs(center2.getEstimatedModuleSize() - average);\n        var dB = Math.abs(center1.getEstimatedModuleSize() - average);\n        return dA < dB ? -1 : dA > dB ? 1 : 0;\n      });\n      var limit = Math.max(0.2 * average, stdDev);\n\n      for (var i = 0; i < possibleCenters.length && possibleCenters.length > 3; i++) {\n        var pattern = possibleCenters[i];\n\n        if (Math.abs(pattern.getEstimatedModuleSize() - average) > limit) {\n          possibleCenters.splice(i, 1);\n          i--;\n        }\n      }\n    }\n\n    if (possibleCenters.length > 3) {\n      // Throw away all but those first size candidate points we found.\n      var totalModuleSize = 0.0;\n\n      try {\n        for (var possibleCenters_1 = __values(possibleCenters), possibleCenters_1_1 = possibleCenters_1.next(); !possibleCenters_1_1.done; possibleCenters_1_1 = possibleCenters_1.next()) {\n          var possibleCenter = possibleCenters_1_1.value;\n          totalModuleSize += possibleCenter.getEstimatedModuleSize();\n        }\n      } catch (e_5_1) {\n        e_5 = {\n          error: e_5_1\n        };\n      } finally {\n        try {\n          if (possibleCenters_1_1 && !possibleCenters_1_1.done && (_b = possibleCenters_1.return)) _b.call(possibleCenters_1);\n        } finally {\n          if (e_5) throw e_5.error;\n        }\n      }\n\n      average = totalModuleSize / possibleCenters.length;\n      possibleCenters.sort(\n      /**\n       * <p>Orders by {@link FinderPattern#getCount()}, descending.</p>\n       */\n      // CenterComparator implements Comparator<FinderPattern>\n      function (center1, center2) {\n        if (center2.getCount() === center1.getCount()) {\n          var dA = Math.abs(center2.getEstimatedModuleSize() - average);\n          var dB = Math.abs(center1.getEstimatedModuleSize() - average);\n          return dA < dB ? 1 : dA > dB ? -1 : 0;\n        } else {\n          return center2.getCount() - center1.getCount();\n        }\n      });\n      possibleCenters.splice(3); // this is not realy necessary as we only return first 3 anyway\n    }\n\n    return [possibleCenters[0], possibleCenters[1], possibleCenters[2]];\n  };\n\n  FinderPatternFinder.CENTER_QUORUM = 2;\n  FinderPatternFinder.MIN_SKIP = 3; // 1 pixel/module times 3 modules/center\n\n  FinderPatternFinder.MAX_MODULES = 57; // support up to version 10 for mobile clients\n\n  return FinderPatternFinder;\n}();\n\nexports.default = FinderPatternFinder;","map":{"version":3,"mappings":"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","names":["image","resultPointCallback","possibleCenters","crossCheckStateCount","Int32Array","FinderPatternFinder","hints","tryHarder","undefined","get","DecodeHintType_1","TRY_HARDER","pureBarcode","PURE_BARCODE","maxI","getHeight","maxJ","getWidth","iSkip","Math","floor","MAX_MODULES","MIN_SKIP","done","stateCount","i","currentState","j","foundPatternCross","confirmed","handlePossibleCenter","hasSkipped","haveMultiplyConfirmedCenters","rowSkip","findRowSkip","patternInfo","selectBestPatterns","ResultPoint_1","orderBestPatterns","FinderPatternInfo_1","end","totalModuleSize","count","moduleSize","maxVariance","abs","startI","centerJ","maxCount","originalStateCountTotal","getCrossCheckStateCount","stateCountTotal","NaN","centerFromEnd","startJ","centerI","crossCheckVertical","isNaN","crossCheckHorizontal","crossCheckDiagonal","estimatedModuleSize","found","index","length_1","length","center","aboutEquals","combineEstimate","point","FinderPattern_1","push","foundPossibleResultPoint","max","firstConfirmedCenter","_c","getCount","CENTER_QUORUM","getX","getY","confirmedCount","_d","pattern","getEstimatedModuleSize","average","totalDeviation","_f","startSize","NotFoundException_1","square","size","stdDev","sqrt","sort","center1","center2","dA","dB","limit","splice","possibleCenters_1_1","possibleCenter"],"sources":["../../../../src/core/qrcode/detector/FinderPatternFinder.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}