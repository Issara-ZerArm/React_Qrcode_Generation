{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2013 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // package com.google.zxing.pdf417.decoder;\n// import java.util.Formatter;\n\nvar Formatter_1 = require(\"../../util/Formatter\");\n\nvar BoundingBox_1 = require(\"./BoundingBox\");\n/**\n * @author Guenther Grau\n */\n\n\nvar DetectionResultColumn =\n/** @class */\nfunction () {\n  function DetectionResultColumn(boundingBox) {\n    this.boundingBox = new BoundingBox_1.default(boundingBox); // this.codewords = new Codeword[boundingBox.getMaxY() - boundingBox.getMinY() + 1];\n\n    this.codewords = new Array(boundingBox.getMaxY() - boundingBox.getMinY() + 1);\n  }\n  /*final*/\n\n\n  DetectionResultColumn.prototype.getCodewordNearby = function (imageRow) {\n    var codeword = this.getCodeword(imageRow);\n\n    if (codeword != null) {\n      return codeword;\n    }\n\n    for (var i = 1; i < DetectionResultColumn.MAX_NEARBY_DISTANCE; i++) {\n      var nearImageRow = this.imageRowToCodewordIndex(imageRow) - i;\n\n      if (nearImageRow >= 0) {\n        codeword = this.codewords[nearImageRow];\n\n        if (codeword != null) {\n          return codeword;\n        }\n      }\n\n      nearImageRow = this.imageRowToCodewordIndex(imageRow) + i;\n\n      if (nearImageRow < this.codewords.length) {\n        codeword = this.codewords[nearImageRow];\n\n        if (codeword != null) {\n          return codeword;\n        }\n      }\n    }\n\n    return null;\n  };\n  /*final int*/\n\n\n  DetectionResultColumn.prototype.imageRowToCodewordIndex = function (imageRow) {\n    return imageRow - this.boundingBox.getMinY();\n  };\n  /*final void*/\n\n\n  DetectionResultColumn.prototype.setCodeword = function (imageRow, codeword) {\n    this.codewords[this.imageRowToCodewordIndex(imageRow)] = codeword;\n  };\n  /*final*/\n\n\n  DetectionResultColumn.prototype.getCodeword = function (imageRow) {\n    return this.codewords[this.imageRowToCodewordIndex(imageRow)];\n  };\n  /*final*/\n\n\n  DetectionResultColumn.prototype.getBoundingBox = function () {\n    return this.boundingBox;\n  };\n  /*final*/\n\n\n  DetectionResultColumn.prototype.getCodewords = function () {\n    return this.codewords;\n  }; // @Override\n\n\n  DetectionResultColumn.prototype.toString = function () {\n    var e_1, _a;\n\n    var formatter = new Formatter_1.default();\n    var row = 0;\n\n    try {\n      for (var _b = __values(this.codewords), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var codeword = _c.value;\n\n        if (codeword == null) {\n          formatter.format('%3d:    |   %n', row++);\n          continue;\n        }\n\n        formatter.format('%3d: %3d|%3d%n', row++, codeword.getRowNumber(), codeword.getValue());\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return formatter.toString();\n  };\n\n  DetectionResultColumn.MAX_NEARBY_DISTANCE = 5;\n  return DetectionResultColumn;\n}();\n\nexports.default = DetectionResultColumn;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAgBA;AAEA;;AACA;;AAGA;AAIA;;;;;AAGA;AAAA;AAAA;AAOI,iCAAYA,WAAZ,EAAoC;AAChC,SAAKA,WAAL,GAAmB,IAAIC,qBAAJ,CAAgBD,WAAhB,CAAnB,CADgC,CAEhC;;AACA,SAAKE,SAAL,GAAiB,IAAIC,KAAJ,CAAoBH,WAAW,CAACI,OAAZ,KAAwBJ,WAAW,CAACK,OAAZ,EAAxB,GAAgD,CAApE,CAAjB;AACH;AAED;;;AAAWC,gEAAkBC,QAAlB,EAA+B;AACtC,QAAIC,QAAQ,GAAG,KAAKC,WAAL,CAAiBF,QAAjB,CAAf;;AACA,QAAIC,QAAQ,IAAI,IAAhB,EAAsB;AAClB,aAAOA,QAAP;AACH;;AACD,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,qBAAqB,CAACK,mBAA1C,EAA+DD,CAAC,EAAhE,EAAoE;AAChE,UAAIE,YAAY,GAAG,KAAKC,uBAAL,CAA6BN,QAA7B,IAAyCG,CAA5D;;AACA,UAAIE,YAAY,IAAI,CAApB,EAAuB;AACnBJ,gBAAQ,GAAG,KAAKN,SAAL,CAAeU,YAAf,CAAX;;AACA,YAAIJ,QAAQ,IAAI,IAAhB,EAAsB;AAClB,iBAAOA,QAAP;AACH;AACJ;;AACDI,kBAAY,GAAG,KAAKC,uBAAL,CAA6BN,QAA7B,IAAyCG,CAAxD;;AACA,UAAIE,YAAY,GAAG,KAAKV,SAAL,CAAeY,MAAlC,EAA0C;AACtCN,gBAAQ,GAAG,KAAKN,SAAL,CAAeU,YAAf,CAAX;;AACA,YAAIJ,QAAQ,IAAI,IAAhB,EAAsB;AAClB,iBAAOA,QAAP;AACH;AACJ;AACJ;;AACD,WAAO,IAAP;AACH,GAtBU;AAwBX;;;AAAcF,sEAAwBC,QAAxB,EAAqC;AAC/C,WAAOA,QAAQ,GAAG,KAAKP,WAAL,CAAiBK,OAAjB,EAAlB;AACH,GAFa;AAId;;;AAAeC,0DAAYC,QAAZ,EAA2BC,QAA3B,EAA6C;AACxD,SAAKN,SAAL,CAAe,KAAKW,uBAAL,CAA6BN,QAA7B,CAAf,IAAyDC,QAAzD;AACH,GAFc;AAInB;;;AAAUF,0DAAYC,QAAZ,EAAyB;AAC3B,WAAO,KAAKL,SAAL,CAAe,KAAKW,uBAAL,CAA6BN,QAA7B,CAAf,CAAP;AACH,GAFK;AAIV;;;AAAUD;AACF,WAAO,KAAKN,WAAZ;AACH,GAFK;AAIV;;;AAAUM;AACF,WAAO,KAAKJ,SAAZ;AACH,GAFK,CArDV,CAyDI;;;AACOI,6CAAP;;;AACI,QAAMS,SAAS,GAAG,IAAIC,mBAAJ,EAAlB;AACA,QAAIC,GAAG,GAAG,CAAV;;;AACA,WAAuB,uBAAKf,SAAL,GAAcgB,cAArC,EAAqC,QAArC,EAAqCA,cAArC,EAAuC;AAAlC,YAAMV,QAAQ,WAAd;;AACD,YAAIA,QAAQ,IAAI,IAAhB,EAAsB;AAClBO,mBAAS,CAACI,MAAV,CAAiB,gBAAjB,EAAmCF,GAAG,EAAtC;AACA;AACH;;AACDF,iBAAS,CAACI,MAAV,CAAiB,gBAAjB,EAAmCF,GAAG,EAAtC,EAA0CT,QAAQ,CAACY,YAAT,EAA1C,EAAmEZ,QAAQ,CAACa,QAAT,EAAnE;AACH;;;;;;;;;;;;;AACD,WAAON,SAAS,CAACO,QAAV,EAAP;AAEH,GAZM;;AAxDkBhB,8CAA2B,CAA3B;AAsE7B;AAxEA;;kBAAqBA","names":["boundingBox","BoundingBox_1","codewords","Array","getMaxY","getMinY","DetectionResultColumn","imageRow","codeword","getCodeword","i","MAX_NEARBY_DISTANCE","nearImageRow","imageRowToCodewordIndex","length","formatter","Formatter_1","row","_c","format","getRowNumber","getValue","toString"],"sources":["../../../../src/core/pdf417/decoder/DetectionResultColumn.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}