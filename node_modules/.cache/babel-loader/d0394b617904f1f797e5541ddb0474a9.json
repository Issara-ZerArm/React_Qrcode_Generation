{"ast":null,"code":"\"use strict\";\n/*\n * Copyright (C) 2010 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.common {*/\n\n/*import java.nio.charset.Charset;*/\n\n/*import java.util.Map;*/\n\nvar DecodeHintType_1 = require(\"../DecodeHintType\");\n\nvar CharacterSetECI_1 = require(\"./CharacterSetECI\");\n\nvar StringEncoding_1 = require(\"../util/StringEncoding\");\n/**\n * Common string-related functions.\n *\n * @author Sean Owen\n * @author Alex Dupre\n */\n\n\nvar StringUtils =\n/** @class */\nfunction () {\n  function StringUtils() {} // SHIFT_JIS.equalsIgnoreCase(PLATFORM_DEFAULT_ENCODING) ||\n  // EUC_JP.equalsIgnoreCase(PLATFORM_DEFAULT_ENCODING);\n\n\n  StringUtils.castAsNonUtf8Char = function (code, encoding) {\n    if (encoding === void 0) {\n      encoding = null;\n    } // ISO 8859-1 is the Java default as UTF-8 is JavaScripts\n    // you can see this method as a Java version of String.fromCharCode\n\n\n    var e = encoding ? encoding.getName() : this.ISO88591; // use passed format (fromCharCode will return UTF8 encoding)\n\n    return StringEncoding_1.default.decode(new Uint8Array([code]), e);\n  };\n  /**\n   * @param bytes bytes encoding a string, whose encoding should be guessed\n   * @param hints decode hints if applicable\n   * @return name of guessed encoding; at the moment will only guess one of:\n   *  {@link #SHIFT_JIS}, {@link #UTF8}, {@link #ISO88591}, or the platform\n   *  default encoding if none of these can possibly be correct\n   */\n\n\n  StringUtils.guessEncoding = function (bytes, hints) {\n    if (hints !== null && hints !== undefined && undefined !== hints.get(DecodeHintType_1.default.CHARACTER_SET)) {\n      return hints.get(DecodeHintType_1.default.CHARACTER_SET).toString();\n    } // For now, merely tries to distinguish ISO-8859-1, UTF-8 and Shift_JIS,\n    // which should be by far the most common encodings.\n\n\n    var length = bytes.length;\n    var canBeISO88591 = true;\n    var canBeShiftJIS = true;\n    var canBeUTF8 = true;\n    var utf8BytesLeft = 0; // int utf8LowChars = 0\n\n    var utf2BytesChars = 0;\n    var utf3BytesChars = 0;\n    var utf4BytesChars = 0;\n    var sjisBytesLeft = 0; // int sjisLowChars = 0\n\n    var sjisKatakanaChars = 0; // int sjisDoubleBytesChars = 0\n\n    var sjisCurKatakanaWordLength = 0;\n    var sjisCurDoubleBytesWordLength = 0;\n    var sjisMaxKatakanaWordLength = 0;\n    var sjisMaxDoubleBytesWordLength = 0; // int isoLowChars = 0\n    // int isoHighChars = 0\n\n    var isoHighOther = 0;\n    var utf8bom = bytes.length > 3 && bytes[0] ===\n    /*(byte) */\n    0xEF && bytes[1] ===\n    /*(byte) */\n    0xBB && bytes[2] ===\n    /*(byte) */\n    0xBF;\n\n    for (var i = 0; i < length && (canBeISO88591 || canBeShiftJIS || canBeUTF8); i++) {\n      var value = bytes[i] & 0xFF; // UTF-8 stuff\n\n      if (canBeUTF8) {\n        if (utf8BytesLeft > 0) {\n          if ((value & 0x80) === 0) {\n            canBeUTF8 = false;\n          } else {\n            utf8BytesLeft--;\n          }\n        } else if ((value & 0x80) !== 0) {\n          if ((value & 0x40) === 0) {\n            canBeUTF8 = false;\n          } else {\n            utf8BytesLeft++;\n\n            if ((value & 0x20) === 0) {\n              utf2BytesChars++;\n            } else {\n              utf8BytesLeft++;\n\n              if ((value & 0x10) === 0) {\n                utf3BytesChars++;\n              } else {\n                utf8BytesLeft++;\n\n                if ((value & 0x08) === 0) {\n                  utf4BytesChars++;\n                } else {\n                  canBeUTF8 = false;\n                }\n              }\n            }\n          }\n        } // else {\n        // utf8LowChars++\n        // }\n\n      } // ISO-8859-1 stuff\n\n\n      if (canBeISO88591) {\n        if (value > 0x7F && value < 0xA0) {\n          canBeISO88591 = false;\n        } else if (value > 0x9F) {\n          if (value < 0xC0 || value === 0xD7 || value === 0xF7) {\n            isoHighOther++;\n          } // else {\n          // isoHighChars++\n          // }\n\n        } // else {\n        // isoLowChars++\n        // }\n\n      } // Shift_JIS stuff\n\n\n      if (canBeShiftJIS) {\n        if (sjisBytesLeft > 0) {\n          if (value < 0x40 || value === 0x7F || value > 0xFC) {\n            canBeShiftJIS = false;\n          } else {\n            sjisBytesLeft--;\n          }\n        } else if (value === 0x80 || value === 0xA0 || value > 0xEF) {\n          canBeShiftJIS = false;\n        } else if (value > 0xA0 && value < 0xE0) {\n          sjisKatakanaChars++;\n          sjisCurDoubleBytesWordLength = 0;\n          sjisCurKatakanaWordLength++;\n\n          if (sjisCurKatakanaWordLength > sjisMaxKatakanaWordLength) {\n            sjisMaxKatakanaWordLength = sjisCurKatakanaWordLength;\n          }\n        } else if (value > 0x7F) {\n          sjisBytesLeft++; // sjisDoubleBytesChars++\n\n          sjisCurKatakanaWordLength = 0;\n          sjisCurDoubleBytesWordLength++;\n\n          if (sjisCurDoubleBytesWordLength > sjisMaxDoubleBytesWordLength) {\n            sjisMaxDoubleBytesWordLength = sjisCurDoubleBytesWordLength;\n          }\n        } else {\n          // sjisLowChars++\n          sjisCurKatakanaWordLength = 0;\n          sjisCurDoubleBytesWordLength = 0;\n        }\n      }\n    }\n\n    if (canBeUTF8 && utf8BytesLeft > 0) {\n      canBeUTF8 = false;\n    }\n\n    if (canBeShiftJIS && sjisBytesLeft > 0) {\n      canBeShiftJIS = false;\n    } // Easy -- if there is BOM or at least 1 valid not-single byte character (and no evidence it can't be UTF-8), done\n\n\n    if (canBeUTF8 && (utf8bom || utf2BytesChars + utf3BytesChars + utf4BytesChars > 0)) {\n      return StringUtils.UTF8;\n    } // Easy -- if assuming Shift_JIS or at least 3 valid consecutive not-ascii characters (and no evidence it can't be), done\n\n\n    if (canBeShiftJIS && (StringUtils.ASSUME_SHIFT_JIS || sjisMaxKatakanaWordLength >= 3 || sjisMaxDoubleBytesWordLength >= 3)) {\n      return StringUtils.SHIFT_JIS;\n    } // Distinguishing Shift_JIS and ISO-8859-1 can be a little tough for short words. The crude heuristic is:\n    // - If we saw\n    //   - only two consecutive katakana chars in the whole text, or\n    //   - at least 10% of bytes that could be \"upper\" not-alphanumeric Latin1,\n    // - then we conclude Shift_JIS, else ISO-8859-1\n\n\n    if (canBeISO88591 && canBeShiftJIS) {\n      return sjisMaxKatakanaWordLength === 2 && sjisKatakanaChars === 2 || isoHighOther * 10 >= length ? StringUtils.SHIFT_JIS : StringUtils.ISO88591;\n    } // Otherwise, try in order ISO-8859-1, Shift JIS, UTF-8 and fall back to default platform encoding\n\n\n    if (canBeISO88591) {\n      return StringUtils.ISO88591;\n    }\n\n    if (canBeShiftJIS) {\n      return StringUtils.SHIFT_JIS;\n    }\n\n    if (canBeUTF8) {\n      return StringUtils.UTF8;\n    } // Otherwise, we take a wild guess with platform encoding\n\n\n    return StringUtils.PLATFORM_DEFAULT_ENCODING;\n  };\n  /**\n   *\n   * @see https://stackoverflow.com/a/13439711/4367683\n   *\n   * @param append The new string to append.\n   * @param args Argumets values to be formated.\n   */\n\n\n  StringUtils.format = function (append) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    var i = -1;\n\n    function callback(exp, p0, p1, p2, p3, p4) {\n      if (exp === '%%') return '%';\n      if (args[++i] === undefined) return undefined;\n      exp = p2 ? parseInt(p2.substr(1)) : undefined;\n      var base = p3 ? parseInt(p3.substr(1)) : undefined;\n      var val;\n\n      switch (p4) {\n        case 's':\n          val = args[i];\n          break;\n\n        case 'c':\n          val = args[i][0];\n          break;\n\n        case 'f':\n          val = parseFloat(args[i]).toFixed(exp);\n          break;\n\n        case 'p':\n          val = parseFloat(args[i]).toPrecision(exp);\n          break;\n\n        case 'e':\n          val = parseFloat(args[i]).toExponential(exp);\n          break;\n\n        case 'x':\n          val = parseInt(args[i]).toString(base ? base : 16);\n          break;\n\n        case 'd':\n          val = parseFloat(parseInt(args[i], base ? base : 10).toPrecision(exp)).toFixed(0);\n          break;\n      }\n\n      val = typeof val === 'object' ? JSON.stringify(val) : (+val).toString(base);\n      var size = parseInt(p1);\n      /* padding size */\n\n      var ch = p1 && p1[0] + '' === '0' ? '0' : ' ';\n      /* isnull? */\n\n      while (val.length < size) val = p0 !== undefined ? val + ch : ch + val;\n      /* isminus? */\n\n\n      return val;\n    }\n\n    var regex = /%(-)?(0?[0-9]+)?([.][0-9]+)?([#][0-9]+)?([scfpexd%])/g;\n    return append.replace(regex, callback);\n  };\n  /**\n   *\n   */\n\n\n  StringUtils.getBytes = function (str, encoding) {\n    return StringEncoding_1.default.encode(str, encoding);\n  };\n  /**\n   * Returns the charcode at the specified index or at index zero.\n   */\n\n\n  StringUtils.getCharCode = function (str, index) {\n    if (index === void 0) {\n      index = 0;\n    }\n\n    return str.charCodeAt(index);\n  };\n  /**\n   * Returns char for given charcode\n   */\n\n\n  StringUtils.getCharAt = function (charCode) {\n    return String.fromCharCode(charCode);\n  };\n\n  StringUtils.SHIFT_JIS = CharacterSetECI_1.default.SJIS.getName(); // \"SJIS\"\n\n  StringUtils.GB2312 = 'GB2312';\n  StringUtils.ISO88591 = CharacterSetECI_1.default.ISO8859_1.getName(); // \"ISO8859_1\"\n\n  StringUtils.EUC_JP = 'EUC_JP';\n  StringUtils.UTF8 = CharacterSetECI_1.default.UTF8.getName(); // \"UTF8\"\n\n  StringUtils.PLATFORM_DEFAULT_ENCODING = StringUtils.UTF8; // \"UTF8\"//Charset.defaultCharset().name()\n\n  StringUtils.ASSUME_SHIFT_JIS = false;\n  return StringUtils;\n}();\n\nexports.default = StringUtils;","map":{"version":3,"mappings":"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","names":["StringUtils","code","encoding","e","getName","ISO88591","StringEncoding_1","decode","Uint8Array","bytes","hints","undefined","get","DecodeHintType_1","CHARACTER_SET","toString","length","canBeISO88591","canBeShiftJIS","canBeUTF8","utf8BytesLeft","utf2BytesChars","utf3BytesChars","utf4BytesChars","sjisBytesLeft","sjisKatakanaChars","sjisCurKatakanaWordLength","sjisCurDoubleBytesWordLength","sjisMaxKatakanaWordLength","sjisMaxDoubleBytesWordLength","isoHighOther","utf8bom","i","value","UTF8","ASSUME_SHIFT_JIS","SHIFT_JIS","PLATFORM_DEFAULT_ENCODING","append","args","callback","exp","p0","p1","p2","p3","p4","parseInt","substr","base","val","parseFloat","toFixed","toPrecision","toExponential","JSON","stringify","size","ch","regex","replace","str","encode","index","charCodeAt","charCode","String","fromCharCode","CharacterSetECI_1","SJIS","ISO8859_1"],"sources":["../../../src/core/common/StringUtils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}