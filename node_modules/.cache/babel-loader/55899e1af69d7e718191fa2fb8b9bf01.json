{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar BarcodeFormat_1 = require(\"../BarcodeFormat\");\n\nvar DecodeHintType_1 = require(\"../DecodeHintType\");\n\nvar OneDReader_1 = require(\"./OneDReader\");\n\nvar EAN13Reader_1 = require(\"./EAN13Reader\");\n\nvar EAN8Reader_1 = require(\"./EAN8Reader\");\n\nvar NotFoundException_1 = require(\"../NotFoundException\");\n/**\n * <p>A reader that can read all available UPC/EAN formats. If a caller wants to try to\n * read all such formats, it is most efficient to use this implementation rather than invoke\n * individual readers.</p>\n *\n * @author Sean Owen\n */\n\n\nvar MultiFormatUPCEANReader =\n/** @class */\nfunction (_super) {\n  __extends(MultiFormatUPCEANReader, _super);\n\n  function MultiFormatUPCEANReader(hints) {\n    var _this = _super.call(this) || this;\n\n    var possibleFormats = hints == null ? null : hints.get(DecodeHintType_1.default.POSSIBLE_FORMATS);\n    var readers = [];\n\n    if (possibleFormats != null) {\n      if (possibleFormats.indexOf(BarcodeFormat_1.default.EAN_13) > -1) {\n        readers.push(new EAN13Reader_1.default());\n      }\n\n      if (possibleFormats.indexOf(BarcodeFormat_1.default.EAN_8) > -1) {\n        readers.push(new EAN8Reader_1.default());\n      } // todo add UPC_A, UPC_E\n\n    }\n\n    if (readers.length === 0) {\n      readers.push(new EAN13Reader_1.default());\n      readers.push(new EAN8Reader_1.default()); // todo add UPC_A, UPC_E\n    }\n\n    _this.readers = readers;\n    return _this;\n  }\n\n  MultiFormatUPCEANReader.prototype.decodeRow = function (rowNumber, row, hints) {\n    var e_1, _a;\n\n    try {\n      for (var _b = __values(this.readers), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var reader = _c.value;\n\n        try {\n          return reader.decodeRow(rowNumber, row, hints); // TODO ean13MayBeUPCA\n        } catch (err) {// continue;\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    throw new NotFoundException_1.default();\n  };\n\n  MultiFormatUPCEANReader.prototype.reset = function () {\n    var e_2, _a;\n\n    try {\n      for (var _b = __values(this.readers), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var reader = _c.value;\n        reader.reset();\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n  };\n\n  return MultiFormatUPCEANReader;\n}(OneDReader_1.default);\n\nexports.default = MultiFormatUPCEANReader;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA;;AAEA;;AAGA;;AAEA;;AACA;;AACA;AAEA;;;;;;;;;AAOA;AAAA;AAAA;AAAqDA;;AAGjD,mCAAmBC,KAAnB,EAAmD;AAAnD,gBACIC,qBAAO,IADX;;AAEI,QAAIC,eAAe,GAAGF,KAAK,IAAI,IAAT,GAAgB,IAAhB,GAAwCA,KAAK,CAACG,GAAN,CAAUC,yBAAeC,gBAAzB,CAA9D;AACA,QAAIC,OAAO,GAAmB,EAA9B;;AACA,QAAIJ,eAAe,IAAI,IAAvB,EAA6B;AACzB,UAAIA,eAAe,CAACK,OAAhB,CAAwBC,wBAAcC,MAAtC,IAAgD,CAAC,CAArD,EAAwD;AACpDH,eAAO,CAACI,IAAR,CAAa,IAAIC,qBAAJ,EAAb;AACH;;AAED,UAAIT,eAAe,CAACK,OAAhB,CAAwBC,wBAAcI,KAAtC,IAA+C,CAAC,CAApD,EAAuD;AACnDN,eAAO,CAACI,IAAR,CAAa,IAAIG,oBAAJ,EAAb;AACH,OAPwB,CAQzB;;AACH;;AAED,QAAIP,OAAO,CAACQ,MAAR,KAAmB,CAAvB,EAA0B;AACtBR,aAAO,CAACI,IAAR,CAAa,IAAIC,qBAAJ,EAAb;AACAL,aAAO,CAACI,IAAR,CAAa,IAAIG,oBAAJ,EAAb,EAFsB,CAGtB;AACH;;AAEDE,SAAI,CAACT,OAAL,GAAeA,OAAf;;AACH;;AAEMU,gDAAP,UAAiBC,SAAjB,EAAoCC,GAApC,EAAmDlB,KAAnD,EAAmF;;;;AAC/E,WAAmB,uBAAKM,OAAL,GAAYa,cAA/B,EAA+B,QAA/B,EAA+BA,cAA/B,EAAiC;AAA5B,YAAIC,MAAM,WAAV;;AACD,YAAI;AACA,iBAAOA,MAAM,CAACC,SAAP,CAAiBJ,SAAjB,EAA4BC,GAA5B,EAAiClB,KAAjC,CAAP,CADA,CAEA;AACH,SAHD,CAGE,OAAOsB,GAAP,EAAY,CACV;AACH;AACJ;;;;;;;;;;;;;AACD,UAAM,IAAIC,2BAAJ,EAAN;AACH,GAVM;;AAYAP,4CAAP;;;;AACI,WAAmB,uBAAKV,OAAL,GAAYa,cAA/B,EAA+B,QAA/B,EAA+BA,cAA/B,EAAiC;AAA5B,YAAIC,MAAM,WAAV;AACDA,cAAM,CAACI,KAAP;AACH;;;;;;;;;;;;AACJ,GAJM;;AAKX;AA5CA,EAAqDC,oBAArD","names":["__extends","hints","_super","possibleFormats","get","DecodeHintType_1","POSSIBLE_FORMATS","readers","indexOf","BarcodeFormat_1","EAN_13","push","EAN13Reader_1","EAN_8","EAN8Reader_1","length","_this","MultiFormatUPCEANReader","rowNumber","row","_c","reader","decodeRow","err","NotFoundException_1","reset","OneDReader_1"],"sources":["../../../src/core/oned/MultiFormatUPCEANReader.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}