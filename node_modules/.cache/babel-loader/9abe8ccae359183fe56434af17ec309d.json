{"ast":null,"code":"\"use strict\";\n/*\n* Copyright 2012 ZXing authors\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*      http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // package com.google.zxing.pdf417.decoder.ec;\n\nvar IllegalArgumentException_1 = require(\"../../../IllegalArgumentException\");\n\nvar System_1 = require(\"../../../util/System\");\n\nvar StringBuilder_1 = require(\"../../../util/StringBuilder\");\n/**\n * @author Sean Owen\n * @see com.google.zxing.common.reedsolomon.GenericGFPoly\n */\n\n\nvar ModulusPoly =\n/** @class */\nfunction () {\n  function ModulusPoly(field, coefficients) {\n    if (coefficients.length === 0) {\n      throw new IllegalArgumentException_1.default();\n    }\n\n    this.field = field;\n    var coefficientsLength =\n    /*int*/\n    coefficients.length;\n\n    if (coefficientsLength > 1 && coefficients[0] === 0) {\n      // Leading term must be non-zero for anything except the constant polynomial \"0\"\n      var firstNonZero =\n      /*int*/\n      1;\n\n      while (firstNonZero < coefficientsLength && coefficients[firstNonZero] === 0) {\n        firstNonZero++;\n      }\n\n      if (firstNonZero === coefficientsLength) {\n        this.coefficients = new Int32Array([0]);\n      } else {\n        this.coefficients = new Int32Array(coefficientsLength - firstNonZero);\n        System_1.default.arraycopy(coefficients, firstNonZero, this.coefficients, 0, this.coefficients.length);\n      }\n    } else {\n      this.coefficients = coefficients;\n    }\n  }\n\n  ModulusPoly.prototype.getCoefficients = function () {\n    return this.coefficients;\n  };\n  /**\n   * @return degree of this polynomial\n   */\n\n\n  ModulusPoly.prototype.getDegree = function () {\n    return this.coefficients.length - 1;\n  };\n  /**\n   * @return true iff this polynomial is the monomial \"0\"\n   */\n\n\n  ModulusPoly.prototype.isZero = function () {\n    return this.coefficients[0] === 0;\n  };\n  /**\n   * @return coefficient of x^degree term in this polynomial\n   */\n\n\n  ModulusPoly.prototype.getCoefficient = function (degree) {\n    return this.coefficients[this.coefficients.length - 1 - degree];\n  };\n  /**\n   * @return evaluation of this polynomial at a given point\n   */\n\n\n  ModulusPoly.prototype.evaluateAt = function (a) {\n    var e_1, _a;\n\n    if (a === 0) {\n      // Just return the x^0 coefficient\n      return this.getCoefficient(0);\n    }\n\n    if (a === 1) {\n      // Just the sum of the coefficients\n      var sum =\n      /*int*/\n      0;\n\n      try {\n        for (var _b = __values(this.coefficients), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var coefficient = _c.value\n          /*int*/\n          ;\n          sum = this.field.add(sum, coefficient);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      return sum;\n    }\n\n    var result =\n    /*int*/\n    this.coefficients[0];\n    var size =\n    /*int*/\n    this.coefficients.length;\n\n    for (var i\n    /*int*/\n    = 1; i < size; i++) {\n      result = this.field.add(this.field.multiply(a, result), this.coefficients[i]);\n    }\n\n    return result;\n  };\n\n  ModulusPoly.prototype.add = function (other) {\n    if (!this.field.equals(other.field)) {\n      throw new IllegalArgumentException_1.default('ModulusPolys do not have same ModulusGF field');\n    }\n\n    if (this.isZero()) {\n      return other;\n    }\n\n    if (other.isZero()) {\n      return this;\n    }\n\n    var smallerCoefficients = this.coefficients;\n    var largerCoefficients = other.coefficients;\n\n    if (smallerCoefficients.length > largerCoefficients.length) {\n      var temp = smallerCoefficients;\n      smallerCoefficients = largerCoefficients;\n      largerCoefficients = temp;\n    }\n\n    var sumDiff = new Int32Array(largerCoefficients.length);\n    var lengthDiff =\n    /*int*/\n    largerCoefficients.length - smallerCoefficients.length; // Copy high-order terms only found in higher-degree polynomial's coefficients\n\n    System_1.default.arraycopy(largerCoefficients, 0, sumDiff, 0, lengthDiff);\n\n    for (var i\n    /*int*/\n    = lengthDiff; i < largerCoefficients.length; i++) {\n      sumDiff[i] = this.field.add(smallerCoefficients[i - lengthDiff], largerCoefficients[i]);\n    }\n\n    return new ModulusPoly(this.field, sumDiff);\n  };\n\n  ModulusPoly.prototype.subtract = function (other) {\n    if (!this.field.equals(other.field)) {\n      throw new IllegalArgumentException_1.default('ModulusPolys do not have same ModulusGF field');\n    }\n\n    if (other.isZero()) {\n      return this;\n    }\n\n    return this.add(other.negative());\n  };\n\n  ModulusPoly.prototype.multiply = function (other) {\n    if (other instanceof ModulusPoly) {\n      return this.multiplyOther(other);\n    }\n\n    return this.multiplyScalar(other);\n  };\n\n  ModulusPoly.prototype.multiplyOther = function (other) {\n    if (!this.field.equals(other.field)) {\n      throw new IllegalArgumentException_1.default('ModulusPolys do not have same ModulusGF field');\n    }\n\n    if (this.isZero() || other.isZero()) {\n      // return this.field.getZero();\n      return new ModulusPoly(this.field, new Int32Array([0]));\n    }\n\n    var aCoefficients = this.coefficients;\n    var aLength =\n    /*int*/\n    aCoefficients.length;\n    var bCoefficients = other.coefficients;\n    var bLength =\n    /*int*/\n    bCoefficients.length;\n    var product = new Int32Array(aLength + bLength - 1);\n\n    for (var i\n    /*int*/\n    = 0; i < aLength; i++) {\n      var aCoeff =\n      /*int*/\n      aCoefficients[i];\n\n      for (var j\n      /*int*/\n      = 0; j < bLength; j++) {\n        product[i + j] = this.field.add(product[i + j], this.field.multiply(aCoeff, bCoefficients[j]));\n      }\n    }\n\n    return new ModulusPoly(this.field, product);\n  };\n\n  ModulusPoly.prototype.negative = function () {\n    var size =\n    /*int*/\n    this.coefficients.length;\n    var negativeCoefficients = new Int32Array(size);\n\n    for (var i\n    /*int*/\n    = 0; i < size; i++) {\n      negativeCoefficients[i] = this.field.subtract(0, this.coefficients[i]);\n    }\n\n    return new ModulusPoly(this.field, negativeCoefficients);\n  };\n\n  ModulusPoly.prototype.multiplyScalar = function (scalar) {\n    if (scalar === 0) {\n      return new ModulusPoly(this.field, new Int32Array([0]));\n    }\n\n    if (scalar === 1) {\n      return this;\n    }\n\n    var size =\n    /*int*/\n    this.coefficients.length;\n    var product = new Int32Array(size);\n\n    for (var i\n    /*int*/\n    = 0; i < size; i++) {\n      product[i] = this.field.multiply(this.coefficients[i], scalar);\n    }\n\n    return new ModulusPoly(this.field, product);\n  };\n\n  ModulusPoly.prototype.multiplyByMonomial = function (degree, coefficient) {\n    if (degree < 0) {\n      throw new IllegalArgumentException_1.default();\n    }\n\n    if (coefficient === 0) {\n      return new ModulusPoly(this.field, new Int32Array([0]));\n    }\n\n    var size =\n    /*int*/\n    this.coefficients.length;\n    var product = new Int32Array(size + degree);\n\n    for (var i\n    /*int*/\n    = 0; i < size; i++) {\n      product[i] = this.field.multiply(this.coefficients[i], coefficient);\n    }\n\n    return new ModulusPoly(this.field, product);\n  };\n  /*\n  ModulusPoly[] divide(other: ModulusPoly) {\n    if (!field.equals(other.field)) {\n      throw new IllegalArgumentException(\"ModulusPolys do not have same ModulusGF field\");\n    }\n    if (other.isZero()) {\n      throw new IllegalArgumentException(\"Divide by 0\");\n    }\n       let quotient: ModulusPoly = field.getZero();\n    let remainder: ModulusPoly = this;\n       let denominatorLeadingTerm: /*int/ number = other.getCoefficient(other.getDegree());\n    let inverseDenominatorLeadingTerm: /*int/ number = field.inverse(denominatorLeadingTerm);\n       while (remainder.getDegree() >= other.getDegree() && !remainder.isZero()) {\n      let degreeDifference: /*int/ number = remainder.getDegree() - other.getDegree();\n      let scale: /*int/ number = field.multiply(remainder.getCoefficient(remainder.getDegree()), inverseDenominatorLeadingTerm);\n      let term: ModulusPoly = other.multiplyByMonomial(degreeDifference, scale);\n      let iterationQuotient: ModulusPoly = field.buildMonomial(degreeDifference, scale);\n      quotient = quotient.add(iterationQuotient);\n      remainder = remainder.subtract(term);\n    }\n       return new ModulusPoly[] { quotient, remainder };\n  }\n  */\n  // @Override\n\n\n  ModulusPoly.prototype.toString = function () {\n    var result = new StringBuilder_1.default(); // dynamic string size in JS\n\n    for (var degree\n    /*int*/\n    = this.getDegree(); degree >= 0; degree--) {\n      var coefficient =\n      /*int*/\n      this.getCoefficient(degree);\n\n      if (coefficient !== 0) {\n        if (coefficient < 0) {\n          result.append(' - ');\n          coefficient = -coefficient;\n        } else {\n          if (result.length() > 0) {\n            result.append(' + ');\n          }\n        }\n\n        if (degree === 0 || coefficient !== 1) {\n          result.append(coefficient);\n        }\n\n        if (degree !== 0) {\n          if (degree === 1) {\n            result.append('x');\n          } else {\n            result.append('x^');\n            result.append(degree);\n          }\n        }\n      }\n    }\n\n    return result.toString();\n  };\n\n  return ModulusPoly;\n}();\n\nexports.default = ModulusPoly;","map":{"version":3,"mappings":"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","names":["field","coefficients","length","IllegalArgumentException_1","coefficientsLength","firstNonZero","Int32Array","System_1","arraycopy","ModulusPoly","degree","a","getCoefficient","sum","_c","coefficient","add","result","size","i","multiply","other","equals","isZero","smallerCoefficients","largerCoefficients","temp","sumDiff","lengthDiff","negative","multiplyOther","multiplyScalar","aCoefficients","aLength","bCoefficients","bLength","product","aCoeff","j","negativeCoefficients","subtract","scalar","StringBuilder_1","getDegree","append","toString"],"sources":["../../../../../src/core/pdf417/decoder/ec/ModulusPoly.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}