{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n\nvar ModeValues;\n\n(function (ModeValues) {\n  ModeValues[ModeValues[\"TERMINATOR\"] = 0] = \"TERMINATOR\";\n  ModeValues[ModeValues[\"NUMERIC\"] = 1] = \"NUMERIC\";\n  ModeValues[ModeValues[\"ALPHANUMERIC\"] = 2] = \"ALPHANUMERIC\";\n  ModeValues[ModeValues[\"STRUCTURED_APPEND\"] = 3] = \"STRUCTURED_APPEND\";\n  ModeValues[ModeValues[\"BYTE\"] = 4] = \"BYTE\";\n  ModeValues[ModeValues[\"ECI\"] = 5] = \"ECI\";\n  ModeValues[ModeValues[\"KANJI\"] = 6] = \"KANJI\";\n  ModeValues[ModeValues[\"FNC1_FIRST_POSITION\"] = 7] = \"FNC1_FIRST_POSITION\";\n  ModeValues[ModeValues[\"FNC1_SECOND_POSITION\"] = 8] = \"FNC1_SECOND_POSITION\";\n  /** See GBT 18284-2000; \"Hanzi\" is a transliteration of this mode name. */\n\n  ModeValues[ModeValues[\"HANZI\"] = 9] = \"HANZI\";\n})(ModeValues = exports.ModeValues || (exports.ModeValues = {}));\n/**\n * <p>See ISO 18004:2006, 6.4.1, Tables 2 and 3. This enum encapsulates the various modes in which\n * data can be encoded to bits in the QR code standard.</p>\n *\n * @author Sean Owen\n */\n\n\nvar Mode =\n/** @class */\nfunction () {\n  function Mode(value, stringValue, characterCountBitsForVersions, bits\n  /*int*/\n  ) {\n    this.value = value;\n    this.stringValue = stringValue;\n    this.characterCountBitsForVersions = characterCountBitsForVersions;\n    this.bits = bits;\n    Mode.FOR_BITS.set(bits, this);\n    Mode.FOR_VALUE.set(value, this);\n  }\n  /**\n   * @param bits four bits encoding a QR Code data mode\n   * @return Mode encoded by these bits\n   * @throws IllegalArgumentException if bits do not correspond to a known mode\n   */\n\n\n  Mode.forBits = function (bits\n  /*int*/\n  ) {\n    var mode = Mode.FOR_BITS.get(bits);\n\n    if (undefined === mode) {\n      throw new IllegalArgumentException_1.default();\n    }\n\n    return mode;\n  };\n  /**\n   * @param version version in question\n   * @return number of bits used, in this QR Code symbol {@link Version}, to encode the\n   *         count of characters that will follow encoded in this Mode\n   */\n\n\n  Mode.prototype.getCharacterCountBits = function (version) {\n    var versionNumber = version.getVersionNumber();\n    var offset;\n\n    if (versionNumber <= 9) {\n      offset = 0;\n    } else if (versionNumber <= 26) {\n      offset = 1;\n    } else {\n      offset = 2;\n    }\n\n    return this.characterCountBitsForVersions[offset];\n  };\n\n  Mode.prototype.getValue = function () {\n    return this.value;\n  };\n\n  Mode.prototype.getBits = function () {\n    return this.bits;\n  };\n\n  Mode.prototype.equals = function (o) {\n    if (!(o instanceof Mode)) {\n      return false;\n    }\n\n    var other = o;\n    return this.value === other.value;\n  };\n\n  Mode.prototype.toString = function () {\n    return this.stringValue;\n  };\n\n  Mode.FOR_BITS = new Map();\n  Mode.FOR_VALUE = new Map();\n  Mode.TERMINATOR = new Mode(ModeValues.TERMINATOR, 'TERMINATOR', Int32Array.from([0, 0, 0]), 0x00); // Not really a mode...\n\n  Mode.NUMERIC = new Mode(ModeValues.NUMERIC, 'NUMERIC', Int32Array.from([10, 12, 14]), 0x01);\n  Mode.ALPHANUMERIC = new Mode(ModeValues.ALPHANUMERIC, 'ALPHANUMERIC', Int32Array.from([9, 11, 13]), 0x02);\n  Mode.STRUCTURED_APPEND = new Mode(ModeValues.STRUCTURED_APPEND, 'STRUCTURED_APPEND', Int32Array.from([0, 0, 0]), 0x03); // Not supported\n\n  Mode.BYTE = new Mode(ModeValues.BYTE, 'BYTE', Int32Array.from([8, 16, 16]), 0x04);\n  Mode.ECI = new Mode(ModeValues.ECI, 'ECI', Int32Array.from([0, 0, 0]), 0x07); // character counts don't apply\n\n  Mode.KANJI = new Mode(ModeValues.KANJI, 'KANJI', Int32Array.from([8, 10, 12]), 0x08);\n  Mode.FNC1_FIRST_POSITION = new Mode(ModeValues.FNC1_FIRST_POSITION, 'FNC1_FIRST_POSITION', Int32Array.from([0, 0, 0]), 0x05);\n  Mode.FNC1_SECOND_POSITION = new Mode(ModeValues.FNC1_SECOND_POSITION, 'FNC1_SECOND_POSITION', Int32Array.from([0, 0, 0]), 0x09);\n  /** See GBT 18284-2000; \"Hanzi\" is a transliteration of this mode name. */\n\n  Mode.HANZI = new Mode(ModeValues.HANZI, 'HANZI', Int32Array.from([8, 10, 12]), 0x0D);\n  return Mode;\n}();\n\nexports.default = Mode;","map":{"version":3,"mappings":"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","names":["ModeValues","exports","value","stringValue","characterCountBitsForVersions","bits","Mode","FOR_BITS","set","FOR_VALUE","mode","get","undefined","IllegalArgumentException_1","version","versionNumber","getVersionNumber","offset","o","other","Map","TERMINATOR","Int32Array","from","NUMERIC","ALPHANUMERIC","STRUCTURED_APPEND","BYTE","ECI","KANJI","FNC1_FIRST_POSITION","FNC1_SECOND_POSITION","HANZI"],"sources":["../../../../src/core/qrcode/decoder/Mode.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}