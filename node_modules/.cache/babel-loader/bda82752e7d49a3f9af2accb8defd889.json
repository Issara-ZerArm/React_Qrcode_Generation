{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.oned {*/\n\nvar BarcodeFormat_1 = require(\"../BarcodeFormat\");\n\nvar ChecksumException_1 = require(\"../ChecksumException\");\n\nvar FormatException_1 = require(\"../FormatException\");\n\nvar NotFoundException_1 = require(\"../NotFoundException\");\n\nvar OneDReader_1 = require(\"./OneDReader\");\n\nvar Result_1 = require(\"../Result\");\n\nvar ResultPoint_1 = require(\"../ResultPoint\");\n/**\n * <p>Decodes Code 39 barcodes. Supports \"Full ASCII Code 39\" if USE_CODE_39_EXTENDED_MODE is set.</p>\n *\n * @author Sean Owen\n * @see Code93Reader\n */\n\n\nvar Code39Reader =\n/** @class */\nfunction (_super) {\n  __extends(Code39Reader, _super);\n  /**\n   * Creates a reader that assumes all encoded data is data, and does not treat the final\n   * character as a check digit. It will not decoded \"extended Code 39\" sequences.\n   */\n  // public Code39Reader() {\n  //   this(false);\n  // }\n\n  /**\n   * Creates a reader that can be configured to check the last character as a check digit.\n   * It will not decoded \"extended Code 39\" sequences.\n   *\n   * @param usingCheckDigit if true, treat the last data character as a check digit, not\n   * data, and verify that the checksum passes.\n   */\n  // public Code39Reader(boolean usingCheckDigit) {\n  //   this(usingCheckDigit, false);\n  // }\n\n  /**\n   * Creates a reader that can be configured to check the last character as a check digit,\n   * or optionally attempt to decode \"extended Code 39\" sequences that are used to encode\n   * the full ASCII character set.\n   *\n   * @param usingCheckDigit if true, treat the last data character as a check digit, not\n   * data, and verify that the checksum passes.\n   * @param extendedMode if true, will attempt to decode extended Code 39 sequences in the\n   * text.\n   */\n\n\n  function Code39Reader(usingCheckDigit, extendedMode) {\n    if (usingCheckDigit === void 0) {\n      usingCheckDigit = false;\n    }\n\n    if (extendedMode === void 0) {\n      extendedMode = false;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.usingCheckDigit = usingCheckDigit;\n    _this.extendedMode = extendedMode;\n    _this.decodeRowResult = '';\n    _this.counters = new Array(9);\n    return _this;\n  }\n\n  Code39Reader.prototype.decodeRow = function (rowNumber, row, hints) {\n    var e_1, _a, e_2, _b;\n\n    var theCounters = this.counters;\n    theCounters.fill(0);\n    this.decodeRowResult = '';\n    var start = Code39Reader.findAsteriskPattern(row, theCounters); // Read off white space\n\n    var nextStart = row.getNextSet(start[1]);\n    var end = row.getSize();\n    var decodedChar;\n    var lastStart;\n\n    do {\n      Code39Reader.recordPattern(row, nextStart, theCounters);\n      var pattern = Code39Reader.toNarrowWidePattern(theCounters);\n\n      if (pattern < 0) {\n        throw new NotFoundException_1.default();\n      }\n\n      decodedChar = Code39Reader.patternToChar(pattern);\n      this.decodeRowResult += decodedChar;\n      lastStart = nextStart;\n\n      try {\n        for (var theCounters_1 = __values(theCounters), theCounters_1_1 = theCounters_1.next(); !theCounters_1_1.done; theCounters_1_1 = theCounters_1.next()) {\n          var counter = theCounters_1_1.value;\n          nextStart += counter;\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (theCounters_1_1 && !theCounters_1_1.done && (_a = theCounters_1.return)) _a.call(theCounters_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      } // Read off white space\n\n\n      nextStart = row.getNextSet(nextStart);\n    } while (decodedChar !== '*');\n\n    this.decodeRowResult = this.decodeRowResult.substring(0, this.decodeRowResult.length - 1); // remove asterisk\n    // Look for whitespace after pattern:\n\n    var lastPatternSize = 0;\n\n    try {\n      for (var theCounters_2 = __values(theCounters), theCounters_2_1 = theCounters_2.next(); !theCounters_2_1.done; theCounters_2_1 = theCounters_2.next()) {\n        var counter = theCounters_2_1.value;\n        lastPatternSize += counter;\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (theCounters_2_1 && !theCounters_2_1.done && (_b = theCounters_2.return)) _b.call(theCounters_2);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    var whiteSpaceAfterEnd = nextStart - lastStart - lastPatternSize; // If 50% of last pattern size, following last pattern, is not whitespace, fail\n    // (but if it's whitespace to the very end of the image, that's OK)\n\n    if (nextStart !== end && whiteSpaceAfterEnd * 2 < lastPatternSize) {\n      throw new NotFoundException_1.default();\n    }\n\n    if (this.usingCheckDigit) {\n      var max = this.decodeRowResult.length - 1;\n      var total = 0;\n\n      for (var i = 0; i < max; i++) {\n        total += Code39Reader.ALPHABET_STRING.indexOf(this.decodeRowResult.charAt(i));\n      }\n\n      if (this.decodeRowResult.charAt(max) !== Code39Reader.ALPHABET_STRING.charAt(total % 43)) {\n        throw new ChecksumException_1.default();\n      }\n\n      this.decodeRowResult = this.decodeRowResult.substring(0, max);\n    }\n\n    if (this.decodeRowResult.length === 0) {\n      // false positive\n      throw new NotFoundException_1.default();\n    }\n\n    var resultString;\n\n    if (this.extendedMode) {\n      resultString = Code39Reader.decodeExtended(this.decodeRowResult);\n    } else {\n      resultString = this.decodeRowResult;\n    }\n\n    var left = (start[1] + start[0]) / 2.0;\n    var right = lastStart + lastPatternSize / 2.0;\n    return new Result_1.default(resultString, null, 0, [new ResultPoint_1.default(left, rowNumber), new ResultPoint_1.default(right, rowNumber)], BarcodeFormat_1.default.CODE_39, new Date().getTime());\n  };\n\n  Code39Reader.findAsteriskPattern = function (row, counters) {\n    var width = row.getSize();\n    var rowOffset = row.getNextSet(0);\n    var counterPosition = 0;\n    var patternStart = rowOffset;\n    var isWhite = false;\n    var patternLength = counters.length;\n\n    for (var i = rowOffset; i < width; i++) {\n      if (row.get(i) !== isWhite) {\n        counters[counterPosition]++;\n      } else {\n        if (counterPosition === patternLength - 1) {\n          // Look for whitespace before start pattern, >= 50% of width of start pattern\n          if (this.toNarrowWidePattern(counters) === Code39Reader.ASTERISK_ENCODING && row.isRange(Math.max(0, patternStart - Math.floor((i - patternStart) / 2)), patternStart, false)) {\n            return [patternStart, i];\n          }\n\n          patternStart += counters[0] + counters[1];\n          counters.copyWithin(0, 2, 2 + counterPosition - 1);\n          counters[counterPosition - 1] = 0;\n          counters[counterPosition] = 0;\n          counterPosition--;\n        } else {\n          counterPosition++;\n        }\n\n        counters[counterPosition] = 1;\n        isWhite = !isWhite;\n      }\n    }\n\n    throw new NotFoundException_1.default();\n  }; // For efficiency, returns -1 on failure. Not throwing here saved as many as 700 exceptions\n  // per image when using some of our blackbox images.\n\n\n  Code39Reader.toNarrowWidePattern = function (counters) {\n    var e_3, _a;\n\n    var numCounters = counters.length;\n    var maxNarrowCounter = 0;\n    var wideCounters;\n\n    do {\n      var minCounter = 0x7fffffff;\n\n      try {\n        for (var counters_1 = __values(counters), counters_1_1 = counters_1.next(); !counters_1_1.done; counters_1_1 = counters_1.next()) {\n          var counter = counters_1_1.value;\n\n          if (counter < minCounter && counter > maxNarrowCounter) {\n            minCounter = counter;\n          }\n        }\n      } catch (e_3_1) {\n        e_3 = {\n          error: e_3_1\n        };\n      } finally {\n        try {\n          if (counters_1_1 && !counters_1_1.done && (_a = counters_1.return)) _a.call(counters_1);\n        } finally {\n          if (e_3) throw e_3.error;\n        }\n      }\n\n      maxNarrowCounter = minCounter;\n      wideCounters = 0;\n      var totalWideCountersWidth = 0;\n      var pattern = 0;\n\n      for (var i = 0; i < numCounters; i++) {\n        var counter = counters[i];\n\n        if (counter > maxNarrowCounter) {\n          pattern |= 1 << numCounters - 1 - i;\n          wideCounters++;\n          totalWideCountersWidth += counter;\n        }\n      }\n\n      if (wideCounters === 3) {\n        // Found 3 wide counters, but are they close enough in width?\n        // We can perform a cheap, conservative check to see if any individual\n        // counter is more than 1.5 times the average:\n        for (var i = 0; i < numCounters && wideCounters > 0; i++) {\n          var counter = counters[i];\n\n          if (counter > maxNarrowCounter) {\n            wideCounters--; // totalWideCountersWidth = 3 * average, so this checks if counter >= 3/2 * average\n\n            if (counter * 2 >= totalWideCountersWidth) {\n              return -1;\n            }\n          }\n        }\n\n        return pattern;\n      }\n    } while (wideCounters > 3);\n\n    return -1;\n  };\n\n  Code39Reader.patternToChar = function (pattern) {\n    for (var i = 0; i < Code39Reader.CHARACTER_ENCODINGS.length; i++) {\n      if (Code39Reader.CHARACTER_ENCODINGS[i] === pattern) {\n        return Code39Reader.ALPHABET_STRING.charAt(i);\n      }\n    }\n\n    if (pattern === Code39Reader.ASTERISK_ENCODING) {\n      return '*';\n    }\n\n    throw new NotFoundException_1.default();\n  };\n\n  Code39Reader.decodeExtended = function (encoded) {\n    var length = encoded.length;\n    var decoded = '';\n\n    for (var i = 0; i < length; i++) {\n      var c = encoded.charAt(i);\n\n      if (c === '+' || c === '$' || c === '%' || c === '/') {\n        var next = encoded.charAt(i + 1);\n        var decodedChar = '\\0';\n\n        switch (c) {\n          case '+':\n            // +A to +Z map to a to z\n            if (next >= 'A' && next <= 'Z') {\n              decodedChar = String.fromCharCode(next.charCodeAt(0) + 32);\n            } else {\n              throw new FormatException_1.default();\n            }\n\n            break;\n\n          case '$':\n            // $A to $Z map to control codes SH to SB\n            if (next >= 'A' && next <= 'Z') {\n              decodedChar = String.fromCharCode(next.charCodeAt(0) - 64);\n            } else {\n              throw new FormatException_1.default();\n            }\n\n            break;\n\n          case '%':\n            // %A to %E map to control codes ESC to US\n            if (next >= 'A' && next <= 'E') {\n              decodedChar = String.fromCharCode(next.charCodeAt(0) - 38);\n            } else if (next >= 'F' && next <= 'J') {\n              decodedChar = String.fromCharCode(next.charCodeAt(0) - 11);\n            } else if (next >= 'K' && next <= 'O') {\n              decodedChar = String.fromCharCode(next.charCodeAt(0) + 16);\n            } else if (next >= 'P' && next <= 'T') {\n              decodedChar = String.fromCharCode(next.charCodeAt(0) + 43);\n            } else if (next === 'U') {\n              decodedChar = '\\0';\n            } else if (next === 'V') {\n              decodedChar = '@';\n            } else if (next === 'W') {\n              decodedChar = '`';\n            } else if (next === 'X' || next === 'Y' || next === 'Z') {\n              decodedChar = '\\x7f';\n            } else {\n              throw new FormatException_1.default();\n            }\n\n            break;\n\n          case '/':\n            // /A to /O map to ! to , and /Z maps to :\n            if (next >= 'A' && next <= 'O') {\n              decodedChar = String.fromCharCode(next.charCodeAt(0) - 32);\n            } else if (next === 'Z') {\n              decodedChar = ':';\n            } else {\n              throw new FormatException_1.default();\n            }\n\n            break;\n        }\n\n        decoded += decodedChar; // bump up i again since we read two characters\n\n        i++;\n      } else {\n        decoded += c;\n      }\n    }\n\n    return decoded;\n  };\n\n  Code39Reader.ALPHABET_STRING = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%';\n  /**\n   * These represent the encodings of characters, as patterns of wide and narrow bars.\n   * The 9 least-significant bits of each int correspond to the pattern of wide and narrow,\n   * with 1s representing \"wide\" and 0s representing narrow.\n   */\n\n  Code39Reader.CHARACTER_ENCODINGS = [0x034, 0x121, 0x061, 0x160, 0x031, 0x130, 0x070, 0x025, 0x124, 0x064, 0x109, 0x049, 0x148, 0x019, 0x118, 0x058, 0x00D, 0x10C, 0x04C, 0x01C, 0x103, 0x043, 0x142, 0x013, 0x112, 0x052, 0x007, 0x106, 0x046, 0x016, 0x181, 0x0C1, 0x1C0, 0x091, 0x190, 0x0D0, 0x085, 0x184, 0x0C4, 0x0A8, 0x0A2, 0x08A, 0x02A // /-%\n  ];\n  Code39Reader.ASTERISK_ENCODING = 0x094;\n  return Code39Reader;\n}(OneDReader_1.default);\n\nexports.default = Code39Reader;","map":{"version":3,"mappings":"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","names":["__extends","usingCheckDigit","extendedMode","_super","_this","decodeRowResult","counters","Array","Code39Reader","rowNumber","row","hints","theCounters","fill","start","findAsteriskPattern","nextStart","getNextSet","end","getSize","decodedChar","lastStart","recordPattern","pattern","toNarrowWidePattern","NotFoundException_1","patternToChar","theCounters_1_1","counter","substring","length","lastPatternSize","theCounters_2_1","whiteSpaceAfterEnd","max","total","i","ALPHABET_STRING","indexOf","charAt","ChecksumException_1","resultString","decodeExtended","left","right","Result_1","ResultPoint_1","BarcodeFormat_1","CODE_39","Date","getTime","width","rowOffset","counterPosition","patternStart","isWhite","patternLength","get","ASTERISK_ENCODING","isRange","Math","floor","copyWithin","numCounters","maxNarrowCounter","wideCounters","minCounter","counters_1_1","totalWideCountersWidth","CHARACTER_ENCODINGS","encoded","decoded","c","next","String","fromCharCode","charCodeAt","FormatException_1","OneDReader_1"],"sources":["../../../src/core/oned/Code39Reader.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}