{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar AI01decoder_1 = require(\"./AI01decoder\");\n\nvar NotFoundException_1 = require(\"../../../../NotFoundException\");\n\nvar StringBuilder_1 = require(\"../../../../util/StringBuilder\");\n\nvar AI01393xDecoder =\n/** @class */\nfunction (_super) {\n  __extends(AI01393xDecoder, _super);\n\n  function AI01393xDecoder(information) {\n    return _super.call(this, information) || this;\n  }\n\n  AI01393xDecoder.prototype.parseInformation = function () {\n    if (this.getInformation().getSize() < AI01393xDecoder.HEADER_SIZE + AI01decoder_1.default.GTIN_SIZE) {\n      throw new NotFoundException_1.default();\n    }\n\n    var buf = new StringBuilder_1.default();\n    this.encodeCompressedGtin(buf, AI01393xDecoder.HEADER_SIZE);\n    var lastAIdigit = this.getGeneralDecoder().extractNumericValueFromBitArray(AI01393xDecoder.HEADER_SIZE + AI01decoder_1.default.GTIN_SIZE, AI01393xDecoder.LAST_DIGIT_SIZE);\n    buf.append(\"(393\");\n    buf.append(lastAIdigit);\n    buf.append(')');\n    var firstThreeDigits = this.getGeneralDecoder().extractNumericValueFromBitArray(AI01393xDecoder.HEADER_SIZE + AI01decoder_1.default.GTIN_SIZE + AI01393xDecoder.LAST_DIGIT_SIZE, AI01393xDecoder.FIRST_THREE_DIGITS_SIZE);\n\n    if (firstThreeDigits / 100 == 0) {\n      buf.append('0');\n    }\n\n    if (firstThreeDigits / 10 == 0) {\n      buf.append('0');\n    }\n\n    buf.append(firstThreeDigits);\n    var generalInformation = this.getGeneralDecoder().decodeGeneralPurposeField(AI01393xDecoder.HEADER_SIZE + AI01decoder_1.default.GTIN_SIZE + AI01393xDecoder.LAST_DIGIT_SIZE + AI01393xDecoder.FIRST_THREE_DIGITS_SIZE, null);\n    buf.append(generalInformation.getNewString());\n    return buf.toString();\n  };\n\n  AI01393xDecoder.HEADER_SIZE = 5 + 1 + 2;\n  AI01393xDecoder.LAST_DIGIT_SIZE = 2;\n  AI01393xDecoder.FIRST_THREE_DIGITS_SIZE = 10;\n  return AI01393xDecoder;\n}(AI01decoder_1.default);\n\nexports.default = AI01393xDecoder;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AACA;AAAA;AAAA;AAA6CA;;AAK3C,2BAAYC,WAAZ,EAAgC;WAC9BC,kBAAMD,WAAN,KAAkB;AACnB;;AAEOE,+CAAR;AACE,QAAI,KAAKC,cAAL,GAAsBC,OAAtB,KAAkCF,eAAe,CAACG,WAAhB,GAA8BC,sBAAYC,SAAhF,EAA2F;AACzF,YAAM,IAAIC,2BAAJ,EAAN;AACD;;AAED,QAAIC,GAAG,GAAG,IAAIC,uBAAJ,EAAV;AAEA,SAAKC,oBAAL,CAA0BF,GAA1B,EAA+BP,eAAe,CAACG,WAA/C;AAEA,QAAIO,WAAW,GAAG,KAAKC,iBAAL,GAAyBC,+BAAzB,CAAyDZ,eAAe,CAACG,WAAhB,GAA8BC,sBAAYC,SAAnG,EAA8GL,eAAe,CAACa,eAA9H,CAAlB;AAEAN,OAAG,CAACO,MAAJ,CAAW,MAAX;AACAP,OAAG,CAACO,MAAJ,CAAWJ,WAAX;AACAH,OAAG,CAACO,MAAJ,CAAW,GAAX;AAEA,QAAIC,gBAAgB,GAAG,KAAKJ,iBAAL,GAAyBC,+BAAzB,CAAyDZ,eAAe,CAACG,WAAhB,GAA8BC,sBAAYC,SAA1C,GAAsDL,eAAe,CAACa,eAA/H,EAAgJb,eAAe,CAACgB,uBAAhK,CAAvB;;AACA,QAAID,gBAAgB,GAAG,GAAnB,IAA0B,CAA9B,EAAiC;AAC/BR,SAAG,CAACO,MAAJ,CAAW,GAAX;AACD;;AACD,QAAIC,gBAAgB,GAAG,EAAnB,IAAyB,CAA7B,EAAgC;AAC9BR,SAAG,CAACO,MAAJ,CAAW,GAAX;AACD;;AACDP,OAAG,CAACO,MAAJ,CAAWC,gBAAX;AAEA,QAAIE,kBAAkB,GAAG,KAAKN,iBAAL,GAAyBO,yBAAzB,CAAmDlB,eAAe,CAACG,WAAhB,GAA8BC,sBAAYC,SAA1C,GAAsDL,eAAe,CAACa,eAAtE,GAAwFb,eAAe,CAACgB,uBAA3J,EAAoL,IAApL,CAAzB;AACAT,OAAG,CAACO,MAAJ,CAAWG,kBAAkB,CAACE,YAAnB,EAAX;AAEA,WAAOZ,GAAG,CAACa,QAAJ,EAAP;AACD,GA5BO;;AARgBpB,gCAAc,IAAI,CAAJ,GAAQ,CAAtB;AACAA,oCAAkB,CAAlB;AACAA,4CAA0B,EAA1B;AAmC1B;AAAC,CAtCD,CAA6CI,qBAA7C;;kBAAqBJ","names":["__extends","information","_super","AI01393xDecoder","getInformation","getSize","HEADER_SIZE","AI01decoder_1","GTIN_SIZE","NotFoundException_1","buf","StringBuilder_1","encodeCompressedGtin","lastAIdigit","getGeneralDecoder","extractNumericValueFromBitArray","LAST_DIGIT_SIZE","append","firstThreeDigits","FIRST_THREE_DIGITS_SIZE","generalInformation","decodeGeneralPurposeField","getNewString","toString"],"sources":["../../../../../../src/core/oned/rss/expanded/decoders/AI01393xDecoder.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}