{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * <p>Encapsulates a block of data within a Data Matrix Code. Data Matrix Codes may split their data into\n * multiple blocks, each of which is a unit of data and error-correction codewords. Each\n * is represented by an instance of this class.</p>\n *\n * @author bbrown@google.com (Brian Brown)\n */\n\n\nvar DataBlock =\n/** @class */\nfunction () {\n  function DataBlock(numDataCodewords, codewords) {\n    this.numDataCodewords = numDataCodewords;\n    this.codewords = codewords;\n  }\n  /**\n   * <p>When Data Matrix Codes use multiple data blocks, they actually interleave the bytes of each of them.\n   * That is, the first byte of data block 1 to n is written, then the second bytes, and so on. This\n   * method will separate the data into original blocks.</p>\n   *\n   * @param rawCodewords bytes as read directly from the Data Matrix Code\n   * @param version version of the Data Matrix Code\n   * @return DataBlocks containing original bytes, \"de-interleaved\" from representation in the\n   *         Data Matrix Code\n   */\n\n\n  DataBlock.getDataBlocks = function (rawCodewords, version) {\n    var e_1, _a, e_2, _b; // Figure out the number and size of data blocks used by this version\n\n\n    var ecBlocks = version.getECBlocks(); // First count the total number of data blocks\n\n    var totalBlocks = 0;\n    var ecBlockArray = ecBlocks.getECBlocks();\n\n    try {\n      for (var ecBlockArray_1 = __values(ecBlockArray), ecBlockArray_1_1 = ecBlockArray_1.next(); !ecBlockArray_1_1.done; ecBlockArray_1_1 = ecBlockArray_1.next()) {\n        var ecBlock = ecBlockArray_1_1.value;\n        totalBlocks += ecBlock.getCount();\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (ecBlockArray_1_1 && !ecBlockArray_1_1.done && (_a = ecBlockArray_1.return)) _a.call(ecBlockArray_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    } // Now establish DataBlocks of the appropriate size and number of data codewords\n\n\n    var result = new Array(totalBlocks);\n    var numResultBlocks = 0;\n\n    try {\n      for (var ecBlockArray_2 = __values(ecBlockArray), ecBlockArray_2_1 = ecBlockArray_2.next(); !ecBlockArray_2_1.done; ecBlockArray_2_1 = ecBlockArray_2.next()) {\n        var ecBlock = ecBlockArray_2_1.value;\n\n        for (var i = 0; i < ecBlock.getCount(); i++) {\n          var numDataCodewords = ecBlock.getDataCodewords();\n          var numBlockCodewords = ecBlocks.getECCodewords() + numDataCodewords;\n          result[numResultBlocks++] = new DataBlock(numDataCodewords, new Uint8Array(numBlockCodewords));\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (ecBlockArray_2_1 && !ecBlockArray_2_1.done && (_b = ecBlockArray_2.return)) _b.call(ecBlockArray_2);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    } // All blocks have the same amount of data, except that the last n\n    // (where n may be 0) have 1 less byte. Figure out where these start.\n    // TODO(bbrown): There is only one case where there is a difference for Data Matrix for size 144\n\n\n    var longerBlocksTotalCodewords = result[0].codewords.length; // int shorterBlocksTotalCodewords = longerBlocksTotalCodewords - 1;\n\n    var longerBlocksNumDataCodewords = longerBlocksTotalCodewords - ecBlocks.getECCodewords();\n    var shorterBlocksNumDataCodewords = longerBlocksNumDataCodewords - 1; // The last elements of result may be 1 element shorter for 144 matrix\n    // first fill out as many elements as all of them have minus 1\n\n    var rawCodewordsOffset = 0;\n\n    for (var i = 0; i < shorterBlocksNumDataCodewords; i++) {\n      for (var j = 0; j < numResultBlocks; j++) {\n        result[j].codewords[i] = rawCodewords[rawCodewordsOffset++];\n      }\n    } // Fill out the last data block in the longer ones\n\n\n    var specialVersion = version.getVersionNumber() === 24;\n    var numLongerBlocks = specialVersion ? 8 : numResultBlocks;\n\n    for (var j = 0; j < numLongerBlocks; j++) {\n      result[j].codewords[longerBlocksNumDataCodewords - 1] = rawCodewords[rawCodewordsOffset++];\n    } // Now add in error correction blocks\n\n\n    var max = result[0].codewords.length;\n\n    for (var i = longerBlocksNumDataCodewords; i < max; i++) {\n      for (var j = 0; j < numResultBlocks; j++) {\n        var jOffset = specialVersion ? (j + 8) % numResultBlocks : j;\n        var iOffset = specialVersion && jOffset > 7 ? i - 1 : i;\n        result[jOffset].codewords[iOffset] = rawCodewords[rawCodewordsOffset++];\n      }\n    }\n\n    if (rawCodewordsOffset !== rawCodewords.length) {\n      throw new IllegalArgumentException_1.default();\n    }\n\n    return result;\n  };\n\n  DataBlock.prototype.getNumDataCodewords = function () {\n    return this.numDataCodewords;\n  };\n\n  DataBlock.prototype.getCodewords = function () {\n    return this.codewords;\n  };\n\n  return DataBlock;\n}();\n\nexports.default = DataBlock;","map":{"version":3,"mappings":"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","names":["numDataCodewords","codewords","DataBlock","rawCodewords","version","ecBlocks","getECBlocks","totalBlocks","ecBlockArray","ecBlockArray_1_1","ecBlock","getCount","result","Array","numResultBlocks","ecBlockArray_2_1","i","getDataCodewords","numBlockCodewords","getECCodewords","Uint8Array","longerBlocksTotalCodewords","length","longerBlocksNumDataCodewords","shorterBlocksNumDataCodewords","rawCodewordsOffset","j","specialVersion","getVersionNumber","numLongerBlocks","max","jOffset","iOffset","IllegalArgumentException_1"],"sources":["../../../../src/core/datamatrix/decoder/DataBlock.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}