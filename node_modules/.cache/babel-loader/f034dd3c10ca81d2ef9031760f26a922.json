{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2009 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar DecodeHintType_1 = require(\"./DecodeHintType\");\n\nvar BarcodeFormat_1 = require(\"./BarcodeFormat\");\n\nvar QRCodeReader_1 = require(\"./qrcode/QRCodeReader\");\n\nvar AztecReader_1 = require(\"./aztec/AztecReader\");\n\nvar MultiFormatOneDReader_1 = require(\"./oned/MultiFormatOneDReader\");\n\nvar DataMatrixReader_1 = require(\"./datamatrix/DataMatrixReader\");\n\nvar NotFoundException_1 = require(\"./NotFoundException\");\n\nvar PDF417Reader_1 = require(\"./pdf417/PDF417Reader\");\n\nvar ReaderException_1 = require(\"./ReaderException\");\n/*namespace com.google.zxing {*/\n\n/**\n * MultiFormatReader is a convenience class and the main entry point into the library for most uses.\n * By default it attempts to decode all barcode formats that the library supports. Optionally, you\n * can provide a hints object to request different behavior, for example only decoding QR codes.\n *\n * @author Sean Owen\n * @author dswitkin@google.com (Daniel Switkin)\n */\n\n\nvar MultiFormatReader =\n/** @class */\nfunction () {\n  function MultiFormatReader() {}\n  /**\n   * This version of decode honors the intent of Reader.decode(BinaryBitmap) in that it\n   * passes null as a hint to the decoders. However, that makes it inefficient to call repeatedly.\n   * Use setHints() followed by decodeWithState() for continuous scan applications.\n   *\n   * @param image The pixel data to decode\n   * @return The contents of the image\n   *\n   * @throws NotFoundException Any errors which occurred\n   */\n\n  /*@Override*/\n  // public decode(image: BinaryBitmap): Result {\n  //   setHints(null)\n  //   return decodeInternal(image)\n  // }\n\n  /**\n   * Decode an image using the hints provided. Does not honor existing state.\n   *\n   * @param image The pixel data to decode\n   * @param hints The hints to use, clearing the previous state.\n   * @return The contents of the image\n   *\n   * @throws NotFoundException Any errors which occurred\n   */\n\n  /*@Override*/\n\n\n  MultiFormatReader.prototype.decode = function (image, hints) {\n    this.setHints(hints);\n    return this.decodeInternal(image);\n  };\n  /**\n   * Decode an image using the state set up by calling setHints() previously. Continuous scan\n   * clients will get a <b>large</b> speed increase by using this instead of decode().\n   *\n   * @param image The pixel data to decode\n   * @return The contents of the image\n   *\n   * @throws NotFoundException Any errors which occurred\n   */\n\n\n  MultiFormatReader.prototype.decodeWithState = function (image) {\n    // Make sure to set up the default state so we don't crash\n    if (this.readers === null || this.readers === undefined) {\n      this.setHints(null);\n    }\n\n    return this.decodeInternal(image);\n  };\n  /**\n   * This method adds state to the MultiFormatReader. By setting the hints once, subsequent calls\n   * to decodeWithState(image) can reuse the same set of readers without reallocating memory. This\n   * is important for performance in continuous scan clients.\n   *\n   * @param hints The set of hints to use for subsequent calls to decode(image)\n   */\n\n\n  MultiFormatReader.prototype.setHints = function (hints) {\n    this.hints = hints;\n    var tryHarder = hints !== null && hints !== undefined && undefined !== hints.get(DecodeHintType_1.default.TRY_HARDER);\n    /*@SuppressWarnings(\"unchecked\")*/\n\n    var formats = hints === null || hints === undefined ? null : hints.get(DecodeHintType_1.default.POSSIBLE_FORMATS);\n    var readers = new Array();\n\n    if (formats !== null && formats !== undefined) {\n      var addOneDReader = formats.some(function (f) {\n        return f === BarcodeFormat_1.default.UPC_A || f === BarcodeFormat_1.default.UPC_E || f === BarcodeFormat_1.default.EAN_13 || f === BarcodeFormat_1.default.EAN_8 || f === BarcodeFormat_1.default.CODABAR || f === BarcodeFormat_1.default.CODE_39 || f === BarcodeFormat_1.default.CODE_93 || f === BarcodeFormat_1.default.CODE_128 || f === BarcodeFormat_1.default.ITF || f === BarcodeFormat_1.default.RSS_14 || f === BarcodeFormat_1.default.RSS_EXPANDED;\n      }); // Put 1D readers upfront in \"normal\" mode\n      // TYPESCRIPTPORT: TODO: uncomment below as they are ported\n\n      if (addOneDReader && !tryHarder) {\n        readers.push(new MultiFormatOneDReader_1.default(hints));\n      }\n\n      if (formats.includes(BarcodeFormat_1.default.QR_CODE)) {\n        readers.push(new QRCodeReader_1.default());\n      }\n\n      if (formats.includes(BarcodeFormat_1.default.DATA_MATRIX)) {\n        readers.push(new DataMatrixReader_1.default());\n      }\n\n      if (formats.includes(BarcodeFormat_1.default.AZTEC)) {\n        readers.push(new AztecReader_1.default());\n      }\n\n      if (formats.includes(BarcodeFormat_1.default.PDF_417)) {\n        readers.push(new PDF417Reader_1.default());\n      } // if (formats.includes(BarcodeFormat.MAXICODE)) {\n      //    readers.push(new MaxiCodeReader())\n      // }\n      // At end in \"try harder\" mode\n\n\n      if (addOneDReader && tryHarder) {\n        readers.push(new MultiFormatOneDReader_1.default(hints));\n      }\n    }\n\n    if (readers.length === 0) {\n      if (!tryHarder) {\n        readers.push(new MultiFormatOneDReader_1.default(hints));\n      }\n\n      readers.push(new QRCodeReader_1.default());\n      readers.push(new DataMatrixReader_1.default());\n      readers.push(new AztecReader_1.default());\n      readers.push(new PDF417Reader_1.default()); // readers.push(new MaxiCodeReader())\n\n      if (tryHarder) {\n        readers.push(new MultiFormatOneDReader_1.default(hints));\n      }\n    }\n\n    this.readers = readers; // .toArray(new Reader[readers.size()])\n  };\n  /*@Override*/\n\n\n  MultiFormatReader.prototype.reset = function () {\n    var e_1, _a;\n\n    if (this.readers !== null) {\n      try {\n        for (var _b = __values(this.readers), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var reader = _c.value;\n          reader.reset();\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n  };\n  /**\n   * @throws NotFoundException\n   */\n\n\n  MultiFormatReader.prototype.decodeInternal = function (image) {\n    var e_2, _a;\n\n    if (this.readers === null) {\n      throw new ReaderException_1.default('No readers where selected, nothing can be read.');\n    }\n\n    try {\n      for (var _b = __values(this.readers), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var reader = _c.value; // Trying to decode with ${reader} reader.\n\n        try {\n          return reader.decode(image, this.hints);\n        } catch (ex) {\n          if (ex instanceof ReaderException_1.default) {\n            continue;\n          } // Bad Exception.\n\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    throw new NotFoundException_1.default('No MultiFormat Readers were able to detect the code.');\n  };\n\n  return MultiFormatReader;\n}();\n\nexports.default = MultiFormatReader;","map":{"version":3,"mappings":"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","names":["MultiFormatReader","image","hints","setHints","decodeInternal","readers","undefined","tryHarder","get","DecodeHintType_1","TRY_HARDER","formats","POSSIBLE_FORMATS","Array","addOneDReader","some","BarcodeFormat_1","UPC_A","f","UPC_E","EAN_13","EAN_8","CODABAR","CODE_39","CODE_93","CODE_128","ITF","RSS_14","RSS_EXPANDED","push","MultiFormatOneDReader_1","includes","QR_CODE","QRCodeReader_1","DATA_MATRIX","DataMatrixReader_1","AZTEC","AztecReader_1","PDF_417","PDF417Reader_1","length","_c","reader","reset","ReaderException_1","decode","ex","NotFoundException_1"],"sources":["../../src/core/MultiFormatReader.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}