{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2009 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar StringBuilder_1 = require(\"./util/StringBuilder\");\n\nvar UnsupportedOperationException_1 = require(\"./UnsupportedOperationException\");\n/*namespace com.google.zxing {*/\n\n/**\n * The purpose of this class hierarchy is to abstract different bitmap implementations across\n * platforms into a standard interface for requesting greyscale luminance values. The interface\n * only provides immutable methods; therefore crop and rotation create copies. This is to ensure\n * that one Reader does not modify the original luminance source and leave it in an unknown state\n * for other Readers in the chain.\n *\n * @author dswitkin@google.com (Daniel Switkin)\n */\n\n\nvar LuminanceSource =\n/** @class */\nfunction () {\n  function LuminanceSource(width\n  /*int*/\n  , height\n  /*int*/\n  ) {\n    this.width = width;\n    this.height = height;\n  }\n  /**\n   * @return The width of the bitmap.\n   */\n\n\n  LuminanceSource.prototype.getWidth = function () {\n    return this.width;\n  };\n  /**\n   * @return The height of the bitmap.\n   */\n\n\n  LuminanceSource.prototype.getHeight = function () {\n    return this.height;\n  };\n  /**\n   * @return Whether this subclass supports cropping.\n   */\n\n\n  LuminanceSource.prototype.isCropSupported = function () {\n    return false;\n  };\n  /**\n   * Returns a new object with cropped image data. Implementations may keep a reference to the\n   * original data rather than a copy. Only callable if isCropSupported() is true.\n   *\n   * @param left The left coordinate, which must be in [0,getWidth())\n   * @param top The top coordinate, which must be in [0,getHeight())\n   * @param width The width of the rectangle to crop.\n   * @param height The height of the rectangle to crop.\n   * @return A cropped version of this object.\n   */\n\n\n  LuminanceSource.prototype.crop = function (left\n  /*int*/\n  , top\n  /*int*/\n  , width\n  /*int*/\n  , height\n  /*int*/\n  ) {\n    throw new UnsupportedOperationException_1.default('This luminance source does not support cropping.');\n  };\n  /**\n   * @return Whether this subclass supports counter-clockwise rotation.\n   */\n\n\n  LuminanceSource.prototype.isRotateSupported = function () {\n    return false;\n  };\n  /**\n   * Returns a new object with rotated image data by 90 degrees counterclockwise.\n   * Only callable if {@link #isRotateSupported()} is true.\n   *\n   * @return A rotated version of this object.\n   */\n\n\n  LuminanceSource.prototype.rotateCounterClockwise = function () {\n    throw new UnsupportedOperationException_1.default('This luminance source does not support rotation by 90 degrees.');\n  };\n  /**\n   * Returns a new object with rotated image data by 45 degrees counterclockwise.\n   * Only callable if {@link #isRotateSupported()} is true.\n   *\n   * @return A rotated version of this object.\n   */\n\n\n  LuminanceSource.prototype.rotateCounterClockwise45 = function () {\n    throw new UnsupportedOperationException_1.default('This luminance source does not support rotation by 45 degrees.');\n  };\n  /*@Override*/\n\n\n  LuminanceSource.prototype.toString = function () {\n    var row = new Uint8ClampedArray(this.width);\n    var result = new StringBuilder_1.default();\n\n    for (var y = 0; y < this.height; y++) {\n      var sourceRow = this.getRow(y, row);\n\n      for (var x = 0; x < this.width; x++) {\n        var luminance = sourceRow[x] & 0xFF;\n        var c = void 0;\n\n        if (luminance < 0x40) {\n          c = '#';\n        } else if (luminance < 0x80) {\n          c = '+';\n        } else if (luminance < 0xC0) {\n          c = '.';\n        } else {\n          c = ' ';\n        }\n\n        result.append(c);\n      }\n\n      result.append('\\n');\n    }\n\n    return result.toString();\n  };\n\n  return LuminanceSource;\n}();\n\nexports.default = LuminanceSource;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;AAiBA;;AACA;AAEA;;AAEA;;;;;;;;;;;AASA;AAAA;AAAA;AAEI,2BAA8BA;AAAc;AAA5C,IAA6DC;AAAe;AAA5E,IAAmF;AAArD;AAA+B;AAA2B;AA0BxF;;;;;AAGOC,uCAAP;AACI,WAAO,KAAKF,KAAZ;AACH,GAFM;AAIP;;;;;AAGOE,wCAAP;AACI,WAAO,KAAKD,MAAZ;AACH,GAFM;AAIP;;;;;AAGOC,8CAAP;AACI,WAAO,KAAP;AACH,GAFM;AAIP;;;;;;;;;;;;AAUOA,mCAAP,UAAYC;AAAa;AAAzB,IAAkCC;AAAY;AAA9C,IAAuDJ;AAAc;AAArE,IAA8EC;AAAe;AAA7F,IAAoG;AAChG,UAAM,IAAII,uCAAJ,CAAkC,kDAAlC,CAAN;AACH,GAFM;AAIP;;;;;AAGOH,gDAAP;AACI,WAAO,KAAP;AACH,GAFM;AAUP;;;;;;;;AAMOA,qDAAP;AACI,UAAM,IAAIG,uCAAJ,CAAkC,gEAAlC,CAAN;AACH,GAFM;AAIP;;;;;;;;AAMOH,uDAAP;AACI,UAAM,IAAIG,uCAAJ,CAAkC,gEAAlC,CAAN;AACH,GAFM;AAIP;;;AACOH,uCAAP;AACI,QAAMI,GAAG,GAAG,IAAIC,iBAAJ,CAAsB,KAAKP,KAA3B,CAAZ;AACA,QAAIQ,MAAM,GAAG,IAAIC,uBAAJ,EAAb;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKT,MAAzB,EAAiCS,CAAC,EAAlC,EAAsC;AAClC,UAAMC,SAAS,GAAG,KAAKC,MAAL,CAAYF,CAAZ,EAAeJ,GAAf,CAAlB;;AACA,WAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKb,KAAzB,EAAgCa,CAAC,EAAjC,EAAqC;AACjC,YAAMC,SAAS,GAAGH,SAAS,CAACE,CAAD,CAAT,GAAe,IAAjC;AACA,YAAIE,CAAC,SAAL;;AACA,YAAID,SAAS,GAAG,IAAhB,EAAsB;AAClBC,WAAC,GAAG,GAAJ;AACH,SAFD,MAEO,IAAID,SAAS,GAAG,IAAhB,EAAsB;AACzBC,WAAC,GAAG,GAAJ;AACH,SAFM,MAEA,IAAID,SAAS,GAAG,IAAhB,EAAsB;AACzBC,WAAC,GAAG,GAAJ;AACH,SAFM,MAEA;AACHA,WAAC,GAAG,GAAJ;AACH;;AACDP,cAAM,CAACQ,MAAP,CAAcD,CAAd;AACH;;AACDP,YAAM,CAACQ,MAAP,CAAc,IAAd;AACH;;AACD,WAAOR,MAAM,CAACS,QAAP,EAAP;AACH,GAtBM;;AAwBX;AAAC,CAzHD;;AA2HAC,kBAAehB,eAAf","names":["width","height","LuminanceSource","left","top","UnsupportedOperationException_1","row","Uint8ClampedArray","result","StringBuilder_1","y","sourceRow","getRow","x","luminance","c","append","toString","exports"],"sources":["../../src/core/LuminanceSource.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}