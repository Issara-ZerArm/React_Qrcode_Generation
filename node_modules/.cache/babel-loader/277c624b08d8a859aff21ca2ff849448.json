{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.qrcode.encoder {*/\n\nvar EncodeHintType_1 = require(\"../../EncodeHintType\");\n\nvar BitArray_1 = require(\"../../common/BitArray\");\n\nvar CharacterSetECI_1 = require(\"../../common/CharacterSetECI\");\n\nvar GenericGF_1 = require(\"../../common/reedsolomon/GenericGF\");\n\nvar ReedSolomonEncoder_1 = require(\"../../common/reedsolomon/ReedSolomonEncoder\");\n\nvar Mode_1 = require(\"../decoder/Mode\");\n\nvar Version_1 = require(\"../decoder/Version\");\n\nvar MaskUtil_1 = require(\"./MaskUtil\");\n\nvar ByteMatrix_1 = require(\"./ByteMatrix\");\n\nvar QRCode_1 = require(\"./QRCode\");\n\nvar MatrixUtil_1 = require(\"./MatrixUtil\");\n\nvar StringEncoding_1 = require(\"../../util/StringEncoding\");\n\nvar BlockPair_1 = require(\"./BlockPair\");\n\nvar WriterException_1 = require(\"../../WriterException\");\n/*import java.io.UnsupportedEncodingException;*/\n\n/*import java.util.ArrayList;*/\n\n/*import java.util.Collection;*/\n\n/*import java.util.Map;*/\n\n/**\n * @author satorux@google.com (Satoru Takabayashi) - creator\n * @author dswitkin@google.com (Daniel Switkin) - ported from C++\n */\n\n\nvar Encoder =\n/** @class */\nfunction () {\n  // TYPESCRIPTPORT: changed to UTF8, the default for js\n  function Encoder() {} // The mask penalty calculation is complicated.  See Table 21 of JISX0510:2004 (p.45) for details.\n  // Basically it applies four rules and summate all penalties.\n\n\n  Encoder.calculateMaskPenalty = function (matrix) {\n    return MaskUtil_1.default.applyMaskPenaltyRule1(matrix) + MaskUtil_1.default.applyMaskPenaltyRule2(matrix) + MaskUtil_1.default.applyMaskPenaltyRule3(matrix) + MaskUtil_1.default.applyMaskPenaltyRule4(matrix);\n  };\n  /**\n   * @param content text to encode\n   * @param ecLevel error correction level to use\n   * @return {@link QRCode} representing the encoded QR code\n   * @throws WriterException if encoding can't succeed, because of for example invalid content\n   *   or configuration\n   */\n  // public static encode(content: string, ecLevel: ErrorCorrectionLevel): QRCode /*throws WriterException*/ {\n  //   return encode(content, ecLevel, null)\n  // }\n\n\n  Encoder.encode = function (content, ecLevel, hints) {\n    if (hints === void 0) {\n      hints = null;\n    } // Determine what character encoding has been specified by the caller, if any\n\n\n    var encoding = Encoder.DEFAULT_BYTE_MODE_ENCODING;\n    var hasEncodingHint = hints !== null && undefined !== hints.get(EncodeHintType_1.default.CHARACTER_SET);\n\n    if (hasEncodingHint) {\n      encoding = hints.get(EncodeHintType_1.default.CHARACTER_SET).toString();\n    } // Pick an encoding mode appropriate for the content. Note that this will not attempt to use\n    // multiple modes / segments even if that were more efficient. Twould be nice.\n\n\n    var mode = this.chooseMode(content, encoding); // This will store the header information, like mode and\n    // length, as well as \"header\" segments like an ECI segment.\n\n    var headerBits = new BitArray_1.default(); // Append ECI segment if applicable\n\n    if (mode === Mode_1.default.BYTE && (hasEncodingHint || Encoder.DEFAULT_BYTE_MODE_ENCODING !== encoding)) {\n      var eci = CharacterSetECI_1.default.getCharacterSetECIByName(encoding);\n\n      if (eci !== undefined) {\n        this.appendECI(eci, headerBits);\n      }\n    } // (With ECI in place,) Write the mode marker\n\n\n    this.appendModeInfo(mode, headerBits); // Collect data within the main segment, separately, to count its size if needed. Don't add it to\n    // main payload yet.\n\n    var dataBits = new BitArray_1.default();\n    this.appendBytes(content, mode, dataBits, encoding);\n    var version;\n\n    if (hints !== null && undefined !== hints.get(EncodeHintType_1.default.QR_VERSION)) {\n      var versionNumber = Number.parseInt(hints.get(EncodeHintType_1.default.QR_VERSION).toString(), 10);\n      version = Version_1.default.getVersionForNumber(versionNumber);\n      var bitsNeeded = this.calculateBitsNeeded(mode, headerBits, dataBits, version);\n\n      if (!this.willFit(bitsNeeded, version, ecLevel)) {\n        throw new WriterException_1.default('Data too big for requested version');\n      }\n    } else {\n      version = this.recommendVersion(ecLevel, mode, headerBits, dataBits);\n    }\n\n    var headerAndDataBits = new BitArray_1.default();\n    headerAndDataBits.appendBitArray(headerBits); // Find \"length\" of main segment and write it\n\n    var numLetters = mode === Mode_1.default.BYTE ? dataBits.getSizeInBytes() : content.length;\n    this.appendLengthInfo(numLetters, version, mode, headerAndDataBits); // Put data together into the overall payload\n\n    headerAndDataBits.appendBitArray(dataBits);\n    var ecBlocks = version.getECBlocksForLevel(ecLevel);\n    var numDataBytes = version.getTotalCodewords() - ecBlocks.getTotalECCodewords(); // Terminate the bits properly.\n\n    this.terminateBits(numDataBytes, headerAndDataBits); // Interleave data bits with error correction code.\n\n    var finalBits = this.interleaveWithECBytes(headerAndDataBits, version.getTotalCodewords(), numDataBytes, ecBlocks.getNumBlocks());\n    var qrCode = new QRCode_1.default();\n    qrCode.setECLevel(ecLevel);\n    qrCode.setMode(mode);\n    qrCode.setVersion(version); //  Choose the mask pattern and set to \"qrCode\".\n\n    var dimension = version.getDimensionForVersion();\n    var matrix = new ByteMatrix_1.default(dimension, dimension);\n    var maskPattern = this.chooseMaskPattern(finalBits, ecLevel, version, matrix);\n    qrCode.setMaskPattern(maskPattern); // Build the matrix and set it to \"qrCode\".\n\n    MatrixUtil_1.default.buildMatrix(finalBits, ecLevel, version, maskPattern, matrix);\n    qrCode.setMatrix(matrix);\n    return qrCode;\n  };\n  /**\n   * Decides the smallest version of QR code that will contain all of the provided data.\n   *\n   * @throws WriterException if the data cannot fit in any version\n   */\n\n\n  Encoder.recommendVersion = function (ecLevel, mode, headerBits, dataBits) {\n    // Hard part: need to know version to know how many bits length takes. But need to know how many\n    // bits it takes to know version. First we take a guess at version by assuming version will be\n    // the minimum, 1:\n    var provisionalBitsNeeded = this.calculateBitsNeeded(mode, headerBits, dataBits, Version_1.default.getVersionForNumber(1));\n    var provisionalVersion = this.chooseVersion(provisionalBitsNeeded, ecLevel); // Use that guess to calculate the right version. I am still not sure this works in 100% of cases.\n\n    var bitsNeeded = this.calculateBitsNeeded(mode, headerBits, dataBits, provisionalVersion);\n    return this.chooseVersion(bitsNeeded, ecLevel);\n  };\n\n  Encoder.calculateBitsNeeded = function (mode, headerBits, dataBits, version) {\n    return headerBits.getSize() + mode.getCharacterCountBits(version) + dataBits.getSize();\n  };\n  /**\n   * @return the code point of the table used in alphanumeric mode or\n   *  -1 if there is no corresponding code in the table.\n   */\n\n\n  Encoder.getAlphanumericCode = function (code\n  /*int*/\n  ) {\n    if (code < Encoder.ALPHANUMERIC_TABLE.length) {\n      return Encoder.ALPHANUMERIC_TABLE[code];\n    }\n\n    return -1;\n  }; // public static chooseMode(content: string): Mode {\n  //   return chooseMode(content, null);\n  // }\n\n  /**\n   * Choose the best mode by examining the content. Note that 'encoding' is used as a hint;\n   * if it is Shift_JIS, and the input is only double-byte Kanji, then we return {@link Mode#KANJI}.\n   */\n\n\n  Encoder.chooseMode = function (content, encoding) {\n    if (encoding === void 0) {\n      encoding = null;\n    }\n\n    if (CharacterSetECI_1.default.SJIS.getName() === encoding && this.isOnlyDoubleByteKanji(content)) {\n      // Choose Kanji mode if all input are double-byte characters\n      return Mode_1.default.KANJI;\n    }\n\n    var hasNumeric = false;\n    var hasAlphanumeric = false;\n\n    for (var i = 0, length_1 = content.length; i < length_1; ++i) {\n      var c = content.charAt(i);\n\n      if (Encoder.isDigit(c)) {\n        hasNumeric = true;\n      } else if (this.getAlphanumericCode(c.charCodeAt(0)) !== -1) {\n        hasAlphanumeric = true;\n      } else {\n        return Mode_1.default.BYTE;\n      }\n    }\n\n    if (hasAlphanumeric) {\n      return Mode_1.default.ALPHANUMERIC;\n    }\n\n    if (hasNumeric) {\n      return Mode_1.default.NUMERIC;\n    }\n\n    return Mode_1.default.BYTE;\n  };\n\n  Encoder.isOnlyDoubleByteKanji = function (content) {\n    var bytes;\n\n    try {\n      bytes = StringEncoding_1.default.encode(content, CharacterSetECI_1.default.SJIS); // content.getBytes(\"Shift_JIS\"))\n    } catch (ignored\n    /*: UnsupportedEncodingException*/\n    ) {\n      return false;\n    }\n\n    var length = bytes.length;\n\n    if (length % 2 !== 0) {\n      return false;\n    }\n\n    for (var i = 0; i < length; i += 2) {\n      var byte1 = bytes[i] & 0xFF;\n\n      if ((byte1 < 0x81 || byte1 > 0x9F) && (byte1 < 0xE0 || byte1 > 0xEB)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  Encoder.chooseMaskPattern = function (bits, ecLevel, version, matrix) {\n    var minPenalty = Number.MAX_SAFE_INTEGER; // Lower penalty is better.\n\n    var bestMaskPattern = -1; // We try all mask patterns to choose the best one.\n\n    for (var maskPattern = 0; maskPattern < QRCode_1.default.NUM_MASK_PATTERNS; maskPattern++) {\n      MatrixUtil_1.default.buildMatrix(bits, ecLevel, version, maskPattern, matrix);\n      var penalty = this.calculateMaskPenalty(matrix);\n\n      if (penalty < minPenalty) {\n        minPenalty = penalty;\n        bestMaskPattern = maskPattern;\n      }\n    }\n\n    return bestMaskPattern;\n  };\n\n  Encoder.chooseVersion = function (numInputBits\n  /*int*/\n  , ecLevel) {\n    for (var versionNum = 1; versionNum <= 40; versionNum++) {\n      var version = Version_1.default.getVersionForNumber(versionNum);\n\n      if (Encoder.willFit(numInputBits, version, ecLevel)) {\n        return version;\n      }\n    }\n\n    throw new WriterException_1.default('Data too big');\n  };\n  /**\n   * @return true if the number of input bits will fit in a code with the specified version and\n   * error correction level.\n   */\n\n\n  Encoder.willFit = function (numInputBits\n  /*int*/\n  , version, ecLevel) {\n    // In the following comments, we use numbers of Version 7-H.\n    // numBytes = 196\n    var numBytes = version.getTotalCodewords(); // getNumECBytes = 130\n\n    var ecBlocks = version.getECBlocksForLevel(ecLevel);\n    var numEcBytes = ecBlocks.getTotalECCodewords(); // getNumDataBytes = 196 - 130 = 66\n\n    var numDataBytes = numBytes - numEcBytes;\n    var totalInputBytes = (numInputBits + 7) / 8;\n    return numDataBytes >= totalInputBytes;\n  };\n  /**\n   * Terminate bits as described in 8.4.8 and 8.4.9 of JISX0510:2004 (p.24).\n   */\n\n\n  Encoder.terminateBits = function (numDataBytes\n  /*int*/\n  , bits) {\n    var capacity = numDataBytes * 8;\n\n    if (bits.getSize() > capacity) {\n      throw new WriterException_1.default('data bits cannot fit in the QR Code' + bits.getSize() + ' > ' + capacity);\n    }\n\n    for (var i = 0; i < 4 && bits.getSize() < capacity; ++i) {\n      bits.appendBit(false);\n    } // Append termination bits. See 8.4.8 of JISX0510:2004 (p.24) for details.\n    // If the last byte isn't 8-bit aligned, we'll add padding bits.\n\n\n    var numBitsInLastByte = bits.getSize() & 0x07;\n\n    if (numBitsInLastByte > 0) {\n      for (var i = numBitsInLastByte; i < 8; i++) {\n        bits.appendBit(false);\n      }\n    } // If we have more space, we'll fill the space with padding patterns defined in 8.4.9 (p.24).\n\n\n    var numPaddingBytes = numDataBytes - bits.getSizeInBytes();\n\n    for (var i = 0; i < numPaddingBytes; ++i) {\n      bits.appendBits((i & 0x01) === 0 ? 0xEC : 0x11, 8);\n    }\n\n    if (bits.getSize() !== capacity) {\n      throw new WriterException_1.default('Bits size does not equal capacity');\n    }\n  };\n  /**\n   * Get number of data bytes and number of error correction bytes for block id \"blockID\". Store\n   * the result in \"numDataBytesInBlock\", and \"numECBytesInBlock\". See table 12 in 8.5.1 of\n   * JISX0510:2004 (p.30)\n   */\n\n\n  Encoder.getNumDataBytesAndNumECBytesForBlockID = function (numTotalBytes\n  /*int*/\n  , numDataBytes\n  /*int*/\n  , numRSBlocks\n  /*int*/\n  , blockID\n  /*int*/\n  , numDataBytesInBlock, numECBytesInBlock) {\n    if (blockID >= numRSBlocks) {\n      throw new WriterException_1.default('Block ID too large');\n    } // numRsBlocksInGroup2 = 196 % 5 = 1\n\n\n    var numRsBlocksInGroup2 = numTotalBytes % numRSBlocks; // numRsBlocksInGroup1 = 5 - 1 = 4\n\n    var numRsBlocksInGroup1 = numRSBlocks - numRsBlocksInGroup2; // numTotalBytesInGroup1 = 196 / 5 = 39\n\n    var numTotalBytesInGroup1 = Math.floor(numTotalBytes / numRSBlocks); // numTotalBytesInGroup2 = 39 + 1 = 40\n\n    var numTotalBytesInGroup2 = numTotalBytesInGroup1 + 1; // numDataBytesInGroup1 = 66 / 5 = 13\n\n    var numDataBytesInGroup1 = Math.floor(numDataBytes / numRSBlocks); // numDataBytesInGroup2 = 13 + 1 = 14\n\n    var numDataBytesInGroup2 = numDataBytesInGroup1 + 1; // numEcBytesInGroup1 = 39 - 13 = 26\n\n    var numEcBytesInGroup1 = numTotalBytesInGroup1 - numDataBytesInGroup1; // numEcBytesInGroup2 = 40 - 14 = 26\n\n    var numEcBytesInGroup2 = numTotalBytesInGroup2 - numDataBytesInGroup2; // Sanity checks.\n    // 26 = 26\n\n    if (numEcBytesInGroup1 !== numEcBytesInGroup2) {\n      throw new WriterException_1.default('EC bytes mismatch');\n    } // 5 = 4 + 1.\n\n\n    if (numRSBlocks !== numRsBlocksInGroup1 + numRsBlocksInGroup2) {\n      throw new WriterException_1.default('RS blocks mismatch');\n    } // 196 = (13 + 26) * 4 + (14 + 26) * 1\n\n\n    if (numTotalBytes !== (numDataBytesInGroup1 + numEcBytesInGroup1) * numRsBlocksInGroup1 + (numDataBytesInGroup2 + numEcBytesInGroup2) * numRsBlocksInGroup2) {\n      throw new WriterException_1.default('Total bytes mismatch');\n    }\n\n    if (blockID < numRsBlocksInGroup1) {\n      numDataBytesInBlock[0] = numDataBytesInGroup1;\n      numECBytesInBlock[0] = numEcBytesInGroup1;\n    } else {\n      numDataBytesInBlock[0] = numDataBytesInGroup2;\n      numECBytesInBlock[0] = numEcBytesInGroup2;\n    }\n  };\n  /**\n   * Interleave \"bits\" with corresponding error correction bytes. On success, store the result in\n   * \"result\". The interleave rule is complicated. See 8.6 of JISX0510:2004 (p.37) for details.\n   */\n\n\n  Encoder.interleaveWithECBytes = function (bits, numTotalBytes\n  /*int*/\n  , numDataBytes\n  /*int*/\n  , numRSBlocks\n  /*int*/\n  ) {\n    var e_1, _a, e_2, _b; // \"bits\" must have \"getNumDataBytes\" bytes of data.\n\n\n    if (bits.getSizeInBytes() !== numDataBytes) {\n      throw new WriterException_1.default('Number of bits and data bytes does not match');\n    } // Step 1.  Divide data bytes into blocks and generate error correction bytes for them. We'll\n    // store the divided data bytes blocks and error correction bytes blocks into \"blocks\".\n\n\n    var dataBytesOffset = 0;\n    var maxNumDataBytes = 0;\n    var maxNumEcBytes = 0; // Since, we know the number of reedsolmon blocks, we can initialize the vector with the number.\n\n    var blocks = new Array(); // new Array<BlockPair>(numRSBlocks)\n\n    for (var i = 0; i < numRSBlocks; ++i) {\n      var numDataBytesInBlock = new Int32Array(1);\n      var numEcBytesInBlock = new Int32Array(1);\n      Encoder.getNumDataBytesAndNumECBytesForBlockID(numTotalBytes, numDataBytes, numRSBlocks, i, numDataBytesInBlock, numEcBytesInBlock);\n      var size = numDataBytesInBlock[0];\n      var dataBytes = new Uint8Array(size);\n      bits.toBytes(8 * dataBytesOffset, dataBytes, 0, size);\n      var ecBytes = Encoder.generateECBytes(dataBytes, numEcBytesInBlock[0]);\n      blocks.push(new BlockPair_1.default(dataBytes, ecBytes));\n      maxNumDataBytes = Math.max(maxNumDataBytes, size);\n      maxNumEcBytes = Math.max(maxNumEcBytes, ecBytes.length);\n      dataBytesOffset += numDataBytesInBlock[0];\n    }\n\n    if (numDataBytes !== dataBytesOffset) {\n      throw new WriterException_1.default('Data bytes does not match offset');\n    }\n\n    var result = new BitArray_1.default(); // First, place data blocks.\n\n    for (var i = 0; i < maxNumDataBytes; ++i) {\n      try {\n        for (var blocks_1 = __values(blocks), blocks_1_1 = blocks_1.next(); !blocks_1_1.done; blocks_1_1 = blocks_1.next()) {\n          var block = blocks_1_1.value;\n          var dataBytes = block.getDataBytes();\n\n          if (i < dataBytes.length) {\n            result.appendBits(dataBytes[i], 8);\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (blocks_1_1 && !blocks_1_1.done && (_a = blocks_1.return)) _a.call(blocks_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    } // Then, place error correction blocks.\n\n\n    for (var i = 0; i < maxNumEcBytes; ++i) {\n      try {\n        for (var blocks_2 = __values(blocks), blocks_2_1 = blocks_2.next(); !blocks_2_1.done; blocks_2_1 = blocks_2.next()) {\n          var block = blocks_2_1.value;\n          var ecBytes = block.getErrorCorrectionBytes();\n\n          if (i < ecBytes.length) {\n            result.appendBits(ecBytes[i], 8);\n          }\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (blocks_2_1 && !blocks_2_1.done && (_b = blocks_2.return)) _b.call(blocks_2);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    }\n\n    if (numTotalBytes !== result.getSizeInBytes()) {\n      // Should be same.\n      throw new WriterException_1.default('Interleaving error: ' + numTotalBytes + ' and ' + result.getSizeInBytes() + ' differ.');\n    }\n\n    return result;\n  };\n\n  Encoder.generateECBytes = function (dataBytes, numEcBytesInBlock\n  /*int*/\n  ) {\n    var numDataBytes = dataBytes.length;\n    var toEncode = new Int32Array(numDataBytes + numEcBytesInBlock); // int[numDataBytes + numEcBytesInBlock]\n\n    for (var i = 0; i < numDataBytes; i++) {\n      toEncode[i] = dataBytes[i] & 0xFF;\n    }\n\n    new ReedSolomonEncoder_1.default(GenericGF_1.default.QR_CODE_FIELD_256).encode(toEncode, numEcBytesInBlock);\n    var ecBytes = new Uint8Array(numEcBytesInBlock);\n\n    for (var i = 0; i < numEcBytesInBlock; i++) {\n      ecBytes[i] =\n      /*(byte) */\n      toEncode[numDataBytes + i];\n    }\n\n    return ecBytes;\n  };\n  /**\n   * Append mode info. On success, store the result in \"bits\".\n   */\n\n\n  Encoder.appendModeInfo = function (mode, bits) {\n    bits.appendBits(mode.getBits(), 4);\n  };\n  /**\n   * Append length info. On success, store the result in \"bits\".\n   */\n\n\n  Encoder.appendLengthInfo = function (numLetters\n  /*int*/\n  , version, mode, bits) {\n    var numBits = mode.getCharacterCountBits(version);\n\n    if (numLetters >= 1 << numBits) {\n      throw new WriterException_1.default(numLetters + ' is bigger than ' + ((1 << numBits) - 1));\n    }\n\n    bits.appendBits(numLetters, numBits);\n  };\n  /**\n   * Append \"bytes\" in \"mode\" mode (encoding) into \"bits\". On success, store the result in \"bits\".\n   */\n\n\n  Encoder.appendBytes = function (content, mode, bits, encoding) {\n    switch (mode) {\n      case Mode_1.default.NUMERIC:\n        Encoder.appendNumericBytes(content, bits);\n        break;\n\n      case Mode_1.default.ALPHANUMERIC:\n        Encoder.appendAlphanumericBytes(content, bits);\n        break;\n\n      case Mode_1.default.BYTE:\n        Encoder.append8BitBytes(content, bits, encoding);\n        break;\n\n      case Mode_1.default.KANJI:\n        Encoder.appendKanjiBytes(content, bits);\n        break;\n\n      default:\n        throw new WriterException_1.default('Invalid mode: ' + mode);\n    }\n  };\n\n  Encoder.getDigit = function (singleCharacter) {\n    return singleCharacter.charCodeAt(0) - 48;\n  };\n\n  Encoder.isDigit = function (singleCharacter) {\n    var cn = Encoder.getDigit(singleCharacter);\n    return cn >= 0 && cn <= 9;\n  };\n\n  Encoder.appendNumericBytes = function (content, bits) {\n    var length = content.length;\n    var i = 0;\n\n    while (i < length) {\n      var num1 = Encoder.getDigit(content.charAt(i));\n\n      if (i + 2 < length) {\n        // Encode three numeric letters in ten bits.\n        var num2 = Encoder.getDigit(content.charAt(i + 1));\n        var num3 = Encoder.getDigit(content.charAt(i + 2));\n        bits.appendBits(num1 * 100 + num2 * 10 + num3, 10);\n        i += 3;\n      } else if (i + 1 < length) {\n        // Encode two numeric letters in seven bits.\n        var num2 = Encoder.getDigit(content.charAt(i + 1));\n        bits.appendBits(num1 * 10 + num2, 7);\n        i += 2;\n      } else {\n        // Encode one numeric letter in four bits.\n        bits.appendBits(num1, 4);\n        i++;\n      }\n    }\n  };\n\n  Encoder.appendAlphanumericBytes = function (content, bits) {\n    var length = content.length;\n    var i = 0;\n\n    while (i < length) {\n      var code1 = Encoder.getAlphanumericCode(content.charCodeAt(i));\n\n      if (code1 === -1) {\n        throw new WriterException_1.default();\n      }\n\n      if (i + 1 < length) {\n        var code2 = Encoder.getAlphanumericCode(content.charCodeAt(i + 1));\n\n        if (code2 === -1) {\n          throw new WriterException_1.default();\n        } // Encode two alphanumeric letters in 11 bits.\n\n\n        bits.appendBits(code1 * 45 + code2, 11);\n        i += 2;\n      } else {\n        // Encode one alphanumeric letter in six bits.\n        bits.appendBits(code1, 6);\n        i++;\n      }\n    }\n  };\n\n  Encoder.append8BitBytes = function (content, bits, encoding) {\n    var bytes;\n\n    try {\n      bytes = StringEncoding_1.default.encode(content, encoding);\n    } catch (uee\n    /*: UnsupportedEncodingException*/\n    ) {\n      throw new WriterException_1.default(uee);\n    }\n\n    for (var i = 0, length_2 = bytes.length; i !== length_2; i++) {\n      var b = bytes[i];\n      bits.appendBits(b, 8);\n    }\n  };\n  /**\n   * @throws WriterException\n   */\n\n\n  Encoder.appendKanjiBytes = function (content, bits) {\n    var bytes;\n\n    try {\n      bytes = StringEncoding_1.default.encode(content, CharacterSetECI_1.default.SJIS);\n    } catch (uee\n    /*: UnsupportedEncodingException*/\n    ) {\n      throw new WriterException_1.default(uee);\n    }\n\n    var length = bytes.length;\n\n    for (var i = 0; i < length; i += 2) {\n      var byte1 = bytes[i] & 0xFF;\n      var byte2 = bytes[i + 1] & 0xFF;\n      var code = byte1 << 8 & 0xFFFFFFFF | byte2;\n      var subtracted = -1;\n\n      if (code >= 0x8140 && code <= 0x9ffc) {\n        subtracted = code - 0x8140;\n      } else if (code >= 0xe040 && code <= 0xebbf) {\n        subtracted = code - 0xc140;\n      }\n\n      if (subtracted === -1) {\n        throw new WriterException_1.default('Invalid byte sequence');\n      }\n\n      var encoded = (subtracted >> 8) * 0xc0 + (subtracted & 0xff);\n      bits.appendBits(encoded, 13);\n    }\n  };\n\n  Encoder.appendECI = function (eci, bits) {\n    bits.appendBits(Mode_1.default.ECI.getBits(), 4); // This is correct for values up to 127, which is all we need now.\n\n    bits.appendBits(eci.getValue(), 8);\n  }; // The original table is defined in the table 5 of JISX0510:2004 (p.19).\n\n\n  Encoder.ALPHANUMERIC_TABLE = Int32Array.from([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, 37, 38, -1, -1, -1, -1, 39, 40, -1, 41, 42, 43, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 44, -1, -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, -1, -1, -1, -1, -1]);\n  Encoder.DEFAULT_BYTE_MODE_ENCODING = CharacterSetECI_1.default.UTF8.getName(); // \"ISO-8859-1\"\n\n  return Encoder;\n}();\n\nexports.default = Encoder;","map":{"version":3,"mappings":"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","names":["Encoder","matrix","MaskUtil_1","applyMaskPenaltyRule1","applyMaskPenaltyRule2","applyMaskPenaltyRule3","applyMaskPenaltyRule4","content","ecLevel","hints","encoding","DEFAULT_BYTE_MODE_ENCODING","hasEncodingHint","undefined","get","EncodeHintType_1","CHARACTER_SET","toString","mode","chooseMode","headerBits","BitArray_1","Mode_1","BYTE","eci","CharacterSetECI_1","getCharacterSetECIByName","appendECI","appendModeInfo","dataBits","appendBytes","version","QR_VERSION","versionNumber","Number","parseInt","Version_1","getVersionForNumber","bitsNeeded","calculateBitsNeeded","willFit","WriterException_1","recommendVersion","headerAndDataBits","appendBitArray","numLetters","getSizeInBytes","length","appendLengthInfo","ecBlocks","getECBlocksForLevel","numDataBytes","getTotalCodewords","getTotalECCodewords","terminateBits","finalBits","interleaveWithECBytes","getNumBlocks","qrCode","QRCode_1","setECLevel","setMode","setVersion","dimension","getDimensionForVersion","ByteMatrix_1","maskPattern","chooseMaskPattern","setMaskPattern","MatrixUtil_1","buildMatrix","setMatrix","provisionalBitsNeeded","provisionalVersion","chooseVersion","getSize","getCharacterCountBits","code","ALPHANUMERIC_TABLE","SJIS","getName","isOnlyDoubleByteKanji","KANJI","hasNumeric","hasAlphanumeric","i","length_1","c","charAt","isDigit","getAlphanumericCode","charCodeAt","ALPHANUMERIC","NUMERIC","bytes","StringEncoding_1","encode","ignored","byte1","bits","minPenalty","MAX_SAFE_INTEGER","bestMaskPattern","NUM_MASK_PATTERNS","penalty","calculateMaskPenalty","numInputBits","versionNum","numBytes","numEcBytes","totalInputBytes","capacity","appendBit","numBitsInLastByte","numPaddingBytes","appendBits","numTotalBytes","numRSBlocks","blockID","numDataBytesInBlock","numECBytesInBlock","numRsBlocksInGroup2","numRsBlocksInGroup1","numTotalBytesInGroup1","Math","floor","numTotalBytesInGroup2","numDataBytesInGroup1","numDataBytesInGroup2","numEcBytesInGroup1","numEcBytesInGroup2","dataBytesOffset","maxNumDataBytes","maxNumEcBytes","blocks","Array","Int32Array","numEcBytesInBlock","getNumDataBytesAndNumECBytesForBlockID","size","dataBytes","Uint8Array","toBytes","ecBytes","generateECBytes","push","BlockPair_1","max","result","blocks_1_1","block","getDataBytes","blocks_2_1","getErrorCorrectionBytes","toEncode","ReedSolomonEncoder_1","GenericGF_1","QR_CODE_FIELD_256","getBits","numBits","appendNumericBytes","appendAlphanumericBytes","append8BitBytes","appendKanjiBytes","singleCharacter","cn","getDigit","num1","num2","num3","code1","code2","uee","length_2","b","byte2","subtracted","encoded","ECI","getValue","from","UTF8"],"sources":["../../../../src/core/qrcode/encoder/Encoder.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}