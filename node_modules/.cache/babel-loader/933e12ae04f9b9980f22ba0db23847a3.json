{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ExpandedRow =\n/** @class */\nfunction () {\n  function ExpandedRow(pairs, rowNumber, wasReversed) {\n    this.pairs = pairs;\n    this.rowNumber = rowNumber;\n    this.wasReversed = wasReversed;\n  }\n\n  ExpandedRow.prototype.getPairs = function () {\n    return this.pairs;\n  };\n\n  ExpandedRow.prototype.getRowNumber = function () {\n    return this.rowNumber;\n  };\n\n  ExpandedRow.prototype.isReversed = function () {\n    return this.wasReversed;\n  }; // check implementation\n\n\n  ExpandedRow.prototype.isEquivalent = function (otherPairs) {\n    return this.checkEqualitity(this, otherPairs);\n  }; //@Override\n\n\n  ExpandedRow.prototype.toString = function () {\n    return \"{ \" + this.pairs + \" }\";\n  };\n  /**\n   * Two rows are equal if they contain the same pairs in the same order.\n   */\n  //@Override\n  // check implementation\n\n\n  ExpandedRow.prototype.equals = function (o1, o2) {\n    if (!(o1 instanceof ExpandedRow)) {\n      return false;\n    }\n\n    return this.checkEqualitity(o1, o2) && o1.wasReversed === o2.wasReversed;\n  };\n\n  ExpandedRow.prototype.checkEqualitity = function (pair1, pair2) {\n    if (!pair1 || !pair2) return;\n    var result;\n    pair1.forEach(function (e1, i) {\n      pair2.forEach(function (e2) {\n        if (e1.getLeftChar().getValue() === e2.getLeftChar().getValue() && e1.getRightChar().getValue() === e2.getRightChar().getValue() && e1.getFinderPatter().getValue() === e2.getFinderPatter().getValue()) {\n          result = true;\n        }\n      });\n    });\n    return result;\n  };\n\n  return ExpandedRow;\n}();\n\nexports.default = ExpandedRow;","map":{"version":3,"mappings":";;;;;;AAGA;AAAA;AAAA;AAIE,uBAAYA,KAAZ,EAAuCC,SAAvC,EAAwDC,WAAxD,EAA2E;AACzE,SAAKF,KAAL,GAAaA,KAAb;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACD;;AACDC;AACE,WAAO,KAAKH,KAAZ;AACD,GAFD;;AAGAG;AACE,WAAO,KAAKF,SAAZ;AACD,GAFD;;AAGAE;AACE,WAAO,KAAKD,WAAZ;AACD,GAFD,CAfF,CAkBE;;;AACAC,iDAAaC,UAAb,EAA4C;AAC1C,WAAO,KAAKC,eAAL,CAAqB,IAArB,EAA2BD,UAA3B,CAAP;AACD,GAFD,CAnBF,CAsBE;;;AACOD,mCAAP;AACE,WAAO,OAAO,KAAKH,KAAZ,GAAoB,IAA3B;AACD,GAFM;AAIP;;;AAGA;AACE;;;AACKG,iCAAP,UAAcG,EAAd,EAA6BC,EAA7B,EAA2C;AACzC,QAAI,EAAED,EAAE,YAAYH,WAAhB,CAAJ,EAAkC;AAChC,aAAO,KAAP;AACD;;AACD,WAAO,KAAKE,eAAL,CAAqBC,EAArB,EAAwBC,EAAxB,KAA+BD,EAAE,CAACJ,WAAH,KAAmBK,EAAE,CAACL,WAA5D;AACD,GALM;;AAMPC,oDAAgBK,KAAhB,EAA2BC,KAA3B,EAAoC;AAClC,QAAI,CAACD,KAAD,IAAU,CAACC,KAAf,EAAsB;AACtB,QAAIC,MAAJ;AACAF,SAAK,CAACG,OAAN,CAAc,UAACC,EAAD,EAAKC,CAAL,EAAM;AAClBJ,WAAK,CAACE,OAAN,CAAc,cAAE;AACd,YAAIC,EAAE,CAACE,WAAH,GAAiBC,QAAjB,OAAgCC,EAAE,CAACF,WAAH,GAAiBC,QAAjB,EAAhC,IAA+DH,EAAE,CAACK,YAAH,GAAkBF,QAAlB,OAAiCC,EAAE,CAACC,YAAH,GAAkBF,QAAlB,EAAhG,IAAgIH,EAAE,CAACM,eAAH,GAAqBH,QAArB,OAAoCC,EAAE,CAACE,eAAH,GAAqBH,QAArB,EAAxK,EAAyM;AACvML,gBAAM,GAAG,IAAT;AACD;AACF,OAJD;AAKD,KAND;AAOA,WAAOA,MAAP;AACD,GAXD;;AAoBF;AAAC,CA1DD","names":["pairs","rowNumber","wasReversed","ExpandedRow","otherPairs","checkEqualitity","o1","o2","pair1","pair2","result","forEach","e1","i","getLeftChar","getValue","e2","getRightChar","getFinderPatter"],"sources":["../../../../../src/core/oned/rss/expanded/ExpandedRow.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}