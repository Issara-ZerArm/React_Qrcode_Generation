{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar AbstractExpandedDecoder_1 = require(\"./AbstractExpandedDecoder\");\n\nvar AI01decoder =\n/** @class */\nfunction (_super) {\n  __extends(AI01decoder, _super);\n\n  function AI01decoder(information) {\n    return _super.call(this, information) || this;\n  }\n\n  AI01decoder.prototype.encodeCompressedGtin = function (buf, currentPos) {\n    buf.append(\"(01)\");\n    var initialPosition = buf.length();\n    buf.append('9');\n    this.encodeCompressedGtinWithoutAI(buf, currentPos, initialPosition);\n  };\n\n  AI01decoder.prototype.encodeCompressedGtinWithoutAI = function (buf, currentPos, initialBufferPosition) {\n    for (var i = 0; i < 4; ++i) {\n      var currentBlock = this.getGeneralDecoder().extractNumericValueFromBitArray(currentPos + 10 * i, 10);\n\n      if (currentBlock / 100 == 0) {\n        buf.append('0');\n      }\n\n      if (currentBlock / 10 == 0) {\n        buf.append('0');\n      }\n\n      buf.append(currentBlock);\n    }\n\n    AI01decoder.appendCheckDigit(buf, initialBufferPosition);\n  };\n\n  AI01decoder.appendCheckDigit = function (buf, currentPos) {\n    var checkDigit = 0;\n\n    for (var i = 0; i < 13; i++) {\n      //let digit = buf.charAt(i + currentPos) - '0';\n      //To be checked\n      var digit = buf.charAt(i + currentPos).charCodeAt(0) - '0'.charCodeAt(0);\n      checkDigit += (i & 0x01) == 0 ? 3 * digit : digit;\n    }\n\n    checkDigit = 10 - checkDigit % 10;\n\n    if (checkDigit == 10) {\n      checkDigit = 0;\n    }\n\n    buf.append(checkDigit);\n  };\n\n  AI01decoder.GTIN_SIZE = 40;\n  return AI01decoder;\n}(AbstractExpandedDecoder_1.default);\n\nexports.default = AI01decoder;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AAEA;AAAA;AAAA;AAAkDA;;AAIhD,uBAAYC,WAAZ,EAAiC;WAC/BC,kBAAMD,WAAN,KAAkB;AACnB;;AACCE,yDAAqBC,GAArB,EAAwCC,UAAxC,EAAyD;AACzDD,OAAG,CAACE,MAAJ,CAAW,MAAX;AACA,QAAIC,eAAe,GAAGH,GAAG,CAACI,MAAJ,EAAtB;AACAJ,OAAG,CAACE,MAAJ,CAAW,GAAX;AAEA,SAAKG,6BAAL,CAAmCL,GAAnC,EAAwCC,UAAxC,EAAoDE,eAApD;AACD,GANC;;AAQHJ,kEAA+BC,GAA/B,EAAkDC,UAAlD,EAAqEK,qBAArE,EAAiG;AAC9F,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuB,EAAEA,CAAzB,EAA4B;AAC1B,UAAIC,YAAY,GAAG,KAAKC,iBAAL,GAAyBC,+BAAzB,CAAyDT,UAAU,GAAG,KAAKM,CAA3E,EAA8E,EAA9E,CAAnB;;AACA,UAAIC,YAAY,GAAG,GAAf,IAAsB,CAA1B,EAA6B;AAC3BR,WAAG,CAACE,MAAJ,CAAW,GAAX;AACD;;AACD,UAAIM,YAAY,GAAG,EAAf,IAAqB,CAAzB,EAA4B;AAC1BR,WAAG,CAACE,MAAJ,CAAW,GAAX;AACD;;AACDF,SAAG,CAACE,MAAJ,CAAWM,YAAX;AACD;;AAECT,eAAW,CAACY,gBAAZ,CAA6BX,GAA7B,EAAkCM,qBAAlC;AACH,GAbF;;AAeiBP,iCAAhB,UAAiCC,GAAjC,EAAoDC,UAApD,EAAqE;AACnE,QAAIW,UAAU,GAAG,CAAjB;;AACA,SAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B;AACA;AACA,UAAIM,KAAK,GAAGb,GAAG,CAACc,MAAJ,CAAWP,CAAC,GAAGN,UAAf,EAA2Bc,UAA3B,CAAsC,CAAtC,IAA2C,IAAIA,UAAJ,CAAe,CAAf,CAAvD;AACAH,gBAAU,IAAI,CAACL,CAAC,GAAG,IAAL,KAAc,CAAd,GAAkB,IAAIM,KAAtB,GAA8BA,KAA5C;AACD;;AAEDD,cAAU,GAAG,KAAMA,UAAU,GAAG,EAAhC;;AACA,QAAIA,UAAU,IAAI,EAAlB,EAAsB;AACpBA,gBAAU,GAAG,CAAb;AACD;;AAEDZ,OAAG,CAACE,MAAJ,CAAWU,UAAX;AACD,GAfe;;AA5BCb,0BAAmB,EAAnB;AA6CnB;AAAC,CA/CD,CAAkDiB,iCAAlD;;kBAA8BjB","names":["__extends","information","_super","AI01decoder","buf","currentPos","append","initialPosition","length","encodeCompressedGtinWithoutAI","initialBufferPosition","i","currentBlock","getGeneralDecoder","extractNumericValueFromBitArray","appendCheckDigit","checkDigit","digit","charAt","charCodeAt","AbstractExpandedDecoder_1"],"sources":["../../../../../../src/core/oned/rss/expanded/decoders/AI01decoder.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}