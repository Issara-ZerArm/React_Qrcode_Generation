{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar EncodeHintType_1 = require(\"../core/EncodeHintType\");\n\nvar Encoder_1 = require(\"../core/qrcode/encoder/Encoder\");\n\nvar ErrorCorrectionLevel_1 = require(\"../core/qrcode/decoder/ErrorCorrectionLevel\");\n\nvar IllegalArgumentException_1 = require(\"../core/IllegalArgumentException\");\n\nvar IllegalStateException_1 = require(\"../core/IllegalStateException\");\n/**\n * @deprecated Moving to @zxing/browser\n */\n\n\nvar BrowserQRCodeSvgWriter =\n/** @class */\nfunction () {\n  function BrowserQRCodeSvgWriter() {}\n  /**\n   * Writes and renders a QRCode SVG element.\n   *\n   * @param contents\n   * @param width\n   * @param height\n   * @param hints\n   */\n\n\n  BrowserQRCodeSvgWriter.prototype.write = function (contents, width, height, hints) {\n    if (hints === void 0) {\n      hints = null;\n    }\n\n    if (contents.length === 0) {\n      throw new IllegalArgumentException_1.default('Found empty contents');\n    } // if (format != BarcodeFormat.QR_CODE) {\n    //   throw new IllegalArgumentException(\"Can only encode QR_CODE, but got \" + format)\n    // }\n\n\n    if (width < 0 || height < 0) {\n      throw new IllegalArgumentException_1.default('Requested dimensions are too small: ' + width + 'x' + height);\n    }\n\n    var errorCorrectionLevel = ErrorCorrectionLevel_1.default.L;\n    var quietZone = BrowserQRCodeSvgWriter.QUIET_ZONE_SIZE;\n\n    if (hints !== null) {\n      if (undefined !== hints.get(EncodeHintType_1.default.ERROR_CORRECTION)) {\n        errorCorrectionLevel = ErrorCorrectionLevel_1.default.fromString(hints.get(EncodeHintType_1.default.ERROR_CORRECTION).toString());\n      }\n\n      if (undefined !== hints.get(EncodeHintType_1.default.MARGIN)) {\n        quietZone = Number.parseInt(hints.get(EncodeHintType_1.default.MARGIN).toString(), 10);\n      }\n    }\n\n    var code = Encoder_1.default.encode(contents, errorCorrectionLevel, hints);\n    return this.renderResult(code, width, height, quietZone);\n  };\n  /**\n   * Renders the result and then appends it to the DOM.\n   */\n\n\n  BrowserQRCodeSvgWriter.prototype.writeToDom = function (containerElement, contents, width, height, hints) {\n    if (hints === void 0) {\n      hints = null;\n    }\n\n    if (typeof containerElement === 'string') {\n      containerElement = document.querySelector(containerElement);\n    }\n\n    var svgElement = this.write(contents, width, height, hints);\n    if (containerElement) containerElement.appendChild(svgElement);\n  };\n  /**\n   * Note that the input matrix uses 0 == white, 1 == black.\n   * The output matrix uses 0 == black, 255 == white (i.e. an 8 bit greyscale bitmap).\n   */\n\n\n  BrowserQRCodeSvgWriter.prototype.renderResult = function (code, width\n  /*int*/\n  , height\n  /*int*/\n  , quietZone\n  /*int*/\n  ) {\n    var input = code.getMatrix();\n\n    if (input === null) {\n      throw new IllegalStateException_1.default();\n    }\n\n    var inputWidth = input.getWidth();\n    var inputHeight = input.getHeight();\n    var qrWidth = inputWidth + quietZone * 2;\n    var qrHeight = inputHeight + quietZone * 2;\n    var outputWidth = Math.max(width, qrWidth);\n    var outputHeight = Math.max(height, qrHeight);\n    var multiple = Math.min(Math.floor(outputWidth / qrWidth), Math.floor(outputHeight / qrHeight)); // Padding includes both the quiet zone and the extra white pixels to accommodate the requested\n    // dimensions. For example, if input is 25x25 the QR will be 33x33 including the quiet zone.\n    // If the requested size is 200x160, the multiple will be 4, for a QR of 132x132. These will\n    // handle all the padding from 100x100 (the actual QR) up to 200x160.\n\n    var leftPadding = Math.floor((outputWidth - inputWidth * multiple) / 2);\n    var topPadding = Math.floor((outputHeight - inputHeight * multiple) / 2);\n    var svgElement = this.createSVGElement(outputWidth, outputHeight);\n\n    for (var inputY = 0, outputY = topPadding; inputY < inputHeight; inputY++, outputY += multiple) {\n      // Write the contents of this row of the barcode\n      for (var inputX = 0, outputX = leftPadding; inputX < inputWidth; inputX++, outputX += multiple) {\n        if (input.get(inputX, inputY) === 1) {\n          var svgRectElement = this.createSvgRectElement(outputX, outputY, multiple, multiple);\n          svgElement.appendChild(svgRectElement);\n        }\n      }\n    }\n\n    return svgElement;\n  };\n  /**\n   * Creates a SVG element.\n   *\n   * @param w SVG's width attribute\n   * @param h SVG's height attribute\n   */\n\n\n  BrowserQRCodeSvgWriter.prototype.createSVGElement = function (w, h) {\n    var svgElement = document.createElementNS(BrowserQRCodeSvgWriter.SVG_NS, 'svg');\n    svgElement.setAttributeNS(null, 'height', w.toString());\n    svgElement.setAttributeNS(null, 'width', h.toString());\n    return svgElement;\n  };\n  /**\n   * Creates a SVG rect element.\n   *\n   * @param x Element's x coordinate\n   * @param y Element's y coordinate\n   * @param w Element's width attribute\n   * @param h Element's height attribute\n   */\n\n\n  BrowserQRCodeSvgWriter.prototype.createSvgRectElement = function (x, y, w, h) {\n    var rect = document.createElementNS(BrowserQRCodeSvgWriter.SVG_NS, 'rect');\n    rect.setAttributeNS(null, 'x', x.toString());\n    rect.setAttributeNS(null, 'y', y.toString());\n    rect.setAttributeNS(null, 'height', w.toString());\n    rect.setAttributeNS(null, 'width', h.toString());\n    rect.setAttributeNS(null, 'fill', '#000000');\n    return rect;\n  };\n\n  BrowserQRCodeSvgWriter.QUIET_ZONE_SIZE = 4;\n  /**\n   * SVG markup NameSpace\n   */\n\n  BrowserQRCodeSvgWriter.SVG_NS = 'http://www.w3.org/2000/svg';\n  return BrowserQRCodeSvgWriter;\n}();\n\nexports.BrowserQRCodeSvgWriter = BrowserQRCodeSvgWriter;","map":{"version":3,"mappings":";;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;AAEA;;;;;AAGA;AAAA;AAAA;AAAA,qCA2JC;AAlJG;;;;;;;;;;AAQOA,2CAAP,UACIC,QADJ,EAEIC,KAFJ,EAGIC,MAHJ,EAIIC,KAJJ,EAI0C;AAAtC;AAAAA;AAAsC;;AAGtC,QAAIH,QAAQ,CAACI,MAAT,KAAoB,CAAxB,EAA2B;AACvB,YAAM,IAAIC,kCAAJ,CAA6B,sBAA7B,CAAN;AACH,KALqC,CAOtC;AACA;AACA;;;AAEA,QAAIJ,KAAK,GAAG,CAAR,IAAaC,MAAM,GAAG,CAA1B,EAA6B;AACzB,YAAM,IAAIG,kCAAJ,CAA6B,yCAAyCJ,KAAzC,GAAiD,GAAjD,GAAuDC,MAApF,CAAN;AACH;;AAED,QAAII,oBAAoB,GAAGC,+BAAqBC,CAAhD;AACA,QAAIC,SAAS,GAAGV,sBAAsB,CAACW,eAAvC;;AAEA,QAAIP,KAAK,KAAK,IAAd,EAAoB;AAEhB,UAAIQ,SAAS,KAAKR,KAAK,CAACS,GAAN,CAAUC,yBAAeC,gBAAzB,CAAlB,EAA8D;AAC1DR,4BAAoB,GAAGC,+BAAqBQ,UAArB,CAAgCZ,KAAK,CAACS,GAAN,CAAUC,yBAAeC,gBAAzB,EAA2CE,QAA3C,EAAhC,CAAvB;AACH;;AAED,UAAIL,SAAS,KAAKR,KAAK,CAACS,GAAN,CAAUC,yBAAeI,MAAzB,CAAlB,EAAoD;AAChDR,iBAAS,GAAGS,MAAM,CAACC,QAAP,CAAgBhB,KAAK,CAACS,GAAN,CAAUC,yBAAeI,MAAzB,EAAiCD,QAAjC,EAAhB,EAA6D,EAA7D,CAAZ;AACH;AACJ;;AAED,QAAMI,IAAI,GAAGC,kBAAQC,MAAR,CAAetB,QAAf,EAAyBM,oBAAzB,EAA+CH,KAA/C,CAAb;AAEA,WAAO,KAAKoB,YAAL,CAAkBH,IAAlB,EAAwBnB,KAAxB,EAA+BC,MAA/B,EAAuCO,SAAvC,CAAP;AACH,GApCM;AAsCP;;;;;AAGOV,gDAAP,UACIyB,gBADJ,EAEIxB,QAFJ,EAGIC,KAHJ,EAIIC,MAJJ,EAKIC,KALJ,EAK0C;AAAtC;AAAAA;AAAsC;;AAGtC,QAAI,OAAOqB,gBAAP,KAA4B,QAAhC,EAA0C;AACtCA,sBAAgB,GAAGC,QAAQ,CAACC,aAAT,CAAoCF,gBAApC,CAAnB;AACH;;AAED,QAAMG,UAAU,GAAG,KAAKC,KAAL,CAAW5B,QAAX,EAAqBC,KAArB,EAA4BC,MAA5B,EAAoCC,KAApC,CAAnB;AAEA,QAAIqB,gBAAJ,EACIA,gBAAgB,CAACK,WAAjB,CAA6BF,UAA7B;AACP,GAhBM;AAkBP;;;;;;AAIQ5B,kDAAR,UAAqBqB,IAArB,EAAmCnB;AAAc;AAAjD,IAA0DC;AAAe;AAAzE,IAAkFO;AAAkB;AAApG,IAA2G;AAEvG,QAAMqB,KAAK,GAAGV,IAAI,CAACW,SAAL,EAAd;;AAEA,QAAID,KAAK,KAAK,IAAd,EAAoB;AAChB,YAAM,IAAIE,+BAAJ,EAAN;AACH;;AAED,QAAMC,UAAU,GAAGH,KAAK,CAACI,QAAN,EAAnB;AACA,QAAMC,WAAW,GAAGL,KAAK,CAACM,SAAN,EAApB;AACA,QAAMC,OAAO,GAAGJ,UAAU,GAAIxB,SAAS,GAAG,CAA1C;AACA,QAAM6B,QAAQ,GAAGH,WAAW,GAAI1B,SAAS,GAAG,CAA5C;AACA,QAAM8B,WAAW,GAAGC,IAAI,CAACC,GAAL,CAASxC,KAAT,EAAgBoC,OAAhB,CAApB;AACA,QAAMK,YAAY,GAAGF,IAAI,CAACC,GAAL,CAASvC,MAAT,EAAiBoC,QAAjB,CAArB;AAEA,QAAMK,QAAQ,GAAGH,IAAI,CAACI,GAAL,CAASJ,IAAI,CAACK,KAAL,CAAWN,WAAW,GAAGF,OAAzB,CAAT,EAA4CG,IAAI,CAACK,KAAL,CAAWH,YAAY,GAAGJ,QAA1B,CAA5C,CAAjB,CAfuG,CAiBvG;AACA;AACA;AACA;;AACA,QAAMQ,WAAW,GAAGN,IAAI,CAACK,KAAL,CAAW,CAACN,WAAW,GAAIN,UAAU,GAAGU,QAA7B,IAA0C,CAArD,CAApB;AACA,QAAMI,UAAU,GAAGP,IAAI,CAACK,KAAL,CAAW,CAACH,YAAY,GAAIP,WAAW,GAAGQ,QAA/B,IAA4C,CAAvD,CAAnB;AAEA,QAAMhB,UAAU,GAAG,KAAKqB,gBAAL,CAAsBT,WAAtB,EAAmCG,YAAnC,CAAnB;;AAEA,SAAK,IAAIO,MAAM,GAAG,CAAb,EAAgBC,OAAO,GAAGH,UAA/B,EAA2CE,MAAM,GAAGd,WAApD,EAAiEc,MAAM,IAAKC,OAAO,IAAIP,QAAvF,EAAiG;AAC7F;AACA,WAAK,IAAIQ,MAAM,GAAG,CAAb,EAAgBC,OAAO,GAAGN,WAA/B,EAA4CK,MAAM,GAAGlB,UAArD,EAAiEkB,MAAM,IAAKC,OAAO,IAAIT,QAAvF,EAAiG;AAC7F,YAAIb,KAAK,CAAClB,GAAN,CAAUuC,MAAV,EAAkBF,MAAlB,MAA8B,CAAlC,EAAqC;AACjC,cAAMI,cAAc,GAAG,KAAKC,oBAAL,CAA0BF,OAA1B,EAAmCF,OAAnC,EAA4CP,QAA5C,EAAsDA,QAAtD,CAAvB;AACAhB,oBAAU,CAACE,WAAX,CAAuBwB,cAAvB;AACH;AACJ;AACJ;;AAED,WAAO1B,UAAP;AACH,GArCO;AAuCR;;;;;;;;AAMQ5B,sDAAR,UAAyBwD,CAAzB,EAAoCC,CAApC,EAA6C;AAEzC,QAAM7B,UAAU,GAAGF,QAAQ,CAACgC,eAAT,CAAyB1D,sBAAsB,CAAC2D,MAAhD,EAAwD,KAAxD,CAAnB;AAEA/B,cAAU,CAACgC,cAAX,CAA0B,IAA1B,EAAgC,QAAhC,EAA0CJ,CAAC,CAACvC,QAAF,EAA1C;AACAW,cAAU,CAACgC,cAAX,CAA0B,IAA1B,EAAgC,OAAhC,EAAyCH,CAAC,CAACxC,QAAF,EAAzC;AAEA,WAAOW,UAAP;AACH,GARO;AAUR;;;;;;;;;;AAQQ5B,0DAAR,UAA6B6D,CAA7B,EAAwCC,CAAxC,EAAmDN,CAAnD,EAA8DC,CAA9D,EAAuE;AAEnE,QAAMM,IAAI,GAAGrC,QAAQ,CAACgC,eAAT,CAAyB1D,sBAAsB,CAAC2D,MAAhD,EAAwD,MAAxD,CAAb;AAEAI,QAAI,CAACH,cAAL,CAAoB,IAApB,EAA0B,GAA1B,EAA+BC,CAAC,CAAC5C,QAAF,EAA/B;AACA8C,QAAI,CAACH,cAAL,CAAoB,IAApB,EAA0B,GAA1B,EAA+BE,CAAC,CAAC7C,QAAF,EAA/B;AACA8C,QAAI,CAACH,cAAL,CAAoB,IAApB,EAA0B,QAA1B,EAAoCJ,CAAC,CAACvC,QAAF,EAApC;AACA8C,QAAI,CAACH,cAAL,CAAoB,IAApB,EAA0B,OAA1B,EAAmCH,CAAC,CAACxC,QAAF,EAAnC;AACA8C,QAAI,CAACH,cAAL,CAAoB,IAApB,EAA0B,MAA1B,EAAkC,SAAlC;AAEA,WAAOG,IAAP;AACH,GAXO;;AA7IgB/D,2CAAkB,CAAlB;AAExB;;;;AAGwBA,kCAAS,4BAAT;AAoJ5B;AA3JA;;AA6JSgE","names":["BrowserQRCodeSvgWriter","contents","width","height","hints","length","IllegalArgumentException_1","errorCorrectionLevel","ErrorCorrectionLevel_1","L","quietZone","QUIET_ZONE_SIZE","undefined","get","EncodeHintType_1","ERROR_CORRECTION","fromString","toString","MARGIN","Number","parseInt","code","Encoder_1","encode","renderResult","containerElement","document","querySelector","svgElement","write","appendChild","input","getMatrix","IllegalStateException_1","inputWidth","getWidth","inputHeight","getHeight","qrWidth","qrHeight","outputWidth","Math","max","outputHeight","multiple","min","floor","leftPadding","topPadding","createSVGElement","inputY","outputY","inputX","outputX","svgRectElement","createSvgRectElement","w","h","createElementNS","SVG_NS","setAttributeNS","x","y","rect","exports"],"sources":["../../src/browser/BrowserQRCodeSvgWriter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}