{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.qrcode.decoder {*/\n\nvar ErrorCorrectionLevel_1 = require(\"./ErrorCorrectionLevel\");\n\nvar Integer_1 = require(\"../../util/Integer\");\n/**\n * <p>Encapsulates a QR Code's format information, including the data mask used and\n * error correction level.</p>\n *\n * @author Sean Owen\n * @see DataMask\n * @see ErrorCorrectionLevel\n */\n\n\nvar FormatInformation =\n/** @class */\nfunction () {\n  function FormatInformation(formatInfo\n  /*int*/\n  ) {\n    // Bits 3,4\n    this.errorCorrectionLevel = ErrorCorrectionLevel_1.default.forBits(formatInfo >> 3 & 0x03); // Bottom 3 bits\n\n    this.dataMask =\n    /*(byte) */\n    formatInfo & 0x07;\n  }\n\n  FormatInformation.numBitsDiffering = function (a\n  /*int*/\n  , b\n  /*int*/\n  ) {\n    return Integer_1.default.bitCount(a ^ b);\n  };\n  /**\n   * @param maskedFormatInfo1 format info indicator, with mask still applied\n   * @param maskedFormatInfo2 second copy of same info; both are checked at the same time\n   *  to establish best match\n   * @return information about the format it specifies, or {@code null}\n   *  if doesn't seem to match any known pattern\n   */\n\n\n  FormatInformation.decodeFormatInformation = function (maskedFormatInfo1\n  /*int*/\n  , maskedFormatInfo2\n  /*int*/\n  ) {\n    var formatInfo = FormatInformation.doDecodeFormatInformation(maskedFormatInfo1, maskedFormatInfo2);\n\n    if (formatInfo !== null) {\n      return formatInfo;\n    } // Should return null, but, some QR codes apparently\n    // do not mask this info. Try again by actually masking the pattern\n    // first\n\n\n    return FormatInformation.doDecodeFormatInformation(maskedFormatInfo1 ^ FormatInformation.FORMAT_INFO_MASK_QR, maskedFormatInfo2 ^ FormatInformation.FORMAT_INFO_MASK_QR);\n  };\n\n  FormatInformation.doDecodeFormatInformation = function (maskedFormatInfo1\n  /*int*/\n  , maskedFormatInfo2\n  /*int*/\n  ) {\n    var e_1, _a; // Find the int in FORMAT_INFO_DECODE_LOOKUP with fewest bits differing\n\n\n    var bestDifference = Number.MAX_SAFE_INTEGER;\n    var bestFormatInfo = 0;\n\n    try {\n      for (var _b = __values(FormatInformation.FORMAT_INFO_DECODE_LOOKUP), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var decodeInfo = _c.value;\n        var targetInfo = decodeInfo[0];\n\n        if (targetInfo === maskedFormatInfo1 || targetInfo === maskedFormatInfo2) {\n          // Found an exact match\n          return new FormatInformation(decodeInfo[1]);\n        }\n\n        var bitsDifference = FormatInformation.numBitsDiffering(maskedFormatInfo1, targetInfo);\n\n        if (bitsDifference < bestDifference) {\n          bestFormatInfo = decodeInfo[1];\n          bestDifference = bitsDifference;\n        }\n\n        if (maskedFormatInfo1 !== maskedFormatInfo2) {\n          // also try the other option\n          bitsDifference = FormatInformation.numBitsDiffering(maskedFormatInfo2, targetInfo);\n\n          if (bitsDifference < bestDifference) {\n            bestFormatInfo = decodeInfo[1];\n            bestDifference = bitsDifference;\n          }\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    } // Hamming distance of the 32 masked codes is 7, by construction, so <= 3 bits\n    // differing means we found a match\n\n\n    if (bestDifference <= 3) {\n      return new FormatInformation(bestFormatInfo);\n    }\n\n    return null;\n  };\n\n  FormatInformation.prototype.getErrorCorrectionLevel = function () {\n    return this.errorCorrectionLevel;\n  };\n\n  FormatInformation.prototype.getDataMask = function () {\n    return this.dataMask;\n  };\n  /*@Override*/\n\n\n  FormatInformation.prototype.hashCode = function () {\n    return this.errorCorrectionLevel.getBits() << 3 | this.dataMask;\n  };\n  /*@Override*/\n\n\n  FormatInformation.prototype.equals = function (o) {\n    if (!(o instanceof FormatInformation)) {\n      return false;\n    }\n\n    var other = o;\n    return this.errorCorrectionLevel === other.errorCorrectionLevel && this.dataMask === other.dataMask;\n  };\n\n  FormatInformation.FORMAT_INFO_MASK_QR = 0x5412;\n  /**\n   * See ISO 18004:2006, Annex C, Table C.1\n   */\n\n  FormatInformation.FORMAT_INFO_DECODE_LOOKUP = [Int32Array.from([0x5412, 0x00]), Int32Array.from([0x5125, 0x01]), Int32Array.from([0x5E7C, 0x02]), Int32Array.from([0x5B4B, 0x03]), Int32Array.from([0x45F9, 0x04]), Int32Array.from([0x40CE, 0x05]), Int32Array.from([0x4F97, 0x06]), Int32Array.from([0x4AA0, 0x07]), Int32Array.from([0x77C4, 0x08]), Int32Array.from([0x72F3, 0x09]), Int32Array.from([0x7DAA, 0x0A]), Int32Array.from([0x789D, 0x0B]), Int32Array.from([0x662F, 0x0C]), Int32Array.from([0x6318, 0x0D]), Int32Array.from([0x6C41, 0x0E]), Int32Array.from([0x6976, 0x0F]), Int32Array.from([0x1689, 0x10]), Int32Array.from([0x13BE, 0x11]), Int32Array.from([0x1CE7, 0x12]), Int32Array.from([0x19D0, 0x13]), Int32Array.from([0x0762, 0x14]), Int32Array.from([0x0255, 0x15]), Int32Array.from([0x0D0C, 0x16]), Int32Array.from([0x083B, 0x17]), Int32Array.from([0x355F, 0x18]), Int32Array.from([0x3068, 0x19]), Int32Array.from([0x3F31, 0x1A]), Int32Array.from([0x3A06, 0x1B]), Int32Array.from([0x24B4, 0x1C]), Int32Array.from([0x2183, 0x1D]), Int32Array.from([0x2EDA, 0x1E]), Int32Array.from([0x2BED, 0x1F])];\n  return FormatInformation;\n}();\n\nexports.default = FormatInformation;","map":{"version":3,"mappings":"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","names":["formatInfo","errorCorrectionLevel","ErrorCorrectionLevel_1","forBits","dataMask","FormatInformation","a","b","Integer_1","bitCount","maskedFormatInfo1","maskedFormatInfo2","doDecodeFormatInformation","FORMAT_INFO_MASK_QR","bestDifference","Number","MAX_SAFE_INTEGER","bestFormatInfo","FORMAT_INFO_DECODE_LOOKUP","_c","decodeInfo","targetInfo","bitsDifference","numBitsDiffering","getBits","o","other","Int32Array","from"],"sources":["../../../../src/core/qrcode/decoder/FormatInformation.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}