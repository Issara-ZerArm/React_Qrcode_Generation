{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar BitArray_1 = require(\"../../../common/BitArray\");\n\nvar BitArrayBuilder =\n/** @class */\nfunction () {\n  function BitArrayBuilder() {}\n\n  BitArrayBuilder.buildBitArray = function (pairs) {\n    var charNumber = pairs.length * 2 - 1;\n\n    if (pairs[pairs.length - 1].getRightChar() == null) {\n      charNumber -= 1;\n    }\n\n    var size = 12 * charNumber;\n    var binary = new BitArray_1.default(size);\n    var accPos = 0;\n    var firstPair = pairs[0];\n    var firstValue = firstPair.getRightChar().getValue();\n\n    for (var i = 11; i >= 0; --i) {\n      if ((firstValue & 1 << i) != 0) {\n        binary.set(accPos);\n      }\n\n      accPos++;\n    }\n\n    for (var i = 1; i < pairs.length; ++i) {\n      var currentPair = pairs[i];\n      var leftValue = currentPair.getLeftChar().getValue();\n\n      for (var j = 11; j >= 0; --j) {\n        if ((leftValue & 1 << j) != 0) {\n          binary.set(accPos);\n        }\n\n        accPos++;\n      }\n\n      if (currentPair.getRightChar() != null) {\n        var rightValue = currentPair.getRightChar().getValue();\n\n        for (var j = 11; j >= 0; --j) {\n          if ((rightValue & 1 << j) != 0) {\n            binary.set(accPos);\n          }\n\n          accPos++;\n        }\n      }\n    }\n\n    return binary;\n  };\n\n  return BitArrayBuilder;\n}();\n\nexports.default = BitArrayBuilder;","map":{"version":3,"mappings":";;;;;;AAAA;;AAEA;AAAA;AAAA;AACE,8BACC;;AACOA,kCAAR,UAAsBC,KAAtB,EAA+C;AAC7C,QAAIC,UAAU,GAAWD,KAAK,CAACE,MAAN,GAAe,CAAhB,GAAqB,CAA7C;;AACA,QAAIF,KAAK,CAACA,KAAK,CAACE,MAAN,GAAe,CAAhB,CAAL,CAAwBC,YAAxB,MAA0C,IAA9C,EAAoD;AAClDF,gBAAU,IAAI,CAAd;AACD;;AAED,QAAIG,IAAI,GAAU,KAAKH,UAAvB;AAEA,QAAII,MAAM,GAAG,IAAIC,kBAAJ,CAAaF,IAAb,CAAb;AACA,QAAIG,MAAM,GAAG,CAAb;AAEA,QAAKC,SAAS,GAAgBR,KAAK,CAAC,CAAD,CAAnC;AACA,QAAKS,UAAU,GAAGD,SAAS,CAACL,YAAV,GAAyBO,QAAzB,EAAlB;;AACA,SAAK,IAAIC,CAAC,GAAG,EAAb,EAAiBA,CAAC,IAAI,CAAtB,EAAyB,EAAEA,CAA3B,EAA8B;AAC5B,UAAI,CAACF,UAAU,GAAI,KAAKE,CAApB,KAA2B,CAA/B,EAAkC;AAChCN,cAAM,CAACO,GAAP,CAAWL,MAAX;AACD;;AACDA,YAAM;AACP;;AAED,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,KAAK,CAACE,MAA1B,EAAkC,EAAES,CAApC,EAAuC;AACrC,UAAIE,WAAW,GAAgBb,KAAK,CAACW,CAAD,CAApC;AAEA,UAAIG,SAAS,GAAGD,WAAW,CAACE,WAAZ,GAA0BL,QAA1B,EAAhB;;AACA,WAAK,IAAIM,CAAC,GAAG,EAAb,EAAiBA,CAAC,IAAI,CAAtB,EAAyB,EAAEA,CAA3B,EAA8B;AAC5B,YAAI,CAACF,SAAS,GAAI,KAAKE,CAAnB,KAA0B,CAA9B,EAAiC;AAC/BX,gBAAM,CAACO,GAAP,CAAWL,MAAX;AACD;;AACDA,cAAM;AACP;;AAED,UAAIM,WAAW,CAACV,YAAZ,MAA8B,IAAlC,EAAwC;AACtC,YAAIc,UAAU,GAAGJ,WAAW,CAACV,YAAZ,GAA2BO,QAA3B,EAAjB;;AACA,aAAK,IAAIM,CAAC,GAAG,EAAb,EAAiBA,CAAC,IAAI,CAAtB,EAAyB,EAAEA,CAA3B,EAA8B;AAC5B,cAAI,CAACC,UAAU,GAAI,KAAKD,CAApB,KAA2B,CAA/B,EAAkC;AAChCX,kBAAM,CAACO,GAAP,CAAWL,MAAX;AACD;;AACDA,gBAAM;AACP;AACF;AACF;;AACD,WAAOF,MAAP;AACD,GA1CO;;AA4CV;AAAC,CA/CD","names":["BitArrayBuilder","pairs","charNumber","length","getRightChar","size","binary","BitArray_1","accPos","firstPair","firstValue","getValue","i","set","currentPair","leftValue","getLeftChar","j","rightValue"],"sources":["../../../../../src/core/oned/rss/expanded/BitArrayBuilder.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}