{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar DecoderResult_1 = require(\"../../common/DecoderResult\");\n\nvar BitSource_1 = require(\"../../common/BitSource\");\n\nvar StringBuilder_1 = require(\"../../util/StringBuilder\");\n\nvar StringEncoding_1 = require(\"../../util/StringEncoding\");\n\nvar StringUtils_1 = require(\"../../common/StringUtils\");\n\nvar FormatException_1 = require(\"../../FormatException\");\n\nvar IllegalStateException_1 = require(\"../../IllegalStateException\");\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar Mode;\n\n(function (Mode) {\n  Mode[Mode[\"PAD_ENCODE\"] = 0] = \"PAD_ENCODE\";\n  Mode[Mode[\"ASCII_ENCODE\"] = 1] = \"ASCII_ENCODE\";\n  Mode[Mode[\"C40_ENCODE\"] = 2] = \"C40_ENCODE\";\n  Mode[Mode[\"TEXT_ENCODE\"] = 3] = \"TEXT_ENCODE\";\n  Mode[Mode[\"ANSIX12_ENCODE\"] = 4] = \"ANSIX12_ENCODE\";\n  Mode[Mode[\"EDIFACT_ENCODE\"] = 5] = \"EDIFACT_ENCODE\";\n  Mode[Mode[\"BASE256_ENCODE\"] = 6] = \"BASE256_ENCODE\";\n})(Mode || (Mode = {}));\n/**\n * <p>Data Matrix Codes can encode text as bits in one of several modes, and can use multiple modes\n * in one Data Matrix Code. This class decodes the bits back into text.</p>\n *\n * <p>See ISO 16022:2006, 5.2.1 - 5.2.9.2</p>\n *\n * @author bbrown@google.com (Brian Brown)\n * @author Sean Owen\n */\n\n\nvar DecodedBitStreamParser =\n/** @class */\nfunction () {\n  function DecodedBitStreamParser() {}\n\n  DecodedBitStreamParser.decode = function (bytes) {\n    var bits = new BitSource_1.default(bytes);\n    var result = new StringBuilder_1.default();\n    var resultTrailer = new StringBuilder_1.default();\n    var byteSegments = new Array();\n    var mode = Mode.ASCII_ENCODE;\n\n    do {\n      if (mode === Mode.ASCII_ENCODE) {\n        mode = this.decodeAsciiSegment(bits, result, resultTrailer);\n      } else {\n        switch (mode) {\n          case Mode.C40_ENCODE:\n            this.decodeC40Segment(bits, result);\n            break;\n\n          case Mode.TEXT_ENCODE:\n            this.decodeTextSegment(bits, result);\n            break;\n\n          case Mode.ANSIX12_ENCODE:\n            this.decodeAnsiX12Segment(bits, result);\n            break;\n\n          case Mode.EDIFACT_ENCODE:\n            this.decodeEdifactSegment(bits, result);\n            break;\n\n          case Mode.BASE256_ENCODE:\n            this.decodeBase256Segment(bits, result, byteSegments);\n            break;\n\n          default:\n            throw new FormatException_1.default();\n        }\n\n        mode = Mode.ASCII_ENCODE;\n      }\n    } while (mode !== Mode.PAD_ENCODE && bits.available() > 0);\n\n    if (resultTrailer.length() > 0) {\n      result.append(resultTrailer.toString());\n    }\n\n    return new DecoderResult_1.default(bytes, result.toString(), byteSegments.length === 0 ? null : byteSegments, null);\n  };\n  /**\n   * See ISO 16022:2006, 5.2.3 and Annex C, Table C.2\n   */\n\n\n  DecodedBitStreamParser.decodeAsciiSegment = function (bits, result, resultTrailer) {\n    var upperShift = false;\n\n    do {\n      var oneByte = bits.readBits(8);\n\n      if (oneByte === 0) {\n        throw new FormatException_1.default();\n      } else if (oneByte <= 128) {\n        // ASCII data (ASCII value + 1)\n        if (upperShift) {\n          oneByte += 128; // upperShift = false;\n        }\n\n        result.append(String.fromCharCode(oneByte - 1));\n        return Mode.ASCII_ENCODE;\n      } else if (oneByte === 129) {\n        // Pad\n        return Mode.PAD_ENCODE;\n      } else if (oneByte <= 229) {\n        // 2-digit data 00-99 (Numeric Value + 130)\n        var value = oneByte - 130;\n\n        if (value < 10) {\n          // pad with '0' for single digit values\n          result.append('0');\n        }\n\n        result.append('' + value);\n      } else {\n        switch (oneByte) {\n          case 230:\n            // Latch to C40 encodation\n            return Mode.C40_ENCODE;\n\n          case 231:\n            // Latch to Base 256 encodation\n            return Mode.BASE256_ENCODE;\n\n          case 232:\n            // FNC1\n            result.append(String.fromCharCode(29)); // translate as ASCII 29\n\n            break;\n\n          case 233: // Structured Append\n\n          case 234:\n            // Reader Programming\n            // Ignore these symbols for now\n            // throw ReaderException.getInstance();\n            break;\n\n          case 235:\n            // Upper Shift (shift to Extended ASCII)\n            upperShift = true;\n            break;\n\n          case 236:\n            // 05 Macro\n            result.append('[)>\\u001E05\\u001D');\n            resultTrailer.insert(0, '\\u001E\\u0004');\n            break;\n\n          case 237:\n            // 06 Macro\n            result.append('[)>\\u001E06\\u001D');\n            resultTrailer.insert(0, '\\u001E\\u0004');\n            break;\n\n          case 238:\n            // Latch to ANSI X12 encodation\n            return Mode.ANSIX12_ENCODE;\n\n          case 239:\n            // Latch to Text encodation\n            return Mode.TEXT_ENCODE;\n\n          case 240:\n            // Latch to EDIFACT encodation\n            return Mode.EDIFACT_ENCODE;\n\n          case 241:\n            // ECI Character\n            // TODO(bbrown): I think we need to support ECI\n            // throw ReaderException.getInstance();\n            // Ignore this symbol for now\n            break;\n\n          default:\n            // Not to be used in ASCII encodation\n            // but work around encoders that end with 254, latch back to ASCII\n            if (oneByte !== 254 || bits.available() !== 0) {\n              throw new FormatException_1.default();\n            }\n\n            break;\n        }\n      }\n    } while (bits.available() > 0);\n\n    return Mode.ASCII_ENCODE;\n  };\n  /**\n   * See ISO 16022:2006, 5.2.5 and Annex C, Table C.1\n   */\n\n\n  DecodedBitStreamParser.decodeC40Segment = function (bits, result) {\n    // Three C40 values are encoded in a 16-bit value as\n    // (1600 * C1) + (40 * C2) + C3 + 1\n    // TODO(bbrown): The Upper Shift with C40 doesn't work in the 4 value scenario all the time\n    var upperShift = false;\n    var cValues = [];\n    var shift = 0;\n\n    do {\n      // If there is only one byte left then it will be encoded as ASCII\n      if (bits.available() === 8) {\n        return;\n      }\n\n      var firstByte = bits.readBits(8);\n\n      if (firstByte === 254) {\n        // Unlatch codeword\n        return;\n      }\n\n      this.parseTwoBytes(firstByte, bits.readBits(8), cValues);\n\n      for (var i = 0; i < 3; i++) {\n        var cValue = cValues[i];\n\n        switch (shift) {\n          case 0:\n            if (cValue < 3) {\n              shift = cValue + 1;\n            } else if (cValue < this.C40_BASIC_SET_CHARS.length) {\n              var c40char = this.C40_BASIC_SET_CHARS[cValue];\n\n              if (upperShift) {\n                result.append(String.fromCharCode(c40char.charCodeAt(0) + 128));\n                upperShift = false;\n              } else {\n                result.append(c40char);\n              }\n            } else {\n              throw new FormatException_1.default();\n            }\n\n            break;\n\n          case 1:\n            if (upperShift) {\n              result.append(String.fromCharCode(cValue + 128));\n              upperShift = false;\n            } else {\n              result.append(String.fromCharCode(cValue));\n            }\n\n            shift = 0;\n            break;\n\n          case 2:\n            if (cValue < this.C40_SHIFT2_SET_CHARS.length) {\n              var c40char = this.C40_SHIFT2_SET_CHARS[cValue];\n\n              if (upperShift) {\n                result.append(String.fromCharCode(c40char.charCodeAt(0) + 128));\n                upperShift = false;\n              } else {\n                result.append(c40char);\n              }\n            } else {\n              switch (cValue) {\n                case 27:\n                  // FNC1\n                  result.append(String.fromCharCode(29)); // translate as ASCII 29\n\n                  break;\n\n                case 30:\n                  // Upper Shift\n                  upperShift = true;\n                  break;\n\n                default:\n                  throw new FormatException_1.default();\n              }\n            }\n\n            shift = 0;\n            break;\n\n          case 3:\n            if (upperShift) {\n              result.append(String.fromCharCode(cValue + 224));\n              upperShift = false;\n            } else {\n              result.append(String.fromCharCode(cValue + 96));\n            }\n\n            shift = 0;\n            break;\n\n          default:\n            throw new FormatException_1.default();\n        }\n      }\n    } while (bits.available() > 0);\n  };\n  /**\n   * See ISO 16022:2006, 5.2.6 and Annex C, Table C.2\n   */\n\n\n  DecodedBitStreamParser.decodeTextSegment = function (bits, result) {\n    // Three Text values are encoded in a 16-bit value as\n    // (1600 * C1) + (40 * C2) + C3 + 1\n    // TODO(bbrown): The Upper Shift with Text doesn't work in the 4 value scenario all the time\n    var upperShift = false;\n    var cValues = [];\n    var shift = 0;\n\n    do {\n      // If there is only one byte left then it will be encoded as ASCII\n      if (bits.available() === 8) {\n        return;\n      }\n\n      var firstByte = bits.readBits(8);\n\n      if (firstByte === 254) {\n        // Unlatch codeword\n        return;\n      }\n\n      this.parseTwoBytes(firstByte, bits.readBits(8), cValues);\n\n      for (var i = 0; i < 3; i++) {\n        var cValue = cValues[i];\n\n        switch (shift) {\n          case 0:\n            if (cValue < 3) {\n              shift = cValue + 1;\n            } else if (cValue < this.TEXT_BASIC_SET_CHARS.length) {\n              var textChar = this.TEXT_BASIC_SET_CHARS[cValue];\n\n              if (upperShift) {\n                result.append(String.fromCharCode(textChar.charCodeAt(0) + 128));\n                upperShift = false;\n              } else {\n                result.append(textChar);\n              }\n            } else {\n              throw new FormatException_1.default();\n            }\n\n            break;\n\n          case 1:\n            if (upperShift) {\n              result.append(String.fromCharCode(cValue + 128));\n              upperShift = false;\n            } else {\n              result.append(String.fromCharCode(cValue));\n            }\n\n            shift = 0;\n            break;\n\n          case 2:\n            // Shift 2 for Text is the same encoding as C40\n            if (cValue < this.TEXT_SHIFT2_SET_CHARS.length) {\n              var textChar = this.TEXT_SHIFT2_SET_CHARS[cValue];\n\n              if (upperShift) {\n                result.append(String.fromCharCode(textChar.charCodeAt(0) + 128));\n                upperShift = false;\n              } else {\n                result.append(textChar);\n              }\n            } else {\n              switch (cValue) {\n                case 27:\n                  // FNC1\n                  result.append(String.fromCharCode(29)); // translate as ASCII 29\n\n                  break;\n\n                case 30:\n                  // Upper Shift\n                  upperShift = true;\n                  break;\n\n                default:\n                  throw new FormatException_1.default();\n              }\n            }\n\n            shift = 0;\n            break;\n\n          case 3:\n            if (cValue < this.TEXT_SHIFT3_SET_CHARS.length) {\n              var textChar = this.TEXT_SHIFT3_SET_CHARS[cValue];\n\n              if (upperShift) {\n                result.append(String.fromCharCode(textChar.charCodeAt(0) + 128));\n                upperShift = false;\n              } else {\n                result.append(textChar);\n              }\n\n              shift = 0;\n            } else {\n              throw new FormatException_1.default();\n            }\n\n            break;\n\n          default:\n            throw new FormatException_1.default();\n        }\n      }\n    } while (bits.available() > 0);\n  };\n  /**\n   * See ISO 16022:2006, 5.2.7\n   */\n\n\n  DecodedBitStreamParser.decodeAnsiX12Segment = function (bits, result) {\n    // Three ANSI X12 values are encoded in a 16-bit value as\n    // (1600 * C1) + (40 * C2) + C3 + 1\n    var cValues = [];\n\n    do {\n      // If there is only one byte left then it will be encoded as ASCII\n      if (bits.available() === 8) {\n        return;\n      }\n\n      var firstByte = bits.readBits(8);\n\n      if (firstByte === 254) {\n        // Unlatch codeword\n        return;\n      }\n\n      this.parseTwoBytes(firstByte, bits.readBits(8), cValues);\n\n      for (var i = 0; i < 3; i++) {\n        var cValue = cValues[i];\n\n        switch (cValue) {\n          case 0:\n            // X12 segment terminator <CR>\n            result.append('\\r');\n            break;\n\n          case 1:\n            // X12 segment separator *\n            result.append('*');\n            break;\n\n          case 2:\n            // X12 sub-element separator >\n            result.append('>');\n            break;\n\n          case 3:\n            // space\n            result.append(' ');\n            break;\n\n          default:\n            if (cValue < 14) {\n              // 0 - 9\n              result.append(String.fromCharCode(cValue + 44));\n            } else if (cValue < 40) {\n              // A - Z\n              result.append(String.fromCharCode(cValue + 51));\n            } else {\n              throw new FormatException_1.default();\n            }\n\n            break;\n        }\n      }\n    } while (bits.available() > 0);\n  };\n\n  DecodedBitStreamParser.parseTwoBytes = function (firstByte, secondByte, result) {\n    var fullBitValue = (firstByte << 8) + secondByte - 1;\n    var temp = Math.floor(fullBitValue / 1600);\n    result[0] = temp;\n    fullBitValue -= temp * 1600;\n    temp = Math.floor(fullBitValue / 40);\n    result[1] = temp;\n    result[2] = fullBitValue - temp * 40;\n  };\n  /**\n   * See ISO 16022:2006, 5.2.8 and Annex C Table C.3\n   */\n\n\n  DecodedBitStreamParser.decodeEdifactSegment = function (bits, result) {\n    do {\n      // If there is only two or less bytes left then it will be encoded as ASCII\n      if (bits.available() <= 16) {\n        return;\n      }\n\n      for (var i = 0; i < 4; i++) {\n        var edifactValue = bits.readBits(6); // Check for the unlatch character\n\n        if (edifactValue === 0x1F) {\n          // 011111\n          // Read rest of byte, which should be 0, and stop\n          var bitsLeft = 8 - bits.getBitOffset();\n\n          if (bitsLeft !== 8) {\n            bits.readBits(bitsLeft);\n          }\n\n          return;\n        }\n\n        if ((edifactValue & 0x20) === 0) {\n          // no 1 in the leading (6th) bit\n          edifactValue |= 0x40; // Add a leading 01 to the 6 bit binary value\n        }\n\n        result.append(String.fromCharCode(edifactValue));\n      }\n    } while (bits.available() > 0);\n  };\n  /**\n   * See ISO 16022:2006, 5.2.9 and Annex B, B.2\n   */\n\n\n  DecodedBitStreamParser.decodeBase256Segment = function (bits, result, byteSegments) {\n    // Figure out how long the Base 256 Segment is.\n    var codewordPosition = 1 + bits.getByteOffset(); // position is 1-indexed\n\n    var d1 = this.unrandomize255State(bits.readBits(8), codewordPosition++);\n    var count;\n\n    if (d1 === 0) {\n      // Read the remainder of the symbol\n      count = bits.available() / 8 | 0;\n    } else if (d1 < 250) {\n      count = d1;\n    } else {\n      count = 250 * (d1 - 249) + this.unrandomize255State(bits.readBits(8), codewordPosition++);\n    } // We're seeing NegativeArraySizeException errors from users.\n\n\n    if (count < 0) {\n      throw new FormatException_1.default();\n    }\n\n    var bytes = new Uint8Array(count);\n\n    for (var i = 0; i < count; i++) {\n      // Have seen this particular error in the wild, such as at\n      // http://www.bcgen.com/demo/IDAutomationStreamingDataMatrix.aspx?MODE=3&D=Fred&PFMT=3&PT=F&X=0.3&O=0&LM=0.2\n      if (bits.available() < 8) {\n        throw new FormatException_1.default();\n      }\n\n      bytes[i] = this.unrandomize255State(bits.readBits(8), codewordPosition++);\n    }\n\n    byteSegments.push(bytes);\n\n    try {\n      result.append(StringEncoding_1.default.decode(bytes, StringUtils_1.default.ISO88591));\n    } catch (uee) {\n      throw new IllegalStateException_1.default('Platform does not support required encoding: ' + uee.message);\n    }\n  };\n  /**\n   * See ISO 16022:2006, Annex B, B.2\n   */\n\n\n  DecodedBitStreamParser.unrandomize255State = function (randomizedBase256Codeword, base256CodewordPosition) {\n    var pseudoRandomNumber = 149 * base256CodewordPosition % 255 + 1;\n    var tempVariable = randomizedBase256Codeword - pseudoRandomNumber;\n    return tempVariable >= 0 ? tempVariable : tempVariable + 256;\n  };\n  /**\n   * See ISO 16022:2006, Annex C Table C.1\n   * The C40 Basic Character Set (*'s used for placeholders for the shift values)\n   */\n\n\n  DecodedBitStreamParser.C40_BASIC_SET_CHARS = ['*', '*', '*', ' ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n  DecodedBitStreamParser.C40_SHIFT2_SET_CHARS = ['!', '\"', '#', '$', '%', '&', '\\'', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', '\\\\', ']', '^', '_'];\n  /**\n   * See ISO 16022:2006, Annex C Table C.2\n   * The Text Basic Character Set (*'s used for placeholders for the shift values)\n   */\n\n  DecodedBitStreamParser.TEXT_BASIC_SET_CHARS = ['*', '*', '*', ' ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']; // Shift 2 for Text is the same encoding as C40\n\n  DecodedBitStreamParser.TEXT_SHIFT2_SET_CHARS = DecodedBitStreamParser.C40_SHIFT2_SET_CHARS;\n  DecodedBitStreamParser.TEXT_SHIFT3_SET_CHARS = ['`', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '{', '|', '}', '~', String.fromCharCode(127)];\n  return DecodedBitStreamParser;\n}();\n\nexports.default = DecodedBitStreamParser;","map":{"version":3,"mappings":"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","names":["Mode","DecodedBitStreamParser","bytes","bits","BitSource_1","result","StringBuilder_1","resultTrailer","byteSegments","Array","mode","ASCII_ENCODE","decodeAsciiSegment","C40_ENCODE","decodeC40Segment","TEXT_ENCODE","decodeTextSegment","ANSIX12_ENCODE","decodeAnsiX12Segment","EDIFACT_ENCODE","decodeEdifactSegment","BASE256_ENCODE","decodeBase256Segment","FormatException_1","PAD_ENCODE","available","length","append","toString","DecoderResult_1","upperShift","oneByte","readBits","String","fromCharCode","value","insert","cValues","shift","firstByte","parseTwoBytes","i","cValue","C40_BASIC_SET_CHARS","c40char","charCodeAt","C40_SHIFT2_SET_CHARS","TEXT_BASIC_SET_CHARS","textChar","TEXT_SHIFT2_SET_CHARS","TEXT_SHIFT3_SET_CHARS","secondByte","fullBitValue","temp","Math","floor","edifactValue","bitsLeft","getBitOffset","codewordPosition","getByteOffset","d1","unrandomize255State","count","Uint8Array","push","StringEncoding_1","decode","StringUtils_1","ISO88591","uee","IllegalStateException_1","message","randomizedBase256Codeword","base256CodewordPosition","pseudoRandomNumber","tempVariable"],"sources":["../../../../src/core/datamatrix/decoder/DecodedBitStreamParser.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}