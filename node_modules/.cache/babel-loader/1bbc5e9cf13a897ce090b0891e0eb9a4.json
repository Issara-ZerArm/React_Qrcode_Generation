{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar InvertedLuminanceSource_1 = require(\"../core/InvertedLuminanceSource\");\n\nvar LuminanceSource_1 = require(\"../core/LuminanceSource\");\n\nvar IllegalArgumentException_1 = require(\"../core/IllegalArgumentException\");\n/**\n * @deprecated Moving to @zxing/browser\n */\n\n\nvar HTMLCanvasElementLuminanceSource =\n/** @class */\nfunction (_super) {\n  __extends(HTMLCanvasElementLuminanceSource, _super);\n\n  function HTMLCanvasElementLuminanceSource(canvas) {\n    var _this = _super.call(this, canvas.width, canvas.height) || this;\n\n    _this.canvas = canvas;\n    _this.tempCanvasElement = null;\n    _this.buffer = HTMLCanvasElementLuminanceSource.makeBufferFromCanvasImageData(canvas);\n    return _this;\n  }\n\n  HTMLCanvasElementLuminanceSource.makeBufferFromCanvasImageData = function (canvas) {\n    var imageData = canvas.getContext('2d').getImageData(0, 0, canvas.width, canvas.height);\n    return HTMLCanvasElementLuminanceSource.toGrayscaleBuffer(imageData.data, canvas.width, canvas.height);\n  };\n\n  HTMLCanvasElementLuminanceSource.toGrayscaleBuffer = function (imageBuffer, width, height) {\n    var grayscaleBuffer = new Uint8ClampedArray(width * height);\n\n    for (var i = 0, j = 0, length_1 = imageBuffer.length; i < length_1; i += 4, j++) {\n      var gray = void 0;\n      var alpha = imageBuffer[i + 3]; // The color of fully-transparent pixels is irrelevant. They are often, technically, fully-transparent\n      // black (0 alpha, and then 0 RGB). They are often used, of course as the \"white\" area in a\n      // barcode image. Force any such pixel to be white:\n\n      if (alpha === 0) {\n        gray = 0xFF;\n      } else {\n        var pixelR = imageBuffer[i];\n        var pixelG = imageBuffer[i + 1];\n        var pixelB = imageBuffer[i + 2]; // .299R + 0.587G + 0.114B (YUV/YIQ for PAL and NTSC),\n        // (306*R) >> 10 is approximately equal to R*0.299, and so on.\n        // 0x200 >> 10 is 0.5, it implements rounding.\n\n        gray = 306 * pixelR + 601 * pixelG + 117 * pixelB + 0x200 >> 10;\n      }\n\n      grayscaleBuffer[j] = gray;\n    }\n\n    return grayscaleBuffer;\n  };\n\n  HTMLCanvasElementLuminanceSource.prototype.getRow = function (y\n  /*int*/\n  , row) {\n    if (y < 0 || y >= this.getHeight()) {\n      throw new IllegalArgumentException_1.default('Requested row is outside the image: ' + y);\n    }\n\n    var width = this.getWidth();\n    var start = y * width;\n\n    if (row === null) {\n      row = this.buffer.slice(start, start + width);\n    } else {\n      if (row.length < width) {\n        row = new Uint8ClampedArray(width);\n      } // The underlying raster of image consists of bytes with the luminance values\n      // TODO: can avoid set/slice?\n\n\n      row.set(this.buffer.slice(start, start + width));\n    }\n\n    return row;\n  };\n\n  HTMLCanvasElementLuminanceSource.prototype.getMatrix = function () {\n    return this.buffer;\n  };\n\n  HTMLCanvasElementLuminanceSource.prototype.isCropSupported = function () {\n    return true;\n  };\n\n  HTMLCanvasElementLuminanceSource.prototype.crop = function (left\n  /*int*/\n  , top\n  /*int*/\n  , width\n  /*int*/\n  , height\n  /*int*/\n  ) {\n    _super.prototype.crop.call(this, left, top, width, height);\n\n    return this;\n  };\n  /**\n   * This is always true, since the image is a gray-scale image.\n   *\n   * @return true\n   */\n\n\n  HTMLCanvasElementLuminanceSource.prototype.isRotateSupported = function () {\n    return true;\n  };\n\n  HTMLCanvasElementLuminanceSource.prototype.rotateCounterClockwise = function () {\n    this.rotate(-90);\n    return this;\n  };\n\n  HTMLCanvasElementLuminanceSource.prototype.rotateCounterClockwise45 = function () {\n    this.rotate(-45);\n    return this;\n  };\n\n  HTMLCanvasElementLuminanceSource.prototype.getTempCanvasElement = function () {\n    if (null === this.tempCanvasElement) {\n      var tempCanvasElement = this.canvas.ownerDocument.createElement('canvas');\n      tempCanvasElement.width = this.canvas.width;\n      tempCanvasElement.height = this.canvas.height;\n      this.tempCanvasElement = tempCanvasElement;\n    }\n\n    return this.tempCanvasElement;\n  };\n\n  HTMLCanvasElementLuminanceSource.prototype.rotate = function (angle) {\n    var tempCanvasElement = this.getTempCanvasElement();\n    var tempContext = tempCanvasElement.getContext('2d');\n    var angleRadians = angle * HTMLCanvasElementLuminanceSource.DEGREE_TO_RADIANS; // Calculate and set new dimensions for temp canvas\n\n    var width = this.canvas.width;\n    var height = this.canvas.height;\n    var newWidth = Math.ceil(Math.abs(Math.cos(angleRadians)) * width + Math.abs(Math.sin(angleRadians)) * height);\n    var newHeight = Math.ceil(Math.abs(Math.sin(angleRadians)) * width + Math.abs(Math.cos(angleRadians)) * height);\n    tempCanvasElement.width = newWidth;\n    tempCanvasElement.height = newHeight; // Draw at center of temp canvas to prevent clipping of image data\n\n    tempContext.translate(newWidth / 2, newHeight / 2);\n    tempContext.rotate(angleRadians);\n    tempContext.drawImage(this.canvas, width / -2, height / -2);\n    this.buffer = HTMLCanvasElementLuminanceSource.makeBufferFromCanvasImageData(tempCanvasElement);\n    return this;\n  };\n\n  HTMLCanvasElementLuminanceSource.prototype.invert = function () {\n    return new InvertedLuminanceSource_1.default(this);\n  };\n\n  HTMLCanvasElementLuminanceSource.DEGREE_TO_RADIANS = Math.PI / 180;\n  return HTMLCanvasElementLuminanceSource;\n}(LuminanceSource_1.default);\n\nexports.HTMLCanvasElementLuminanceSource = HTMLCanvasElementLuminanceSource;","map":{"version":3,"mappings":"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","names":["__extends","canvas","_super","width","height","_this","buffer","HTMLCanvasElementLuminanceSource","makeBufferFromCanvasImageData","imageData","getContext","getImageData","toGrayscaleBuffer","data","imageBuffer","grayscaleBuffer","Uint8ClampedArray","i","j","length_1","length","gray","alpha","pixelR","pixelG","pixelB","y","row","getHeight","IllegalArgumentException_1","getWidth","start","slice","set","left","top","crop","call","rotate","tempCanvasElement","ownerDocument","createElement","angle","getTempCanvasElement","tempContext","angleRadians","DEGREE_TO_RADIANS","newWidth","Math","ceil","abs","cos","sin","newHeight","translate","drawImage","InvertedLuminanceSource_1","PI","LuminanceSource_1","exports"],"sources":["../../src/browser/HTMLCanvasElementLuminanceSource.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}