{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2012 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.common.detector {*/\n\n/**\n * General math-related and numeric utility functions.\n */\n\nvar MathUtils =\n/** @class */\nfunction () {\n  function MathUtils() {}\n\n  MathUtils.prototype.MathUtils = function () {};\n  /**\n   * Ends up being a bit faster than {@link Math#round(float)}. This merely rounds its\n   * argument to the nearest int, where x.5 rounds up to x+1. Semantics of this shortcut\n   * differ slightly from {@link Math#round(float)} in that half rounds down for negative\n   * values. -2.5 rounds to -3, not -2. For purposes here it makes no difference.\n   *\n   * @param d real value to round\n   * @return nearest {@code int}\n   */\n\n\n  MathUtils.round = function (d\n  /*float*/\n  ) {\n    if (NaN === d) return 0;\n    if (d <= Number.MIN_SAFE_INTEGER) return Number.MIN_SAFE_INTEGER;\n    if (d >= Number.MAX_SAFE_INTEGER) return Number.MAX_SAFE_INTEGER;\n    return (\n      /*(int) */\n      d + (d < 0.0 ? -0.5 : 0.5) | 0\n    );\n  }; // TYPESCRIPTPORT: maybe remove round method and call directly Math.round, it looks like it doesn't make sense for js\n\n  /**\n   * @param aX point A x coordinate\n   * @param aY point A y coordinate\n   * @param bX point B x coordinate\n   * @param bY point B y coordinate\n   * @return Euclidean distance between points A and B\n   */\n\n\n  MathUtils.distance = function (aX\n  /*float|int*/\n  , aY\n  /*float|int*/\n  , bX\n  /*float|int*/\n  , bY\n  /*float|int*/\n  ) {\n    var xDiff = aX - bX;\n    var yDiff = aY - bY;\n    return (\n      /*(float) */\n      Math.sqrt(xDiff * xDiff + yDiff * yDiff)\n    );\n  };\n  /**\n   * @param aX point A x coordinate\n   * @param aY point A y coordinate\n   * @param bX point B x coordinate\n   * @param bY point B y coordinate\n   * @return Euclidean distance between points A and B\n   */\n  // public static distance(aX: number /*int*/, aY: number /*int*/, bX: number /*int*/, bY: number /*int*/): float {\n  //   const xDiff = aX - bX\n  //   const yDiff = aY - bY\n  //   return (float) Math.sqrt(xDiff * xDiff + yDiff * yDiff);\n  // }\n\n  /**\n   * @param array values to sum\n   * @return sum of values in array\n   */\n\n\n  MathUtils.sum = function (array) {\n    var count = 0;\n\n    for (var i = 0, length_1 = array.length; i !== length_1; i++) {\n      var a = array[i];\n      count += a;\n    }\n\n    return count;\n  };\n\n  return MathUtils;\n}();\n\nexports.default = MathUtils;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;AAgBA;;AAEA;;;;AAGA;AAAA;AAAA;AAAA,wBA6DC;;AA3DWA,kCAAR,aACC,CADO;AAGR;;;;;;;;;;;AAScA,oBAAd,UAAoBC;AAAS;AAA7B,IAAsC;AAClC,QAAIC,GAAG,KAAKD,CAAZ,EAAe,OAAO,CAAP;AACf,QAAIA,CAAC,IAAIE,MAAM,CAACC,gBAAhB,EAAkC,OAAOD,MAAM,CAACC,gBAAd;AAClC,QAAIH,CAAC,IAAIE,MAAM,CAACE,gBAAhB,EAAkC,OAAOF,MAAM,CAACE,gBAAd;AAClC;AAAO;AAAWJ,OAAC,IAAIA,CAAC,GAAG,GAAJ,GAAU,CAAC,GAAX,GAAiB,GAArB,CAAF,GAA+B;AAAhD;AACH,GALa,CAdlB,CAoBI;;AAEA;;;;;;;;;AAOcD,uBAAd,UAAuBM;AAAU;AAAjC,IAAgDC;AAAU;AAA1D,IAAyEC;AAAU;AAAnF,IAAkGC;AAAU;AAA5G,IAAyH;AACrH,QAAMC,KAAK,GAAGJ,EAAE,GAAGE,EAAnB;AACA,QAAMG,KAAK,GAAGJ,EAAE,GAAGE,EAAnB;AACA;AAAO;AAAYG,UAAI,CAACC,IAAL,CAAUH,KAAK,GAAGA,KAAR,GAAgBC,KAAK,GAAGA,KAAlC;AAAnB;AACH,GAJa;AAMd;;;;;;;AAOA;AACA;AACA;AACA;AACA;;AAEA;;;;;;AAIcX,kBAAd,UAAkBc,KAAlB,EAAmC;AAC/B,QAAIC,KAAK,GAAG,CAAZ;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,QAAM,GAAGH,KAAK,CAACI,MAA/B,EAAuCF,CAAC,KAAKC,QAA7C,EAAqDD,CAAC,EAAtD,EAA0D;AACtD,UAAMG,CAAC,GAAGL,KAAK,CAACE,CAAD,CAAf;AACAD,WAAK,IAAII,CAAT;AACH;;AACD,WAAOJ,KAAP;AACH,GAPa;;AASlB;AAAC,CA7DD","names":["MathUtils","d","NaN","Number","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","aX","aY","bX","bY","xDiff","yDiff","Math","sqrt","array","count","i","length_1","length","a"],"sources":["../../../../src/core/common/detector/MathUtils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}