{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.qrcode.encoder {*/\n\n/*import java.util.Arrays;*/\n\nvar Arrays_1 = require(\"../../util/Arrays\");\n\nvar StringBuilder_1 = require(\"../../util/StringBuilder\");\n/**\n * JAVAPORT: The original code was a 2D array of ints, but since it only ever gets assigned\n * -1, 0, and 1, I'm going to use less memory and go with bytes.\n *\n * @author dswitkin@google.com (Daniel Switkin)\n */\n\n\nvar ByteMatrix =\n/** @class */\nfunction () {\n  function ByteMatrix(width\n  /*int*/\n  , height\n  /*int*/\n  ) {\n    this.width = width;\n    this.height = height;\n    var bytes = new Array(height); // [height][width]\n\n    for (var i = 0; i !== height; i++) {\n      bytes[i] = new Uint8Array(width);\n    }\n\n    this.bytes = bytes;\n  }\n\n  ByteMatrix.prototype.getHeight = function () {\n    return this.height;\n  };\n\n  ByteMatrix.prototype.getWidth = function () {\n    return this.width;\n  };\n\n  ByteMatrix.prototype.get = function (x\n  /*int*/\n  , y\n  /*int*/\n  ) {\n    return this.bytes[y][x];\n  };\n  /**\n   * @return an internal representation as bytes, in row-major order. array[y][x] represents point (x,y)\n   */\n\n\n  ByteMatrix.prototype.getArray = function () {\n    return this.bytes;\n  }; // TYPESCRIPTPORT: preffer to let two methods instead of override to avoid type comparison inside\n\n\n  ByteMatrix.prototype.setNumber = function (x\n  /*int*/\n  , y\n  /*int*/\n  , value\n  /*byte|int*/\n  ) {\n    this.bytes[y][x] = value;\n  }; // public set(x: number /*int*/, y: number /*int*/, value: number /*int*/): void {\n  //   bytes[y][x] = (byte) value\n  // }\n\n\n  ByteMatrix.prototype.setBoolean = function (x\n  /*int*/\n  , y\n  /*int*/\n  , value) {\n    this.bytes[y][x] =\n    /*(byte) */\n    value ? 1 : 0;\n  };\n\n  ByteMatrix.prototype.clear = function (value\n  /*byte*/\n  ) {\n    var e_1, _a;\n\n    try {\n      for (var _b = __values(this.bytes), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var aByte = _c.value;\n        Arrays_1.default.fill(aByte, value);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  ByteMatrix.prototype.equals = function (o) {\n    if (!(o instanceof ByteMatrix)) {\n      return false;\n    }\n\n    var other = o;\n\n    if (this.width !== other.width) {\n      return false;\n    }\n\n    if (this.height !== other.height) {\n      return false;\n    }\n\n    for (var y = 0, height = this.height; y < height; ++y) {\n      var bytesY = this.bytes[y];\n      var otherBytesY = other.bytes[y];\n\n      for (var x = 0, width = this.width; x < width; ++x) {\n        if (bytesY[x] !== otherBytesY[x]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n  /*@Override*/\n\n\n  ByteMatrix.prototype.toString = function () {\n    var result = new StringBuilder_1.default(); // (2 * width * height + 2)\n\n    for (var y = 0, height = this.height; y < height; ++y) {\n      var bytesY = this.bytes[y];\n\n      for (var x = 0, width = this.width; x < width; ++x) {\n        switch (bytesY[x]) {\n          case 0:\n            result.append(' 0');\n            break;\n\n          case 1:\n            result.append(' 1');\n            break;\n\n          default:\n            result.append('  ');\n            break;\n        }\n      }\n\n      result.append('\\n');\n    }\n\n    return result.toString();\n  };\n\n  return ByteMatrix;\n}();\n\nexports.default = ByteMatrix;","map":{"version":3,"mappings":"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","names":["width","height","bytes","Array","i","Uint8Array","ByteMatrix","x","y","value","_c","aByte","Arrays_1","fill","o","other","bytesY","otherBytesY","result","StringBuilder_1","append","toString"],"sources":["../../../../src/core/qrcode/encoder/ByteMatrix.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}