{"ast":null,"code":"\"use strict\";\n/*\n* Copyright 2009 ZXing authors\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*      http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // import com.google.zxing.NotFoundException;\n// import com.google.zxing.ResultPoint;\n\nvar ResultPoint_1 = require(\"../../ResultPoint\");\n\nvar System_1 = require(\"../../util/System\");\n\nvar Arrays_1 = require(\"../../util/Arrays\");\n\nvar PDF417DetectorResult_1 = require(\"./PDF417DetectorResult\"); // import java.util.ArrayList;\n// import java.util.Arrays;\n// import java.util.List;\n// import java.util.Map;\n\n/**\n * <p>Encapsulates logic that can detect a PDF417 Code in an image, even if the\n * PDF417 Code is rotated or skewed, or partially obscured.</p>\n *\n * @author SITA Lab (kevin.osullivan@sita.aero)\n * @author dswitkin@google.com (Daniel Switkin)\n * @author Guenther Grau\n */\n\n\nvar Detector =\n/** @class */\nfunction () {\n  function Detector() {}\n  /**\n   * <p>Detects a PDF417 Code in an image. Only checks 0 and 180 degree rotations.</p>\n   *\n   * @param image barcode image to decode\n   * @param hints optional hints to detector\n   * @param multiple if true, then the image is searched for multiple codes. If false, then at most one code will\n   * be found and returned\n   * @return {@link PDF417DetectorResult} encapsulating results of detecting a PDF417 code\n   * @throws NotFoundException if no PDF417 Code can be found\n   */\n\n\n  Detector.detectMultiple = function (image, hints, multiple) {\n    // TODO detection improvement, tryHarder could try several different luminance thresholds/blackpoints or even\n    // different binarizers\n    // boolean tryHarder = hints != null && hints.containsKey(DecodeHintType.TRY_HARDER);\n    var bitMatrix = image.getBlackMatrix();\n    var barcodeCoordinates = Detector.detect(multiple, bitMatrix);\n\n    if (!barcodeCoordinates.length) {\n      bitMatrix = bitMatrix.clone();\n      bitMatrix.rotate180();\n      barcodeCoordinates = Detector.detect(multiple, bitMatrix);\n    }\n\n    return new PDF417DetectorResult_1.default(bitMatrix, barcodeCoordinates);\n  };\n  /**\n   * Detects PDF417 codes in an image. Only checks 0 degree rotation\n   * @param multiple if true, then the image is searched for multiple codes. If false, then at most one code will\n   * be found and returned\n   * @param bitMatrix bit matrix to detect barcodes in\n   * @return List of ResultPoint arrays containing the coordinates of found barcodes\n   */\n\n\n  Detector.detect = function (multiple, bitMatrix) {\n    var e_1, _a;\n\n    var barcodeCoordinates = new Array();\n    var row = 0;\n    var column = 0;\n    var foundBarcodeInRow = false;\n\n    while (row < bitMatrix.getHeight()) {\n      var vertices = Detector.findVertices(bitMatrix, row, column);\n\n      if (vertices[0] == null && vertices[3] == null) {\n        if (!foundBarcodeInRow) {\n          // we didn't find any barcode so that's the end of searching\n          break;\n        } // we didn't find a barcode starting at the given column and row. Try again from the first column and slightly\n        // below the lowest barcode we found so far.\n\n\n        foundBarcodeInRow = false;\n        column = 0;\n\n        try {\n          for (var barcodeCoordinates_1 = __values(barcodeCoordinates), barcodeCoordinates_1_1 = barcodeCoordinates_1.next(); !barcodeCoordinates_1_1.done; barcodeCoordinates_1_1 = barcodeCoordinates_1.next()) {\n            var barcodeCoordinate = barcodeCoordinates_1_1.value;\n\n            if (barcodeCoordinate[1] != null) {\n              row = Math.trunc(Math.max(row, barcodeCoordinate[1].getY()));\n            }\n\n            if (barcodeCoordinate[3] != null) {\n              row = Math.max(row, Math.trunc(barcodeCoordinate[3].getY()));\n            }\n          }\n        } catch (e_1_1) {\n          e_1 = {\n            error: e_1_1\n          };\n        } finally {\n          try {\n            if (barcodeCoordinates_1_1 && !barcodeCoordinates_1_1.done && (_a = barcodeCoordinates_1.return)) _a.call(barcodeCoordinates_1);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n        }\n\n        row += Detector.ROW_STEP;\n        continue;\n      }\n\n      foundBarcodeInRow = true;\n      barcodeCoordinates.push(vertices);\n\n      if (!multiple) {\n        break;\n      } // if we didn't find a right row indicator column, then continue the search for the next barcode after the\n      // start pattern of the barcode just found.\n\n\n      if (vertices[2] != null) {\n        column = Math.trunc(vertices[2].getX());\n        row = Math.trunc(vertices[2].getY());\n      } else {\n        column = Math.trunc(vertices[4].getX());\n        row = Math.trunc(vertices[4].getY());\n      }\n    }\n\n    return barcodeCoordinates;\n  };\n  /**\n   * Locate the vertices and the codewords area of a black blob using the Start\n   * and Stop patterns as locators.\n   *\n   * @param matrix the scanned barcode image.\n   * @return an array containing the vertices:\n   *           vertices[0] x, y top left barcode\n   *           vertices[1] x, y bottom left barcode\n   *           vertices[2] x, y top right barcode\n   *           vertices[3] x, y bottom right barcode\n   *           vertices[4] x, y top left codeword area\n   *           vertices[5] x, y bottom left codeword area\n   *           vertices[6] x, y top right codeword area\n   *           vertices[7] x, y bottom right codeword area\n   */\n\n\n  Detector.findVertices = function (matrix, startRow, startColumn) {\n    var height = matrix.getHeight();\n    var width = matrix.getWidth(); // const result = new ResultPoint[8];\n\n    var result = new Array(8);\n    Detector.copyToResult(result, Detector.findRowsWithPattern(matrix, height, width, startRow, startColumn, Detector.START_PATTERN), Detector.INDEXES_START_PATTERN);\n\n    if (result[4] != null) {\n      startColumn = Math.trunc(result[4].getX());\n      startRow = Math.trunc(result[4].getY());\n    }\n\n    Detector.copyToResult(result, Detector.findRowsWithPattern(matrix, height, width, startRow, startColumn, Detector.STOP_PATTERN), Detector.INDEXES_STOP_PATTERN);\n    return result;\n  };\n\n  Detector.copyToResult = function (result, tmpResult, destinationIndexes) {\n    for (var i = 0; i < destinationIndexes.length; i++) {\n      result[destinationIndexes[i]] = tmpResult[i];\n    }\n  };\n\n  Detector.findRowsWithPattern = function (matrix, height, width, startRow, startColumn, pattern) {\n    // const result = new ResultPoint[4];\n    var result = new Array(4);\n    var found = false;\n    var counters = new Int32Array(pattern.length);\n\n    for (; startRow < height; startRow += Detector.ROW_STEP) {\n      var loc = Detector.findGuardPattern(matrix, startColumn, startRow, width, false, pattern, counters);\n\n      if (loc != null) {\n        while (startRow > 0) {\n          var previousRowLoc = Detector.findGuardPattern(matrix, startColumn, --startRow, width, false, pattern, counters);\n\n          if (previousRowLoc != null) {\n            loc = previousRowLoc;\n          } else {\n            startRow++;\n            break;\n          }\n        }\n\n        result[0] = new ResultPoint_1.default(loc[0], startRow);\n        result[1] = new ResultPoint_1.default(loc[1], startRow);\n        found = true;\n        break;\n      }\n    }\n\n    var stopRow = startRow + 1; // Last row of the current symbol that contains pattern\n\n    if (found) {\n      var skippedRowCount = 0;\n      var previousRowLoc = Int32Array.from([Math.trunc(result[0].getX()), Math.trunc(result[1].getX())]);\n\n      for (; stopRow < height; stopRow++) {\n        var loc = Detector.findGuardPattern(matrix, previousRowLoc[0], stopRow, width, false, pattern, counters); // a found pattern is only considered to belong to the same barcode if the start and end positions\n        // don't differ too much. Pattern drift should be not bigger than two for consecutive rows. With\n        // a higher number of skipped rows drift could be larger. To keep it simple for now, we allow a slightly\n        // larger drift and don't check for skipped rows.\n\n        if (loc != null && Math.abs(previousRowLoc[0] - loc[0]) < Detector.MAX_PATTERN_DRIFT && Math.abs(previousRowLoc[1] - loc[1]) < Detector.MAX_PATTERN_DRIFT) {\n          previousRowLoc = loc;\n          skippedRowCount = 0;\n        } else {\n          if (skippedRowCount > Detector.SKIPPED_ROW_COUNT_MAX) {\n            break;\n          } else {\n            skippedRowCount++;\n          }\n        }\n      }\n\n      stopRow -= skippedRowCount + 1;\n      result[2] = new ResultPoint_1.default(previousRowLoc[0], stopRow);\n      result[3] = new ResultPoint_1.default(previousRowLoc[1], stopRow);\n    }\n\n    if (stopRow - startRow < Detector.BARCODE_MIN_HEIGHT) {\n      Arrays_1.default.fill(result, null);\n    }\n\n    return result;\n  };\n  /**\n   * @param matrix row of black/white values to search\n   * @param column x position to start search\n   * @param row y position to start search\n   * @param width the number of pixels to search on this row\n   * @param pattern pattern of counts of number of black and white pixels that are\n   *                 being searched for as a pattern\n   * @param counters array of counters, as long as pattern, to re-use\n   * @return start/end horizontal offset of guard pattern, as an array of two ints.\n   */\n\n\n  Detector.findGuardPattern = function (matrix, column, row, width, whiteFirst, pattern, counters) {\n    Arrays_1.default.fillWithin(counters, 0, counters.length, 0);\n    var patternStart = column;\n    var pixelDrift = 0; // if there are black pixels left of the current pixel shift to the left, but only for MAX_PIXEL_DRIFT pixels\n\n    while (matrix.get(patternStart, row) && patternStart > 0 && pixelDrift++ < Detector.MAX_PIXEL_DRIFT) {\n      patternStart--;\n    }\n\n    var x = patternStart;\n    var counterPosition = 0;\n    var patternLength = pattern.length;\n\n    for (var isWhite = whiteFirst; x < width; x++) {\n      var pixel = matrix.get(x, row);\n\n      if (pixel !== isWhite) {\n        counters[counterPosition]++;\n      } else {\n        if (counterPosition === patternLength - 1) {\n          if (Detector.patternMatchVariance(counters, pattern, Detector.MAX_INDIVIDUAL_VARIANCE) < Detector.MAX_AVG_VARIANCE) {\n            return new Int32Array([patternStart, x]);\n          }\n\n          patternStart += counters[0] + counters[1];\n          System_1.default.arraycopy(counters, 2, counters, 0, counterPosition - 1);\n          counters[counterPosition - 1] = 0;\n          counters[counterPosition] = 0;\n          counterPosition--;\n        } else {\n          counterPosition++;\n        }\n\n        counters[counterPosition] = 1;\n        isWhite = !isWhite;\n      }\n    }\n\n    if (counterPosition === patternLength - 1 && Detector.patternMatchVariance(counters, pattern, Detector.MAX_INDIVIDUAL_VARIANCE) < Detector.MAX_AVG_VARIANCE) {\n      return new Int32Array([patternStart, x - 1]);\n    }\n\n    return null;\n  };\n  /**\n   * Determines how closely a set of observed counts of runs of black/white\n   * values matches a given target pattern. This is reported as the ratio of\n   * the total variance from the expected pattern proportions across all\n   * pattern elements, to the length of the pattern.\n   *\n   * @param counters observed counters\n   * @param pattern expected pattern\n   * @param maxIndividualVariance The most any counter can differ before we give up\n   * @return ratio of total variance between counters and pattern compared to total pattern size\n   */\n\n\n  Detector.patternMatchVariance = function (counters, pattern, maxIndividualVariance) {\n    var numCounters = counters.length;\n    var total = 0;\n    var patternLength = 0;\n\n    for (var i = 0; i < numCounters; i++) {\n      total += counters[i];\n      patternLength += pattern[i];\n    }\n\n    if (total < patternLength) {\n      // If we don't even have one pixel per unit of bar width, assume this\n      // is too small to reliably match, so fail:\n      return (\n        /*Float.POSITIVE_INFINITY*/\n        Infinity\n      );\n    } // We're going to fake floating-point math in integers. We just need to use more bits.\n    // Scale up patternLength so that intermediate values below like scaledCounter will have\n    // more \"significant digits\".\n\n\n    var unitBarWidth = total / patternLength;\n    maxIndividualVariance *= unitBarWidth;\n    var totalVariance = 0.0;\n\n    for (var x = 0; x < numCounters; x++) {\n      var counter = counters[x];\n      var scaledPattern = pattern[x] * unitBarWidth;\n      var variance = counter > scaledPattern ? counter - scaledPattern : scaledPattern - counter;\n\n      if (variance > maxIndividualVariance) {\n        return (\n          /*Float.POSITIVE_INFINITY*/\n          Infinity\n        );\n      }\n\n      totalVariance += variance;\n    }\n\n    return totalVariance / total;\n  };\n\n  Detector.INDEXES_START_PATTERN = Int32Array.from([0, 4, 1, 5]);\n  Detector.INDEXES_STOP_PATTERN = Int32Array.from([6, 2, 7, 3]);\n  Detector.MAX_AVG_VARIANCE = 0.42;\n  Detector.MAX_INDIVIDUAL_VARIANCE = 0.8; // B S B S B S B S Bar/Space pattern\n  // 11111111 0 1 0 1 0 1 000\n\n  Detector.START_PATTERN = Int32Array.from([8, 1, 1, 1, 1, 1, 1, 3]); // 1111111 0 1 000 1 0 1 00 1\n\n  Detector.STOP_PATTERN = Int32Array.from([7, 1, 1, 3, 1, 1, 1, 2, 1]);\n  Detector.MAX_PIXEL_DRIFT = 3;\n  Detector.MAX_PATTERN_DRIFT = 5; // if we set the value too low, then we don't detect the correct height of the bar if the start patterns are damaged.\n  // if we set the value too high, then we might detect the start pattern from a neighbor barcode.\n\n  Detector.SKIPPED_ROW_COUNT_MAX = 25; // A PDF471 barcode should have at least 3 rows, with each row being >= 3 times the module width. Therefore it should be at least\n  // 9 pixels tall. To be conservative, we use about half the size to ensure we don't miss it.\n\n  Detector.ROW_STEP = 5;\n  Detector.BARCODE_MIN_HEIGHT = 10;\n  return Detector;\n}();\n\nexports.default = Detector;","map":{"version":3,"mappings":"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","names":["Detector","image","hints","multiple","bitMatrix","getBlackMatrix","barcodeCoordinates","detect","length","clone","rotate180","PDF417DetectorResult_1","Array","row","column","foundBarcodeInRow","getHeight","vertices","findVertices","barcodeCoordinates_1_1","barcodeCoordinate","Math","trunc","max","getY","ROW_STEP","push","getX","matrix","startRow","startColumn","height","width","getWidth","result","copyToResult","findRowsWithPattern","START_PATTERN","INDEXES_START_PATTERN","STOP_PATTERN","INDEXES_STOP_PATTERN","tmpResult","destinationIndexes","i","pattern","found","counters","Int32Array","loc","findGuardPattern","previousRowLoc","ResultPoint_1","stopRow","skippedRowCount","from","abs","MAX_PATTERN_DRIFT","SKIPPED_ROW_COUNT_MAX","BARCODE_MIN_HEIGHT","Arrays_1","fill","whiteFirst","fillWithin","patternStart","pixelDrift","get","MAX_PIXEL_DRIFT","x","counterPosition","patternLength","isWhite","pixel","patternMatchVariance","MAX_INDIVIDUAL_VARIANCE","MAX_AVG_VARIANCE","System_1","arraycopy","maxIndividualVariance","numCounters","total","Infinity","unitBarWidth","totalVariance","counter","scaledPattern","variance"],"sources":["../../../../src/core/pdf417/detector/Detector.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}