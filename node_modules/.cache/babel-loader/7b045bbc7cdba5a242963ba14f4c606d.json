{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar GenericGFPoly_1 = require(\"./GenericGFPoly\");\n\nvar System_1 = require(\"../../util/System\");\n\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n/**\n * <p>Implements Reed-Solomon encoding, as the name implies.</p>\n *\n * @author Sean Owen\n * @author William Rucklidge\n */\n\n\nvar ReedSolomonEncoder =\n/** @class */\nfunction () {\n  /**\n   * A reed solomon error-correcting encoding constructor is created by\n   * passing as Galois Field with of size equal to the number of code\n   * words (symbols) in the alphabet (the number of values in each\n   * element of arrays that are encoded/decoded).\n   * @param field A galois field with a number of elements equal to the size\n   * of the alphabet of symbols to encode.\n   */\n  function ReedSolomonEncoder(field) {\n    this.field = field;\n    this.cachedGenerators = [];\n    this.cachedGenerators.push(new GenericGFPoly_1.default(field, Int32Array.from([1])));\n  }\n\n  ReedSolomonEncoder.prototype.buildGenerator = function (degree\n  /*int*/\n  ) {\n    var cachedGenerators = this.cachedGenerators;\n\n    if (degree >= cachedGenerators.length) {\n      var lastGenerator = cachedGenerators[cachedGenerators.length - 1];\n      var field = this.field;\n\n      for (var d = cachedGenerators.length; d <= degree; d++) {\n        var nextGenerator = lastGenerator.multiply(new GenericGFPoly_1.default(field, Int32Array.from([1, field.exp(d - 1 + field.getGeneratorBase())])));\n        cachedGenerators.push(nextGenerator);\n        lastGenerator = nextGenerator;\n      }\n    }\n\n    return cachedGenerators[degree];\n  };\n  /**\n   * <p>Encode a sequence of code words (symbols) using Reed-Solomon to allow decoders\n   * to detect and correct errors that may have been introduced when the resulting\n   * data is stored or transmitted.</p>\n   *\n   * @param toEncode array used for both and output. Caller initializes the array with\n   * the code words (symbols) to be encoded followed by empty elements allocated to make\n   * space for error-correction code words in the encoded output. The array contains\n   * the encdoded output when encode returns. Code words are encoded as numbers from\n   * 0 to n-1, where n is the number of possible code words (symbols), as determined\n   * by the size of the Galois Field passed in the constructor of this object.\n   * @param ecBytes the number of elements reserved in the array (first parameter)\n   * to store error-correction code words. Thus, the number of code words (symbols)\n   * to encode in the first parameter is thus toEncode.length - ecBytes.\n   * Note, the use of \"bytes\" in the name of this parameter is misleading, as there may\n   * be more or fewer than 256 symbols being encoded, as determined by the number of\n   * elements in the Galois Field passed as a constructor to this object.\n   * @throws IllegalArgumentException thrown in response to validation errros.\n   */\n\n\n  ReedSolomonEncoder.prototype.encode = function (toEncode, ecBytes\n  /*int*/\n  ) {\n    if (ecBytes === 0) {\n      throw new IllegalArgumentException_1.default('No error correction bytes');\n    }\n\n    var dataBytes = toEncode.length - ecBytes;\n\n    if (dataBytes <= 0) {\n      throw new IllegalArgumentException_1.default('No data bytes provided');\n    }\n\n    var generator = this.buildGenerator(ecBytes);\n    var infoCoefficients = new Int32Array(dataBytes);\n    System_1.default.arraycopy(toEncode, 0, infoCoefficients, 0, dataBytes);\n    var info = new GenericGFPoly_1.default(this.field, infoCoefficients);\n    info = info.multiplyByMonomial(ecBytes, 1);\n    var remainder = info.divide(generator)[1];\n    var coefficients = remainder.getCoefficients();\n    var numZeroCoefficients = ecBytes - coefficients.length;\n\n    for (var i = 0; i < numZeroCoefficients; i++) {\n      toEncode[dataBytes + i] = 0;\n    }\n\n    System_1.default.arraycopy(coefficients, 0, toEncode, dataBytes + numZeroCoefficients, coefficients.length);\n  };\n\n  return ReedSolomonEncoder;\n}();\n\nexports.default = ReedSolomonEncoder;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;AAsBA;;AAEA;;AACA;AAEA;;;;;;;;AAMA;AAAA;AAAA;AAKI;;;;;;;;AAQA,8BAAmBA,KAAnB,EAAmC;AAC/B,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKC,gBAAL,GAAwB,EAAxB;AACA,SAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,IAAIC,uBAAJ,CAAkBH,KAAlB,EAAyBI,UAAU,CAACC,IAAX,CAAgB,CAAC,CAAD,CAAhB,CAAzB,CAA3B;AACH;;AAEOC,gDAAR,UAAuBC;AAAe;AAAtC,IAA6C;AACzC,QAAMN,gBAAgB,GAAG,KAAKA,gBAA9B;;AACA,QAAIM,MAAM,IAAIN,gBAAgB,CAACO,MAA/B,EAAuC;AACnC,UAAIC,aAAa,GAAGR,gBAAgB,CAACA,gBAAgB,CAACO,MAAjB,GAA0B,CAA3B,CAApC;AACA,UAAMR,KAAK,GAAG,KAAKA,KAAnB;;AACA,WAAK,IAAIU,CAAC,GAAGT,gBAAgB,CAACO,MAA9B,EAAsCE,CAAC,IAAIH,MAA3C,EAAmDG,CAAC,EAApD,EAAwD;AACpD,YAAMC,aAAa,GAAGF,aAAa,CAACG,QAAd,CAClB,IAAIT,uBAAJ,CAAkBH,KAAlB,EAAyBI,UAAU,CAACC,IAAX,CAAgB,CAAC,CAAD,EAAIL,KAAK,CAACa,GAAN,CAAUH,CAAC,GAAG,CAAJ,GAAQV,KAAK,CAACc,gBAAN,EAAlB,CAAJ,CAAhB,CAAzB,CADkB,CAAtB;AAEAb,wBAAgB,CAACC,IAAjB,CAAsBS,aAAtB;AACAF,qBAAa,GAAGE,aAAhB;AACH;AACJ;;AACD,WAAOV,gBAAgB,CAACM,MAAD,CAAvB;AACH,GAbO;AAeR;;;;;;;;;;;;;;;;;;;;;AAmBOD,wCAAP,UAAcS,QAAd,EAAoCC;AAAgB;AAApD,IAA2D;AACvD,QAAIA,OAAO,KAAK,CAAhB,EAAmB;AACf,YAAM,IAAIC,kCAAJ,CAA6B,2BAA7B,CAAN;AACH;;AACD,QAAMC,SAAS,GAAGH,QAAQ,CAACP,MAAT,GAAkBQ,OAApC;;AACA,QAAIE,SAAS,IAAI,CAAjB,EAAoB;AAChB,YAAM,IAAID,kCAAJ,CAA6B,wBAA7B,CAAN;AACH;;AACD,QAAME,SAAS,GAAG,KAAKC,cAAL,CAAoBJ,OAApB,CAAlB;AACA,QAAMK,gBAAgB,GAAe,IAAIjB,UAAJ,CAAec,SAAf,CAArC;AACAI,qBAAOC,SAAP,CAAiBR,QAAjB,EAA2B,CAA3B,EAA8BM,gBAA9B,EAAgD,CAAhD,EAAmDH,SAAnD;AACA,QAAIM,IAAI,GAAG,IAAIrB,uBAAJ,CAAkB,KAAKH,KAAvB,EAA8BqB,gBAA9B,CAAX;AACAG,QAAI,GAAGA,IAAI,CAACC,kBAAL,CAAwBT,OAAxB,EAAiC,CAAjC,CAAP;AACA,QAAMU,SAAS,GAAGF,IAAI,CAACG,MAAL,CAAYR,SAAZ,EAAuB,CAAvB,CAAlB;AACA,QAAMS,YAAY,GAAGF,SAAS,CAACG,eAAV,EAArB;AACA,QAAMC,mBAAmB,GAAGd,OAAO,GAAGY,YAAY,CAACpB,MAAnD;;AACA,SAAK,IAAIuB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,mBAApB,EAAyCC,CAAC,EAA1C,EAA8C;AAC1ChB,cAAQ,CAACG,SAAS,GAAGa,CAAb,CAAR,GAA0B,CAA1B;AACH;;AACDT,qBAAOC,SAAP,CAAiBK,YAAjB,EAA+B,CAA/B,EAAkCb,QAAlC,EAA4CG,SAAS,GAAGY,mBAAxD,EAA6EF,YAAY,CAACpB,MAA1F;AACH,GApBM;;AAsBX;AAAC,CA3ED","names":["field","cachedGenerators","push","GenericGFPoly_1","Int32Array","from","ReedSolomonEncoder","degree","length","lastGenerator","d","nextGenerator","multiply","exp","getGeneratorBase","toEncode","ecBytes","IllegalArgumentException_1","dataBytes","generator","buildGenerator","infoCoefficients","System_1","arraycopy","info","multiplyByMonomial","remainder","divide","coefficients","getCoefficients","numZeroCoefficients","i"],"sources":["../../../../src/core/common/reedsolomon/ReedSolomonEncoder.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}