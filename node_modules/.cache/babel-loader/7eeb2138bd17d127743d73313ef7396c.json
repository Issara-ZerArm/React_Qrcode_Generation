{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.common {*/\n\nvar GridSampler_1 = require(\"./GridSampler\");\n\nvar BitMatrix_1 = require(\"./BitMatrix\");\n\nvar PerspectiveTransform_1 = require(\"./PerspectiveTransform\");\n\nvar NotFoundException_1 = require(\"../NotFoundException\");\n/**\n * @author Sean Owen\n */\n\n\nvar DefaultGridSampler =\n/** @class */\nfunction (_super) {\n  __extends(DefaultGridSampler, _super);\n\n  function DefaultGridSampler() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /*@Override*/\n\n\n  DefaultGridSampler.prototype.sampleGrid = function (image, dimensionX\n  /*int*/\n  , dimensionY\n  /*int*/\n  , p1ToX\n  /*float*/\n  , p1ToY\n  /*float*/\n  , p2ToX\n  /*float*/\n  , p2ToY\n  /*float*/\n  , p3ToX\n  /*float*/\n  , p3ToY\n  /*float*/\n  , p4ToX\n  /*float*/\n  , p4ToY\n  /*float*/\n  , p1FromX\n  /*float*/\n  , p1FromY\n  /*float*/\n  , p2FromX\n  /*float*/\n  , p2FromY\n  /*float*/\n  , p3FromX\n  /*float*/\n  , p3FromY\n  /*float*/\n  , p4FromX\n  /*float*/\n  , p4FromY\n  /*float*/\n  ) {\n    var transform = PerspectiveTransform_1.default.quadrilateralToQuadrilateral(p1ToX, p1ToY, p2ToX, p2ToY, p3ToX, p3ToY, p4ToX, p4ToY, p1FromX, p1FromY, p2FromX, p2FromY, p3FromX, p3FromY, p4FromX, p4FromY);\n    return this.sampleGridWithTransform(image, dimensionX, dimensionY, transform);\n  };\n  /*@Override*/\n\n\n  DefaultGridSampler.prototype.sampleGridWithTransform = function (image, dimensionX\n  /*int*/\n  , dimensionY\n  /*int*/\n  , transform) {\n    if (dimensionX <= 0 || dimensionY <= 0) {\n      throw new NotFoundException_1.default();\n    }\n\n    var bits = new BitMatrix_1.default(dimensionX, dimensionY);\n    var points = new Float32Array(2 * dimensionX);\n\n    for (var y = 0; y < dimensionY; y++) {\n      var max = points.length;\n      var iValue = y + 0.5;\n\n      for (var x = 0; x < max; x += 2) {\n        points[x] = x / 2 + 0.5;\n        points[x + 1] = iValue;\n      }\n\n      transform.transformPoints(points); // Quick check to see if points transformed to something inside the image\n      // sufficient to check the endpoints\n\n      GridSampler_1.default.checkAndNudgePoints(image, points);\n\n      try {\n        for (var x = 0; x < max; x += 2) {\n          if (image.get(Math.floor(points[x]), Math.floor(points[x + 1]))) {\n            // Black(-ish) pixel\n            bits.set(x / 2, y);\n          }\n        }\n      } catch (aioobe\n      /*: ArrayIndexOutOfBoundsException*/\n      ) {\n        // This feels wrong, but, sometimes if the finder patterns are misidentified, the resulting\n        // transform gets \"twisted\" such that it maps a straight line of points to a set of points\n        // whose endpoints are in bounds, but others are not. There is probably some mathematical\n        // way to detect this about the transformation that I don't know yet.\n        // This results in an ugly runtime exception despite our clever checks above -- can't have\n        // that. We could check each point's coordinates but that feels duplicative. We settle for\n        // catching and wrapping ArrayIndexOutOfBoundsException.\n        throw new NotFoundException_1.default();\n      }\n    }\n\n    return bits;\n  };\n\n  return DefaultGridSampler;\n}(GridSampler_1.default);\n\nexports.default = DefaultGridSampler;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA;;AAEA;;AACA;;AACA;;AAEA;AAIA;;;;;AAGA;AAAA;AAAA;AAAgDA;;AAAhD;;AAgEC;AA9DG;;;AACOC,4CAAP,UAAkBC,KAAlB,EACIC;AAAmB;AADvB,IAEIC;AAAmB;AAFvB,IAGIC;AAAa;AAHjB,IAG4BC;AAAa;AAHzC,IAIIC;AAAa;AAJjB,IAI4BC;AAAa;AAJzC,IAKIC;AAAa;AALjB,IAK4BC;AAAa;AALzC,IAMIC;AAAa;AANjB,IAM4BC;AAAa;AANzC,IAOIC;AAAe;AAPnB,IAO8BC;AAAe;AAP7C,IAQIC;AAAe;AARnB,IAQ8BC;AAAe;AAR7C,IASIC;AAAe;AATnB,IAS8BC;AAAe;AAT7C,IAUIC;AAAe;AAVnB,IAU8BC;AAAe;AAV7C,IAUsD;AAElD,QAAMC,SAAS,GAAGC,+BAAqBC,4BAArB,CACdlB,KADc,EACPC,KADO,EACAC,KADA,EACOC,KADP,EACcC,KADd,EACqBC,KADrB,EAC4BC,KAD5B,EACmCC,KADnC,EAEdC,OAFc,EAELC,OAFK,EAEIC,OAFJ,EAEaC,OAFb,EAEsBC,OAFtB,EAE+BC,OAF/B,EAEwCC,OAFxC,EAEiDC,OAFjD,CAAlB;AAIA,WAAO,KAAKI,uBAAL,CAA6BtB,KAA7B,EAAoCC,UAApC,EAAgDC,UAAhD,EAA4DiB,SAA5D,CAAP;AACH,GAjBM;AAmBP;;;AACOpB,yDAAP,UAA+BC,KAA/B,EACIC;AAAmB;AADvB,IAEIC;AAAmB;AAFvB,IAGIiB,SAHJ,EAGmC;AAC/B,QAAIlB,UAAU,IAAI,CAAd,IAAmBC,UAAU,IAAI,CAArC,EAAwC;AACpC,YAAM,IAAIqB,2BAAJ,EAAN;AACH;;AACD,QAAMC,IAAI,GAAG,IAAIC,mBAAJ,CAAcxB,UAAd,EAA0BC,UAA1B,CAAb;AACA,QAAMwB,MAAM,GAAG,IAAIC,YAAJ,CAAiB,IAAI1B,UAArB,CAAf;;AACA,SAAK,IAAI2B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG1B,UAApB,EAAgC0B,CAAC,EAAjC,EAAqC;AACjC,UAAMC,GAAG,GAAGH,MAAM,CAACI,MAAnB;AACA,UAAMC,MAAM,GAAqBH,CAAC,GAAG,GAArC;;AACA,WAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAApB,EAAyBG,CAAC,IAAI,CAA9B,EAAiC;AAC7BN,cAAM,CAACM,CAAD,CAAN,GAAqBA,CAAC,GAAG,CAAL,GAAU,GAA9B;AACAN,cAAM,CAACM,CAAC,GAAG,CAAL,CAAN,GAAgBD,MAAhB;AACH;;AACDZ,eAAS,CAACc,eAAV,CAA0BP,MAA1B,EAPiC,CAQjC;AACA;;AACAQ,4BAAYC,mBAAZ,CAAgCnC,KAAhC,EAAuC0B,MAAvC;;AACA,UAAI;AACA,aAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAApB,EAAyBG,CAAC,IAAI,CAA9B,EAAiC;AAC7B,cAAIhC,KAAK,CAACoC,GAAN,CAAUC,IAAI,CAACC,KAAL,CAAWZ,MAAM,CAACM,CAAD,CAAjB,CAAV,EAAiCK,IAAI,CAACC,KAAL,CAAWZ,MAAM,CAACM,CAAC,GAAG,CAAL,CAAjB,CAAjC,CAAJ,EAAiE;AAC7D;AACAR,gBAAI,CAACe,GAAL,CAASP,CAAC,GAAG,CAAb,EAAgBJ,CAAhB;AACH;AACJ;AACJ,OAPD,CAOE,OAAOY;AAAM;AAAb,QAAmD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAM,IAAIjB,2BAAJ,EAAN;AACH;AACJ;;AACD,WAAOC,IAAP;AACH,GAvCM;;AAyCX;AAhEA,EAAgDU,qBAAhD","names":["__extends","DefaultGridSampler","image","dimensionX","dimensionY","p1ToX","p1ToY","p2ToX","p2ToY","p3ToX","p3ToY","p4ToX","p4ToY","p1FromX","p1FromY","p2FromX","p2FromY","p3FromX","p3FromY","p4FromX","p4FromY","transform","PerspectiveTransform_1","quadrilateralToQuadrilateral","sampleGridWithTransform","NotFoundException_1","bits","BitMatrix_1","points","Float32Array","y","max","length","iValue","x","transformPoints","GridSampler_1","checkAndNudgePoints","get","Math","floor","set","aioobe"],"sources":["../../../src/core/common/DefaultGridSampler.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}