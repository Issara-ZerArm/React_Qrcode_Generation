{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ReedSolomonDecoder_1 = require(\"../../common/reedsolomon/ReedSolomonDecoder\");\n\nvar GenericGF_1 = require(\"../../common/reedsolomon/GenericGF\");\n\nvar BitMatrixParser_1 = require(\"./BitMatrixParser\");\n\nvar DataBlock_1 = require(\"./DataBlock\");\n\nvar DecodedBitStreamParser_1 = require(\"./DecodedBitStreamParser\");\n\nvar ChecksumException_1 = require(\"../../ChecksumException\");\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * <p>The main class which implements Data Matrix Code decoding -- as opposed to locating and extracting\n * the Data Matrix Code from an image.</p>\n *\n * @author bbrown@google.com (Brian Brown)\n */\n\n\nvar Decoder =\n/** @class */\nfunction () {\n  function Decoder() {\n    this.rsDecoder = new ReedSolomonDecoder_1.default(GenericGF_1.default.DATA_MATRIX_FIELD_256);\n  }\n  /**\n   * <p>Decodes a Data Matrix Code represented as a {@link BitMatrix}. A 1 or \"true\" is taken\n   * to mean a black module.</p>\n   *\n   * @param bits booleans representing white/black Data Matrix Code modules\n   * @return text and bytes encoded within the Data Matrix Code\n   * @throws FormatException if the Data Matrix Code cannot be decoded\n   * @throws ChecksumException if error correction fails\n   */\n\n\n  Decoder.prototype.decode = function (bits) {\n    var e_1, _a; // Construct a parser and read version, error-correction level\n\n\n    var parser = new BitMatrixParser_1.default(bits);\n    var version = parser.getVersion(); // Read codewords\n\n    var codewords = parser.readCodewords(); // Separate into data blocks\n\n    var dataBlocks = DataBlock_1.default.getDataBlocks(codewords, version); // Count total number of data bytes\n\n    var totalBytes = 0;\n\n    try {\n      for (var dataBlocks_1 = __values(dataBlocks), dataBlocks_1_1 = dataBlocks_1.next(); !dataBlocks_1_1.done; dataBlocks_1_1 = dataBlocks_1.next()) {\n        var db = dataBlocks_1_1.value;\n        totalBytes += db.getNumDataCodewords();\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (dataBlocks_1_1 && !dataBlocks_1_1.done && (_a = dataBlocks_1.return)) _a.call(dataBlocks_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    var resultBytes = new Uint8Array(totalBytes);\n    var dataBlocksCount = dataBlocks.length; // Error-correct and copy data blocks together into a stream of bytes\n\n    for (var j = 0; j < dataBlocksCount; j++) {\n      var dataBlock = dataBlocks[j];\n      var codewordBytes = dataBlock.getCodewords();\n      var numDataCodewords = dataBlock.getNumDataCodewords();\n      this.correctErrors(codewordBytes, numDataCodewords);\n\n      for (var i = 0; i < numDataCodewords; i++) {\n        // De-interlace data blocks.\n        resultBytes[i * dataBlocksCount + j] = codewordBytes[i];\n      }\n    } // Decode the contents of that stream of bytes\n\n\n    return DecodedBitStreamParser_1.default.decode(resultBytes);\n  };\n  /**\n   * <p>Given data and error-correction codewords received, possibly corrupted by errors, attempts to\n   * correct the errors in-place using Reed-Solomon error correction.</p>\n   *\n   * @param codewordBytes data and error correction codewords\n   * @param numDataCodewords number of codewords that are data bytes\n   * @throws ChecksumException if error correction fails\n   */\n\n\n  Decoder.prototype.correctErrors = function (codewordBytes, numDataCodewords) {\n    var numCodewords = codewordBytes.length; // First read into an array of ints\n\n    var codewordsInts = new Int32Array(codewordBytes); // for (let i = 0; i < numCodewords; i++) {\n    //   codewordsInts[i] = codewordBytes[i] & 0xFF;\n    // }\n\n    try {\n      this.rsDecoder.decode(codewordsInts, codewordBytes.length - numDataCodewords);\n    } catch (ignored\n    /* ReedSolomonException */\n    ) {\n      throw new ChecksumException_1.default();\n    } // Copy back into array of bytes -- only need to worry about the bytes that were data\n    // We don't care about errors in the error-correction codewords\n\n\n    for (var i = 0; i < numDataCodewords; i++) {\n      codewordBytes[i] = codewordsInts[i];\n    }\n  };\n\n  return Decoder;\n}();\n\nexports.default = Decoder;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAGA;;AACA;;AACA;;AACA;AAEA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;AAMA;AAAA;AAAA;AAIE;AACE,SAAKA,SAAL,GAAiB,IAAIC,4BAAJ,CAAuBC,oBAAUC,qBAAjC,CAAjB;AACD;AAED;;;;;;;;;;;AASOC,6BAAP,UAAcC,IAAd,EAA6B;gBAAA,CAC3B;;;AACA,QAAMC,MAAM,GAAG,IAAIC,yBAAJ,CAAoBF,IAApB,CAAf;AACA,QAAMG,OAAO,GAAGF,MAAM,CAACG,UAAP,EAAhB,CAH2B,CAK3B;;AACA,QAAMC,SAAS,GAAGJ,MAAM,CAACK,aAAP,EAAlB,CAN2B,CAO3B;;AACA,QAAMC,UAAU,GAAGC,oBAAUC,aAAV,CAAwBJ,SAAxB,EAAmCF,OAAnC,CAAnB,CAR2B,CAU3B;;AACA,QAAIO,UAAU,GAAG,CAAjB;;;AACA,WAAe,yCAAUC,oCAAzB,EAAyB,oBAAzB,EAAyBA,oCAAzB,EAA2B;AAAtB,YAAIC,EAAE,uBAAN;AACHF,kBAAU,IAAIE,EAAE,CAACC,mBAAH,EAAd;AACD;;;;;;;;;;;;;AACD,QAAMC,WAAW,GAAG,IAAIC,UAAJ,CAAeL,UAAf,CAApB;AAEA,QAAMM,eAAe,GAAGT,UAAU,CAACU,MAAnC,CAjB2B,CAkB3B;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,eAApB,EAAqCE,CAAC,EAAtC,EAA0C;AACxC,UAAMC,SAAS,GAAGZ,UAAU,CAACW,CAAD,CAA5B;AACA,UAAME,aAAa,GAAGD,SAAS,CAACE,YAAV,EAAtB;AACA,UAAMC,gBAAgB,GAAGH,SAAS,CAACN,mBAAV,EAAzB;AACA,WAAKU,aAAL,CAAmBH,aAAnB,EAAkCE,gBAAlC;;AACA,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,gBAApB,EAAsCE,CAAC,EAAvC,EAA2C;AACzC;AACAV,mBAAW,CAACU,CAAC,GAAGR,eAAJ,GAAsBE,CAAvB,CAAX,GAAuCE,aAAa,CAACI,CAAD,CAApD;AACD;AACF,KA5B0B,CA8B3B;;;AACA,WAAOC,iCAAuBC,MAAvB,CAA8BZ,WAA9B,CAAP;AACD,GAhCM;AAkCP;;;;;;;;;;AAQQf,oCAAR,UAAsBqB,aAAtB,EAAiDE,gBAAjD,EAAyE;AACvE,QAAMK,YAAY,GAAGP,aAAa,CAACH,MAAnC,CADuE,CAEvE;;AACA,QAAMW,aAAa,GAAG,IAAIC,UAAJ,CAAeT,aAAf,CAAtB,CAHuE,CAIvE;AACA;AACA;;AACA,QAAI;AACF,WAAKzB,SAAL,CAAe+B,MAAf,CAAsBE,aAAtB,EAAqCR,aAAa,CAACH,MAAd,GAAuBK,gBAA5D;AACD,KAFD,CAEE,OAAOQ;AAAQ;AAAf,MAA2C;AAC3C,YAAM,IAAIC,2BAAJ,EAAN;AACD,KAXsE,CAYvE;AACA;;;AACA,SAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,gBAApB,EAAsCE,CAAC,EAAvC,EAA2C;AACzCJ,mBAAa,CAACI,CAAD,CAAb,GAAmBI,aAAa,CAACJ,CAAD,CAAhC;AACD;AACF,GAjBO;;AAmBV;AAAC,CA9ED","names":["rsDecoder","ReedSolomonDecoder_1","GenericGF_1","DATA_MATRIX_FIELD_256","Decoder","bits","parser","BitMatrixParser_1","version","getVersion","codewords","readCodewords","dataBlocks","DataBlock_1","getDataBlocks","totalBytes","dataBlocks_1_1","db","getNumDataCodewords","resultBytes","Uint8Array","dataBlocksCount","length","j","dataBlock","codewordBytes","getCodewords","numDataCodewords","correctErrors","i","DecodedBitStreamParser_1","decode","numCodewords","codewordsInts","Int32Array","ignored","ChecksumException_1"],"sources":["../../../../src/core/datamatrix/decoder/Decoder.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}