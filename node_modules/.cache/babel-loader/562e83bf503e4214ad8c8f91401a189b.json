{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2010 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Result_1 = require(\"../Result\");\n\nvar BarcodeFormat_1 = require(\"../BarcodeFormat\");\n\nvar DecodeHintType_1 = require(\"../DecodeHintType\");\n\nvar ResultMetadataType_1 = require(\"../ResultMetadataType\");\n\nvar System_1 = require(\"../util/System\");\n\nvar Decoder_1 = require(\"./decoder/Decoder\");\n\nvar Detector_1 = require(\"./detector/Detector\"); // import java.util.List;\n// import java.util.Map;\n\n/**\n * This implementation can detect and decode Aztec codes in an image.\n *\n * @author David Olivier\n */\n\n\nvar AztecReader =\n/** @class */\nfunction () {\n  function AztecReader() {}\n  /**\n   * Locates and decodes a Data Matrix code in an image.\n   *\n   * @return a String representing the content encoded by the Data Matrix code\n   * @throws NotFoundException if a Data Matrix code cannot be found\n   * @throws FormatException if a Data Matrix code cannot be decoded\n   */\n\n\n  AztecReader.prototype.decode = function (image, hints) {\n    if (hints === void 0) {\n      hints = null;\n    }\n\n    var exception = null;\n    var detector = new Detector_1.default(image.getBlackMatrix());\n    var points = null;\n    var decoderResult = null;\n\n    try {\n      var detectorResult = detector.detectMirror(false);\n      points = detectorResult.getPoints();\n      this.reportFoundResultPoints(hints, points);\n      decoderResult = new Decoder_1.default().decode(detectorResult);\n    } catch (e) {\n      exception = e;\n    }\n\n    if (decoderResult == null) {\n      try {\n        var detectorResult = detector.detectMirror(true);\n        points = detectorResult.getPoints();\n        this.reportFoundResultPoints(hints, points);\n        decoderResult = new Decoder_1.default().decode(detectorResult);\n      } catch (e) {\n        if (exception != null) {\n          throw exception;\n        }\n\n        throw e;\n      }\n    }\n\n    var result = new Result_1.default(decoderResult.getText(), decoderResult.getRawBytes(), decoderResult.getNumBits(), points, BarcodeFormat_1.default.AZTEC, System_1.default.currentTimeMillis());\n    var byteSegments = decoderResult.getByteSegments();\n\n    if (byteSegments != null) {\n      result.putMetadata(ResultMetadataType_1.default.BYTE_SEGMENTS, byteSegments);\n    }\n\n    var ecLevel = decoderResult.getECLevel();\n\n    if (ecLevel != null) {\n      result.putMetadata(ResultMetadataType_1.default.ERROR_CORRECTION_LEVEL, ecLevel);\n    }\n\n    return result;\n  };\n\n  AztecReader.prototype.reportFoundResultPoints = function (hints, points) {\n    if (hints != null) {\n      var rpcb_1 = hints.get(DecodeHintType_1.default.NEED_RESULT_POINT_CALLBACK);\n\n      if (rpcb_1 != null) {\n        points.forEach(function (point, idx, arr) {\n          rpcb_1.foundPossibleResultPoint(point);\n        });\n      }\n    }\n  }; // @Override\n\n\n  AztecReader.prototype.reset = function () {// do nothing\n  };\n\n  return AztecReader;\n}();\n\nexports.default = AztecReader;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;AAkBA;;AACA;;AAEA;;AACA;;AAEA;;AAEA;;AACA,gD,CAKA;AACA;;AAEA;;;;;;;AAKA;AAAA;AAAA;AAAA,0BAyEC;AAvEG;;;;;;;;;AAOOA,iCAAP,UAAcC,KAAd,EAAmCC,KAAnC,EAAgF;AAA7C;AAAAA;AAA6C;;AAE5E,QAAIC,SAAS,GAAc,IAA3B;AACA,QAAIC,QAAQ,GAAG,IAAIC,kBAAJ,CAAaJ,KAAK,CAACK,cAAN,EAAb,CAAf;AACA,QAAIC,MAAM,GAAkB,IAA5B;AACA,QAAIC,aAAa,GAAkB,IAAnC;;AAEA,QAAI;AACA,UAAIC,cAAc,GAAGL,QAAQ,CAACM,YAAT,CAAsB,KAAtB,CAArB;AACAH,YAAM,GAAGE,cAAc,CAACE,SAAf,EAAT;AACA,WAAKC,uBAAL,CAA6BV,KAA7B,EAAoCK,MAApC;AACAC,mBAAa,GAAG,IAAIK,iBAAJ,GAAcC,MAAd,CAAqBL,cAArB,CAAhB;AACH,KALD,CAKE,OAAOM,CAAP,EAAU;AACRZ,eAAS,GAAGY,CAAZ;AACH;;AACD,QAAIP,aAAa,IAAI,IAArB,EAA2B;AACvB,UAAI;AACA,YAAIC,cAAc,GAAGL,QAAQ,CAACM,YAAT,CAAsB,IAAtB,CAArB;AACAH,cAAM,GAAGE,cAAc,CAACE,SAAf,EAAT;AACA,aAAKC,uBAAL,CAA6BV,KAA7B,EAAoCK,MAApC;AACAC,qBAAa,GAAG,IAAIK,iBAAJ,GAAcC,MAAd,CAAqBL,cAArB,CAAhB;AACH,OALD,CAKE,OAAOM,CAAP,EAAU;AACR,YAAIZ,SAAS,IAAI,IAAjB,EAAuB;AACnB,gBAAMA,SAAN;AACH;;AACD,cAAMY,CAAN;AACH;AACJ;;AAED,QAAIC,MAAM,GAAG,IAAIC,gBAAJ,CAAWT,aAAa,CAACU,OAAd,EAAX,EACTV,aAAa,CAACW,WAAd,EADS,EAETX,aAAa,CAACY,UAAd,EAFS,EAGTb,MAHS,EAITc,wBAAcC,KAJL,EAKTC,iBAAOC,iBAAP,EALS,CAAb;AAOA,QAAIC,YAAY,GAAGjB,aAAa,CAACkB,eAAd,EAAnB;;AACA,QAAID,YAAY,IAAI,IAApB,EAA0B;AACtBT,YAAM,CAACW,WAAP,CAAmBC,6BAAmBC,aAAtC,EAAqDJ,YAArD;AACH;;AACD,QAAIK,OAAO,GAAGtB,aAAa,CAACuB,UAAd,EAAd;;AACA,QAAID,OAAO,IAAI,IAAf,EAAqB;AACjBd,YAAM,CAACW,WAAP,CAAmBC,6BAAmBI,sBAAtC,EAA8DF,OAA9D;AACH;;AAED,WAAOd,MAAP;AACH,GA9CM;;AAgDChB,kDAAR,UAAgCE,KAAhC,EAAiEK,MAAjE,EAAsF;AAClF,QAAIL,KAAK,IAAI,IAAb,EAAmB;AACf,UAAI+B,MAAI,GAAG/B,KAAK,CAACgC,GAAN,CAAUC,yBAAeC,0BAAzB,CAAX;;AACA,UAAIH,MAAI,IAAI,IAAZ,EAAkB;AACd1B,cAAM,CAAC8B,OAAP,CAAe,UAACC,KAAD,EAAQC,GAAR,EAAaC,GAAb,EAAgB;AAC3BP,gBAAI,CAACQ,wBAAL,CAA8BH,KAA9B;AACH,SAFD;AAGH;AACJ;AACJ,GATO,CAzDZ,CAoEI;;;AACOtC,gCAAP,aACI;AACH,GAFM;;AAIX;AAAC,CAzED","names":["AztecReader","image","hints","exception","detector","Detector_1","getBlackMatrix","points","decoderResult","detectorResult","detectMirror","getPoints","reportFoundResultPoints","Decoder_1","decode","e","result","Result_1","getText","getRawBytes","getNumBits","BarcodeFormat_1","AZTEC","System_1","currentTimeMillis","byteSegments","getByteSegments","putMetadata","ResultMetadataType_1","BYTE_SEGMENTS","ecLevel","getECLevel","ERROR_CORRECTION_LEVEL","rpcb_1","get","DecodeHintType_1","NEED_RESULT_POINT_CALLBACK","forEach","point","idx","arr","foundPossibleResultPoint"],"sources":["../../../src/core/aztec/AztecReader.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}