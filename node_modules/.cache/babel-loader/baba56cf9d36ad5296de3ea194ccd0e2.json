{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*namespace com.google.zxing.common.reedsolomon {*/\n\nvar AbstractGenericGF_1 = require(\"./AbstractGenericGF\");\n\nvar System_1 = require(\"../../util/System\");\n\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n/**\n * <p>Represents a polynomial whose coefficients are elements of a GF.\n * Instances of this class are immutable.</p>\n *\n * <p>Much credit is due to William Rucklidge since portions of this code are an indirect\n * port of his C++ Reed-Solomon implementation.</p>\n *\n * @author Sean Owen\n */\n\n\nvar GenericGFPoly =\n/** @class */\nfunction () {\n  /**\n   * @param field the {@link GenericGF} instance representing the field to use\n   * to perform computations\n   * @param coefficients coefficients as ints representing elements of GF(size), arranged\n   * from most significant (highest-power term) coefficient to least significant\n   * @throws IllegalArgumentException if argument is null or empty,\n   * or if leading coefficient is 0 and this is not a\n   * constant polynomial (that is, it is not the monomial \"0\")\n   */\n  function GenericGFPoly(field, coefficients) {\n    if (coefficients.length === 0) {\n      throw new IllegalArgumentException_1.default();\n    }\n\n    this.field = field;\n    var coefficientsLength = coefficients.length;\n\n    if (coefficientsLength > 1 && coefficients[0] === 0) {\n      // Leading term must be non-zero for anything except the constant polynomial \"0\"\n      var firstNonZero = 1;\n\n      while (firstNonZero < coefficientsLength && coefficients[firstNonZero] === 0) {\n        firstNonZero++;\n      }\n\n      if (firstNonZero === coefficientsLength) {\n        this.coefficients = Int32Array.from([0]);\n      } else {\n        this.coefficients = new Int32Array(coefficientsLength - firstNonZero);\n        System_1.default.arraycopy(coefficients, firstNonZero, this.coefficients, 0, this.coefficients.length);\n      }\n    } else {\n      this.coefficients = coefficients;\n    }\n  }\n\n  GenericGFPoly.prototype.getCoefficients = function () {\n    return this.coefficients;\n  };\n  /**\n   * @return degree of this polynomial\n   */\n\n\n  GenericGFPoly.prototype.getDegree = function () {\n    return this.coefficients.length - 1;\n  };\n  /**\n   * @return true iff this polynomial is the monomial \"0\"\n   */\n\n\n  GenericGFPoly.prototype.isZero = function () {\n    return this.coefficients[0] === 0;\n  };\n  /**\n   * @return coefficient of x^degree term in this polynomial\n   */\n\n\n  GenericGFPoly.prototype.getCoefficient = function (degree\n  /*int*/\n  ) {\n    return this.coefficients[this.coefficients.length - 1 - degree];\n  };\n  /**\n   * @return evaluation of this polynomial at a given point\n   */\n\n\n  GenericGFPoly.prototype.evaluateAt = function (a\n  /*int*/\n  ) {\n    if (a === 0) {\n      // Just return the x^0 coefficient\n      return this.getCoefficient(0);\n    }\n\n    var coefficients = this.coefficients;\n    var result;\n\n    if (a === 1) {\n      // Just the sum of the coefficients\n      result = 0;\n\n      for (var i = 0, length_1 = coefficients.length; i !== length_1; i++) {\n        var coefficient = coefficients[i];\n        result = AbstractGenericGF_1.default.addOrSubtract(result, coefficient);\n      }\n\n      return result;\n    }\n\n    result = coefficients[0];\n    var size = coefficients.length;\n    var field = this.field;\n\n    for (var i = 1; i < size; i++) {\n      result = AbstractGenericGF_1.default.addOrSubtract(field.multiply(a, result), coefficients[i]);\n    }\n\n    return result;\n  };\n\n  GenericGFPoly.prototype.addOrSubtract = function (other) {\n    if (!this.field.equals(other.field)) {\n      throw new IllegalArgumentException_1.default('GenericGFPolys do not have same GenericGF field');\n    }\n\n    if (this.isZero()) {\n      return other;\n    }\n\n    if (other.isZero()) {\n      return this;\n    }\n\n    var smallerCoefficients = this.coefficients;\n    var largerCoefficients = other.coefficients;\n\n    if (smallerCoefficients.length > largerCoefficients.length) {\n      var temp = smallerCoefficients;\n      smallerCoefficients = largerCoefficients;\n      largerCoefficients = temp;\n    }\n\n    var sumDiff = new Int32Array(largerCoefficients.length);\n    var lengthDiff = largerCoefficients.length - smallerCoefficients.length; // Copy high-order terms only found in higher-degree polynomial's coefficients\n\n    System_1.default.arraycopy(largerCoefficients, 0, sumDiff, 0, lengthDiff);\n\n    for (var i = lengthDiff; i < largerCoefficients.length; i++) {\n      sumDiff[i] = AbstractGenericGF_1.default.addOrSubtract(smallerCoefficients[i - lengthDiff], largerCoefficients[i]);\n    }\n\n    return new GenericGFPoly(this.field, sumDiff);\n  };\n\n  GenericGFPoly.prototype.multiply = function (other) {\n    if (!this.field.equals(other.field)) {\n      throw new IllegalArgumentException_1.default('GenericGFPolys do not have same GenericGF field');\n    }\n\n    if (this.isZero() || other.isZero()) {\n      return this.field.getZero();\n    }\n\n    var aCoefficients = this.coefficients;\n    var aLength = aCoefficients.length;\n    var bCoefficients = other.coefficients;\n    var bLength = bCoefficients.length;\n    var product = new Int32Array(aLength + bLength - 1);\n    var field = this.field;\n\n    for (var i = 0; i < aLength; i++) {\n      var aCoeff = aCoefficients[i];\n\n      for (var j = 0; j < bLength; j++) {\n        product[i + j] = AbstractGenericGF_1.default.addOrSubtract(product[i + j], field.multiply(aCoeff, bCoefficients[j]));\n      }\n    }\n\n    return new GenericGFPoly(field, product);\n  };\n\n  GenericGFPoly.prototype.multiplyScalar = function (scalar\n  /*int*/\n  ) {\n    if (scalar === 0) {\n      return this.field.getZero();\n    }\n\n    if (scalar === 1) {\n      return this;\n    }\n\n    var size = this.coefficients.length;\n    var field = this.field;\n    var product = new Int32Array(size);\n    var coefficients = this.coefficients;\n\n    for (var i = 0; i < size; i++) {\n      product[i] = field.multiply(coefficients[i], scalar);\n    }\n\n    return new GenericGFPoly(field, product);\n  };\n\n  GenericGFPoly.prototype.multiplyByMonomial = function (degree\n  /*int*/\n  , coefficient\n  /*int*/\n  ) {\n    if (degree < 0) {\n      throw new IllegalArgumentException_1.default();\n    }\n\n    if (coefficient === 0) {\n      return this.field.getZero();\n    }\n\n    var coefficients = this.coefficients;\n    var size = coefficients.length;\n    var product = new Int32Array(size + degree);\n    var field = this.field;\n\n    for (var i = 0; i < size; i++) {\n      product[i] = field.multiply(coefficients[i], coefficient);\n    }\n\n    return new GenericGFPoly(field, product);\n  };\n\n  GenericGFPoly.prototype.divide = function (other) {\n    if (!this.field.equals(other.field)) {\n      throw new IllegalArgumentException_1.default('GenericGFPolys do not have same GenericGF field');\n    }\n\n    if (other.isZero()) {\n      throw new IllegalArgumentException_1.default('Divide by 0');\n    }\n\n    var field = this.field;\n    var quotient = field.getZero();\n    var remainder = this;\n    var denominatorLeadingTerm = other.getCoefficient(other.getDegree());\n    var inverseDenominatorLeadingTerm = field.inverse(denominatorLeadingTerm);\n\n    while (remainder.getDegree() >= other.getDegree() && !remainder.isZero()) {\n      var degreeDifference = remainder.getDegree() - other.getDegree();\n      var scale = field.multiply(remainder.getCoefficient(remainder.getDegree()), inverseDenominatorLeadingTerm);\n      var term = other.multiplyByMonomial(degreeDifference, scale);\n      var iterationQuotient = field.buildMonomial(degreeDifference, scale);\n      quotient = quotient.addOrSubtract(iterationQuotient);\n      remainder = remainder.addOrSubtract(term);\n    }\n\n    return [quotient, remainder];\n  };\n  /*@Override*/\n\n\n  GenericGFPoly.prototype.toString = function () {\n    var result = '';\n\n    for (var degree = this.getDegree(); degree >= 0; degree--) {\n      var coefficient = this.getCoefficient(degree);\n\n      if (coefficient !== 0) {\n        if (coefficient < 0) {\n          result += ' - ';\n          coefficient = -coefficient;\n        } else {\n          if (result.length > 0) {\n            result += ' + ';\n          }\n        }\n\n        if (degree === 0 || coefficient !== 1) {\n          var alphaPower = this.field.log(coefficient);\n\n          if (alphaPower === 0) {\n            result += '1';\n          } else if (alphaPower === 1) {\n            result += 'a';\n          } else {\n            result += 'a^';\n            result += alphaPower;\n          }\n        }\n\n        if (degree !== 0) {\n          if (degree === 1) {\n            result += 'x';\n          } else {\n            result += 'x^';\n            result += degree;\n          }\n        }\n      }\n    }\n\n    return result;\n  };\n\n  return GenericGFPoly;\n}();\n\nexports.default = GenericGFPoly;","map":{"version":3,"mappings":"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","names":["field","coefficients","length","IllegalArgumentException_1","coefficientsLength","firstNonZero","Int32Array","from","System_1","arraycopy","GenericGFPoly","degree","a","getCoefficient","result","i","length_1","coefficient","AbstractGenericGF_1","addOrSubtract","size","multiply","other","equals","isZero","smallerCoefficients","largerCoefficients","temp","sumDiff","lengthDiff","getZero","aCoefficients","aLength","bCoefficients","bLength","product","aCoeff","j","scalar","quotient","remainder","denominatorLeadingTerm","getDegree","inverseDenominatorLeadingTerm","inverse","degreeDifference","scale","term","multiplyByMonomial","iterationQuotient","buildMonomial","alphaPower","log"],"sources":["../../../../src/core/common/reedsolomon/GenericGFPoly.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}